From cead34998f2ecc7119311f5635dce87f8a23c226 Mon Sep 17 00:00:00 2001
From: Brian Ryner <bryner@google.com>
Date: Fri, 28 Aug 2020 13:58:31 +1000
Subject: [PATCH 5/5] Backport of https://github.com/python/cpython/pull/21241

ctypes: check _dyld_shared_cache_contains_path in find_library

System libraries in Mac OS 11 may be present only in the shared cache,
with the actual mach-o file not present in the corresponding location
on the filesystem.   ctypes.util.find_library should check the
shared cache in order to behave consistently across Mac OS 10.15
and earlier and Mac OS 11.0 and later.
---
 Lib/ctypes/macholib/dyld.py      | 12 +++++++++++
 Lib/ctypes/test/test_macholib.py | 15 ++++++++-----
 Modules/_ctypes/callproc.c       | 37 ++++++++++++++++++++++++++++++++
 configure                        |  9 ++++++++
 configure.ac                     |  4 ++++
 pyconfig.h.in                    |  3 +++
 6 files changed, 75 insertions(+), 5 deletions(-)

diff --git a/Lib/ctypes/macholib/dyld.py b/Lib/ctypes/macholib/dyld.py
index 1fdf8d648f..b218db47fd 100644
--- a/Lib/ctypes/macholib/dyld.py
+++ b/Lib/ctypes/macholib/dyld.py
@@ -7,6 +7,12 @@ from framework import framework_info
 from dylib import dylib_info
 from itertools import *
 
+try:
+    from _ctypes import _dyld_shared_cache_contains_path
+except ImportError:
+    def _dyld_shared_cache_contains_path(*args):
+        raise NotImplementedError
+
 __all__ = [
     'dyld_find', 'framework_find',
     'framework_info', 'dylib_info',
@@ -132,6 +138,12 @@ def dyld_find(name, executable_path=None, env=None):
             ), env):
         if os.path.isfile(path):
             return path
+        try:
+            if _dyld_shared_cache_contains_path(path):
+                return path
+        except NotImplementedError:
+            pass
+
     raise ValueError("dylib %s could not be found" % (name,))
 
 def framework_find(fn, executable_path=None, env=None):
diff --git a/Lib/ctypes/test/test_macholib.py b/Lib/ctypes/test/test_macholib.py
index 9779b2f3f4..6759568269 100644
--- a/Lib/ctypes/test/test_macholib.py
+++ b/Lib/ctypes/test/test_macholib.py
@@ -48,18 +48,23 @@ class MachOTest(unittest.TestCase):
     @unittest.skipUnless(sys.platform == "darwin", 'OSX-specific test')
     def test_find(self):
 
-        self.assertEqual(find_lib('pthread'),
-                             '/usr/lib/libSystem.B.dylib')
+        # On Mac OS 11, system dylibs are only present in the shared cache,
+        # so symlinks like libpthread.dylib -> libSystem.B.dylib will not
+        # be resolved by dyld_find
+
+        self.assertIn(find_lib('pthread'),
+                             ('/usr/lib/libSystem.B.dylib', '/usr/lib/libpthread.dylib'))
 
         result = find_lib('z')
         # Issue #21093: dyld default search path includes $HOME/lib and
         # /usr/local/lib before /usr/lib, which caused test failures if
         # a local copy of libz exists in one of them. Now ignore the head
         # of the path.
-        self.assertRegexpMatches(result, r".*/lib/libz\..*.*\.dylib")
+        self.assertRegexpMatches(result, r".*/lib/libz.*\.dylib")
 
-        self.assertEqual(find_lib('IOKit'),
-                             '/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit')
+        self.assertIn(find_lib('IOKit'),
+                             ('/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit',
+                             '/System/Library/Frameworks/IOKit.framework/IOKit'))
 
 if __name__ == "__main__":
     unittest.main()
diff --git a/Modules/_ctypes/callproc.c b/Modules/_ctypes/callproc.c
index 2a687ce976..adebbec479 100644
--- a/Modules/_ctypes/callproc.c
+++ b/Modules/_ctypes/callproc.c
@@ -72,6 +72,10 @@
 #include "ctypes_dlfcn.h"
 #endif
 
+#if __APPLE__ && HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
+#include <mach-o/dyld.h>
+#endif
+
 #ifdef MS_WIN32
 #include <malloc.h>
 #endif
@@ -1467,6 +1471,36 @@ copy_com_pointer(PyObject *self, PyObject *args)
 }
 #else
 
+#if __APPLE__ && HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
+static PyObject *py_dyld_shared_cache_contains_path(PyObject *self, PyObject *args)
+{
+    if (__builtin_available(macos 11, ios 14, watchos 7, tvos 14, *)) {
+        PyObject *name, *name2;
+        char *name_str;
+        if (!PyArg_ParseTuple(args, "O", &name))
+            return NULL;
+
+        if (name == Py_None)
+            Py_RETURN_FALSE;
+
+        if (PyUnicode_FSConverter(name, &name2) == 0)
+            return NULL;
+        if (PyBytes_Check(name2))
+            name_str = PyBytes_AS_STRING(name2);
+        else
+            name_str = PyByteArray_AS_STRING(name2);
+
+        if(_dyld_shared_cache_contains_path(name_str))
+            Py_RETURN_TRUE;
+        else
+            Py_RETURN_FALSE;
+    } else {
+        PyErr_SetString(PyExc_NotImplementedError, "_dyld_shared_cache_contains_path symbol is missing");
+        return NULL;
+    }
+}
+#endif
+
 static PyObject *py_dl_open(PyObject *self, PyObject *args)
 {
     char *name;
@@ -1991,6 +2025,9 @@ PyMethodDef _ctypes_module_methods[] = {
      "dlopen(name, flag={RTLD_GLOBAL|RTLD_LOCAL}) open a shared library"},
     {"dlclose", py_dl_close, METH_VARARGS, "dlclose a library"},
     {"dlsym", py_dl_sym, METH_VARARGS, "find symbol in shared library"},
+#endif
+#if __APPLE__ && HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
+    {"_dyld_shared_cache_contains_path", py_dyld_shared_cache_contains_path, METH_VARARGS, "check if path is in the shared cache"},
 #endif
     {"alignment", align_func, METH_O, alignment_doc},
     {"sizeof", sizeof_func, METH_O, sizeof_doc},
diff --git a/configure b/configure
index 63d675312d..2b29cf2a9c 100755
--- a/configure
+++ b/configure
@@ -10596,6 +10596,15 @@ fi
 done
 
 
+ac_fn_c_check_decl "$LINENO" "_dyld_shared_cache_contains_path" "ac_cv_have_decl__dyld_shared_cache_contains_path" "#include <mach-o/dyld.h>
+"
+if test "x$ac_cv_have_decl__dyld_shared_cache_contains_path" = xyes; then :
+
+$as_echo "#define HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH 1" >>confdefs.h
+
+fi
+
+
 # DYNLOADFILE specifies which dynload_*.o file we will use for dynamic
 # loading of modules.
 
diff --git a/configure.ac b/configure.ac
index efe6922b5d..6c8f63d13f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3075,6 +3075,10 @@ DLINCLDIR=.
 # platforms, such as AIX, have dlopen(), but don't want to use it.
 AC_CHECK_FUNCS(dlopen)
 
+AC_CHECK_DECL(_dyld_shared_cache_contains_path,
+  AC_DEFINE(HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH, 1, Define if you have the '_dyld_shared_cache_contains_path' function),
+  [], [#include <mach-o/dyld.h>])
+
 # DYNLOADFILE specifies which dynload_*.o file we will use for dynamic
 # loading of modules.
 AC_SUBST(DYNLOADFILE)
diff --git a/pyconfig.h.in b/pyconfig.h.in
index 4da6e7104a..8a4eaf5701 100644
--- a/pyconfig.h.in
+++ b/pyconfig.h.in
@@ -216,6 +216,9 @@
 /* Define to 1 if you have the `dup2' function. */
 #undef HAVE_DUP2
 
+/* Define if you have the '_dyld_shared_cache_contains_path' function */
+#undef HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
+
 /* Defined when any dynamic module loading is enabled. */
 #undef HAVE_DYNAMIC_LOADING
 
-- 
2.28.0.402.g5ffc5be6b7-goog

