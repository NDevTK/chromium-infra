// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package recipes.infra.windows_image_builder.windows_image_builder;

// Image properties recognized by 'infra/windows_image_builder' recipe.
message Image {
  // The name of this windows image.
  //
  // E.g. basic_win10_image
  string name = 1;

  // The architecture to build for..
  Arch arch = 2;

  // The offline winpe customization user requirements.
  OfflineCustomization offline_winpe_customization = 3;

  // The offline windows OS customization user requirements.
  OfflineCustomization offline_os_customization = 4;
}

message OfflineCustomization {
  // The name of an OfflineCustomization.
  //
  // E.g. basic_offline_winpe, basic_offline_windowsOS
  string name = 1;

  // The name of OfflineCustomizations you want to take precident. The last
  // entry specified takes precident when multiple actions of the same name are
  // listed.
  repeated OfflineAction offline_customization = 3;
}

// Refer to a specific offline customization action
message OfflineAction {
  // The name for a given offline customization, e.g. basic_network_setup.
  string name = 1;

  // List of actions to be performed for the customization.
  repeated Action actions = 2;
}

message Action {
  oneof action{
    // Adds the given file to the image
    AddFile add_file = 1;
    // Installs a given file on the device
    InstallFile install_file = 2;
    EditOfflineRegistry edit_offline_registry = 3;
  }
}

message AddFile {
  // The AddFile action's name, e.g. add_startnet
  string name = 1;

  // Src of the file to add
  Src src = 2;

  // relative to root of mounted image, e.g. Windows\System32\startnet.cmd
  string dst = 3;
}

message InstallFile {
  // The AddFile action's name, e.g. add_startnet
  string name = 1;
  // The install command to be run
  string init = 2;
  // Args for the install command
  repeated string args = 3;
  // Src of the install file
  Src src = 4;
}


message EditOfflineRegistry {
  // The EditOfflineRegistry action's name, e.g. add_startnet
  string name = 1;

  // relative to root of mounted image, e.g. Windows\System32\Config\software
  string reg_hive_file = 2;

  // relative to root of the mounted registry file, e.g. Microsoft\Windows Defender\Features
  string reg_key_path = 3;

  // The name of the registry key property you want to create\edit e.g. TamperProtection
  string property_name = 4;

  // The value of the registry key property you want to create\edit e.g. 0
  string property_value = 5;

  // The property_type of the registry property you want to create\edit e.g. DWord
  RegPropertyType property_type = 6;
}

// referenced from https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.registryvaluekind?view=net-5.0
enum RegPropertyType {
  Binary = 0;
  DWord = 1;
  ExpandString = 2;
  MultiString = 3;
  None = 4;
  QWord = 5;
  String = 6;
  Unknown =7;
}

enum Arch {
  ARCH_UNSPECIFIED = 0;
  ARCH_AMD64 = 1;
  ARCH_X86 = 2;
  ARCH_ARM64 = 3;
}

message Src {
  oneof src {
    // local_src refers to the local file on the bot
    string local_src = 1 [deprecated=true];
    // CIPD src refers to a cipd instance
    CIPDSrc cipd_src = 2;
    // git src refers to a file in a git repo
    GITSrc git_src = 3;
  }
}

// Ref to cipd file to be used as a source
message CIPDSrc {
  // Name/Path of the cipd package
  string package = 1;
  // Refs can be a instance or 'latest'
  string refs = 2;
  // Platform support for the package
  string platform = 3;
}

// Ref to git file to be used as source
message GITSrc {
  // Name of the GIT repo to pull from
  string repo = 1;
  // refs/commit to pull
  string ref = 2;
  // The file we need in the repo
  string src = 3;
}
