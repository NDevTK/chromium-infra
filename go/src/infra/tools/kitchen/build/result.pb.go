// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tools/kitchen/build/result.proto

/*
Package build is a generated protocol buffer package.

It is generated from these files:
	infra/tools/kitchen/build/result.proto

It has these top-level messages:
	BuildRunResult
	OptionalInt32
	InfraFailure
*/
package build

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import recipe_engine "infra/tools/kitchen/third_party/recipe_engine"
import milo "go.chromium.org/luci/common/proto/milo"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfraFailure_Type int32

const (
	// An unexpected internal error happened inside build bootstrapper.
	InfraFailure_BOOTSTRAPPER_ERROR InfraFailure_Type = 0
	// Build bootstrapper input was invalid, for example flags.
	InfraFailure_INVALID_INPUT InfraFailure_Type = 1
	// Build run was cancelled.
	InfraFailure_CANCELED InfraFailure_Type = 2
	// Recipe has infra-failed.
	InfraFailure_RECIPE_INFRA_FAILURE InfraFailure_Type = 3
)

var InfraFailure_Type_name = map[int32]string{
	0: "BOOTSTRAPPER_ERROR",
	1: "INVALID_INPUT",
	2: "CANCELED",
	3: "RECIPE_INFRA_FAILURE",
}
var InfraFailure_Type_value = map[string]int32{
	"BOOTSTRAPPER_ERROR":   0,
	"INVALID_INPUT":        1,
	"CANCELED":             2,
	"RECIPE_INFRA_FAILURE": 3,
}

func (x InfraFailure_Type) String() string {
	return proto.EnumName(InfraFailure_Type_name, int32(x))
}
func (InfraFailure_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Result of a build run from the perspective of a build bootstrapper.
type BuildRunResult struct {
	// A failure of the build infrastructure.
	// A build with an infra failure cannot be used to judge the build input
	// (e.g. a CL).
	InfraFailure *InfraFailure `protobuf:"bytes,1,opt,name=infra_failure,json=infraFailure" json:"infra_failure,omitempty"`
	// recipes.py's exit code.
	RecipeExitCode *OptionalInt32 `protobuf:"bytes,2,opt,name=recipe_exit_code,json=recipeExitCode" json:"recipe_exit_code,omitempty"`
	// Results returned by recipe engine.
	RecipeResult *recipe_engine.Result `protobuf:"bytes,3,opt,name=recipe_result,json=recipeResult" json:"recipe_result,omitempty"`
	// Final state of the annotation proto.
	Annotations *milo.Step `protobuf:"bytes,4,opt,name=annotations" json:"annotations,omitempty"`
	// URL where the annotations (above) can be fetched from.
	// In practice, a LogDog URL.
	AnnotationUrl string `protobuf:"bytes,5,opt,name=annotation_url,json=annotationUrl" json:"annotation_url,omitempty"`
}

func (m *BuildRunResult) Reset()                    { *m = BuildRunResult{} }
func (m *BuildRunResult) String() string            { return proto.CompactTextString(m) }
func (*BuildRunResult) ProtoMessage()               {}
func (*BuildRunResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildRunResult) GetInfraFailure() *InfraFailure {
	if m != nil {
		return m.InfraFailure
	}
	return nil
}

func (m *BuildRunResult) GetRecipeExitCode() *OptionalInt32 {
	if m != nil {
		return m.RecipeExitCode
	}
	return nil
}

func (m *BuildRunResult) GetRecipeResult() *recipe_engine.Result {
	if m != nil {
		return m.RecipeResult
	}
	return nil
}

func (m *BuildRunResult) GetAnnotations() *milo.Step {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *BuildRunResult) GetAnnotationUrl() string {
	if m != nil {
		return m.AnnotationUrl
	}
	return ""
}

// An int32 that can be distinguished from absence of the value.
type OptionalInt32 struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *OptionalInt32) Reset()                    { *m = OptionalInt32{} }
func (m *OptionalInt32) String() string            { return proto.CompactTextString(m) }
func (*OptionalInt32) ProtoMessage()               {}
func (*OptionalInt32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OptionalInt32) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type InfraFailure struct {
	Type InfraFailure_Type `protobuf:"varint,1,opt,name=type,enum=luci.build.InfraFailure_Type" json:"type,omitempty"`
	Text string            `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	// Build bootstrapper call stack is populated on bootstrapper errors.
	BootstrapperCallStack []string `protobuf:"bytes,3,rep,name=bootstrapper_call_stack,json=bootstrapperCallStack" json:"bootstrapper_call_stack,omitempty"`
}

func (m *InfraFailure) Reset()                    { *m = InfraFailure{} }
func (m *InfraFailure) String() string            { return proto.CompactTextString(m) }
func (*InfraFailure) ProtoMessage()               {}
func (*InfraFailure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InfraFailure) GetType() InfraFailure_Type {
	if m != nil {
		return m.Type
	}
	return InfraFailure_BOOTSTRAPPER_ERROR
}

func (m *InfraFailure) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *InfraFailure) GetBootstrapperCallStack() []string {
	if m != nil {
		return m.BootstrapperCallStack
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildRunResult)(nil), "luci.build.BuildRunResult")
	proto.RegisterType((*OptionalInt32)(nil), "luci.build.OptionalInt32")
	proto.RegisterType((*InfraFailure)(nil), "luci.build.InfraFailure")
	proto.RegisterEnum("luci.build.InfraFailure_Type", InfraFailure_Type_name, InfraFailure_Type_value)
}

func init() { proto.RegisterFile("infra/tools/kitchen/build/result.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0x8a, 0x1a, 0x31,
	0x14, 0xc6, 0xeb, 0xbf, 0xb6, 0x9e, 0x55, 0xb1, 0x61, 0xb7, 0x9d, 0x2e, 0x14, 0x44, 0xd8, 0xe2,
	0x45, 0xc9, 0x50, 0x17, 0x4a, 0x59, 0xe8, 0x85, 0xce, 0x8e, 0x30, 0x20, 0x2a, 0x51, 0x0b, 0xed,
	0x4d, 0x88, 0x63, 0x56, 0xc3, 0xc6, 0x64, 0x88, 0x99, 0xa2, 0x0f, 0xd4, 0x77, 0xeb, 0x63, 0x94,
	0xc9, 0x6c, 0x71, 0x84, 0xee, 0xdd, 0x9c, 0xf3, 0x9d, 0xf3, 0x9b, 0xef, 0x7c, 0x04, 0x3e, 0x0a,
	0xf5, 0x60, 0x98, 0x6f, 0xb5, 0x96, 0x7b, 0xff, 0x51, 0xd8, 0x78, 0xcb, 0x95, 0xbf, 0x4a, 0x85,
	0x5c, 0xfb, 0x86, 0xef, 0x53, 0x69, 0x71, 0x62, 0xb4, 0xd5, 0x08, 0x64, 0x1a, 0x0b, 0xec, 0x84,
	0xeb, 0xbb, 0xff, 0xed, 0xd8, 0xad, 0x30, 0x6b, 0x9a, 0x30, 0x63, 0x8f, 0xbe, 0xe1, 0xb1, 0x48,
	0x38, 0xe5, 0x6a, 0x23, 0x14, 0x3f, 0xe3, 0x5c, 0x7f, 0xdd, 0x68, 0x1c, 0x6f, 0x8d, 0xde, 0x89,
	0x74, 0x87, 0xb5, 0xd9, 0xf8, 0x19, 0xd7, 0x8f, 0xf5, 0x6e, 0xa7, 0x95, 0xef, 0x46, 0xfc, 0x9d,
	0x90, 0xda, 0x67, 0x4a, 0x69, 0xcb, 0xac, 0xd0, 0x6a, 0x9f, 0x6f, 0x76, 0x7f, 0x97, 0xa1, 0x35,
	0xcc, 0xfe, 0x4f, 0x52, 0x45, 0x1c, 0x12, 0x7d, 0x83, 0xa6, 0xb3, 0x42, 0x1f, 0x98, 0x90, 0xa9,
	0xe1, 0x5e, 0xa9, 0x53, 0xea, 0x5d, 0xf4, 0x3d, 0x7c, 0x32, 0x8b, 0xa3, 0x6c, 0x60, 0x94, 0xeb,
	0xa4, 0x21, 0x0a, 0x15, 0x0a, 0xa0, 0xfd, 0xcf, 0xe9, 0x41, 0x58, 0x1a, 0xeb, 0x35, 0xf7, 0xca,
	0x8e, 0xf0, 0xbe, 0x48, 0x98, 0x26, 0x99, 0x0d, 0x26, 0x23, 0x65, 0x6f, 0xfb, 0xa4, 0x95, 0xaf,
	0x84, 0x07, 0x61, 0x03, 0xbd, 0xe6, 0xe8, 0x0e, 0x9a, 0x4f, 0x90, 0xfc, 0x4e, 0xaf, 0xe2, 0x08,
	0x57, 0xf8, 0x2c, 0x04, 0x9c, 0x3b, 0x26, 0x8d, 0xbc, 0xfb, 0xe4, 0xff, 0x13, 0x5c, 0x14, 0xee,
	0xf4, 0xaa, 0x6e, 0x13, 0x70, 0x16, 0x00, 0x9e, 0x5b, 0x9e, 0x90, 0xa2, 0x8c, 0x6e, 0xa0, 0x75,
	0x2a, 0x69, 0x6a, 0xa4, 0x57, 0xeb, 0x94, 0x7a, 0x75, 0xd2, 0x3c, 0x75, 0x97, 0x46, 0x76, 0x6f,
	0xa0, 0x79, 0xe6, 0x18, 0x5d, 0x42, 0xed, 0x17, 0x93, 0x69, 0x9e, 0x4e, 0x8d, 0xe4, 0x45, 0xf7,
	0x4f, 0x09, 0x1a, 0xc5, 0x6c, 0xd0, 0x67, 0xa8, 0xda, 0x63, 0x92, 0x4f, 0xb5, 0xfa, 0x1f, 0x9e,
	0xcb, 0x10, 0x2f, 0x8e, 0x09, 0x27, 0x6e, 0x14, 0x21, 0xa8, 0x5a, 0x7e, 0xb0, 0x2e, 0xb4, 0x3a,
	0x71, 0xdf, 0xe8, 0x0b, 0xbc, 0x5b, 0x69, 0x6d, 0xf7, 0xd6, 0xb0, 0x24, 0xe1, 0x86, 0xc6, 0x4c,
	0x4a, 0xba, 0xb7, 0x2c, 0x7e, 0xf4, 0x2a, 0x9d, 0x4a, 0xaf, 0x4e, 0xae, 0x8a, 0x72, 0xc0, 0xa4,
	0x9c, 0x67, 0x62, 0xf7, 0x07, 0x54, 0x33, 0x32, 0x7a, 0x0b, 0x68, 0x38, 0x9d, 0x2e, 0xe6, 0x0b,
	0x32, 0x98, 0xcd, 0x42, 0x42, 0x43, 0x42, 0xa6, 0xa4, 0xfd, 0x02, 0xbd, 0x81, 0x66, 0x34, 0xf9,
	0x3e, 0x18, 0x47, 0xf7, 0x34, 0x9a, 0xcc, 0x96, 0x8b, 0x76, 0x09, 0x35, 0xe0, 0x75, 0x30, 0x98,
	0x04, 0xe1, 0x38, 0xbc, 0x6f, 0x97, 0x91, 0x07, 0x97, 0x24, 0x0c, 0xa2, 0x59, 0x48, 0xa3, 0xc9,
	0x88, 0x0c, 0xe8, 0x68, 0x10, 0x8d, 0x97, 0x24, 0x6c, 0x57, 0x86, 0xaf, 0x7e, 0xd6, 0xdc, 0x1d,
	0xab, 0x97, 0xee, 0x25, 0xdd, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x44, 0x62, 0xe5, 0xf5,
	0x02, 0x00, 0x00,
}
