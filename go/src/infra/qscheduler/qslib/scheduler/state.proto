// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package scheduler;

import "google/protobuf/timestamp.proto";
import "infra/qscheduler/qslib/scheduler/task.proto";
import "infra/qscheduler/qslib/scheduler/worker.proto";
import "infra/qscheduler/qslib/types/vector/vector.proto";

// StateProto represents the overall state of a quota scheduler worker pool,
// account set, and task queue. This is represented separately from
// configuration information. The state is expected to be updated frequently,
// on each scheduler tick.
message StateProto {
  // QueuedRequests is the set of Requests that are waiting to be assigned to a
  // worker, keyed by request id.
  map<string, TaskRequest> queued_requests = 1;

  // Balance of all quota accounts for this pool, keyed by account id.
  map<string, vector.Vector> balances = 2;

  // Workers that may run tasks, and their states, keyed by worker id.
  map<string, Worker> workers = 3;

  // LastUpdateTime is the last time at which UpdateTime was called on a scheduler,
  // and corresponds to the when the quota account balances were updated.
  google.protobuf.Timestamp last_update_time = 4;

  // RunningRequestsCache should be treated as private and unexported.
  //
  // It is logically the inverse of Workers, a map from request id to worker id
  // for running tasks. This is used to optimize certain lookups, however
  // Workers is the authoritative source.
  map<string, string> running_requests_cache = 5;

  // TODO(akeshet): Add a store of (completed request id, timestamp) that will
  // allow us to remember all the tasks that were completed within the last
  // X hours, and ignore any possible extremely-stale AddRequest calls we get
  // about them.
}
