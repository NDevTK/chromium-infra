// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tasks.proto

package swarming

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TaskState represents the different allowed states for a Task.
//
// This is taken from swarming_rpcs.py:TaskState
type TaskState int32

const (
	// Invalid state, do not use.
	TaskState_INVALID TaskState = 0
	// The task is currently running. This is in fact 3 phases: the initial
	// overhead to fetch input files, the actual task running, and the tear down
	// overhead to archive output files to the server.
	TaskState_RUNNING TaskState = 16
	// The task is currently pending. This means that no bot reaped the task. It
	// will stay in this state until either a task reaps it or the expiration
	// elapsed. The task pending expiration is specified as
	// TaskSlice.expiration_secs, one per task slice.
	TaskState_PENDING TaskState = 32
	// The task is not pending anymore, and never ran due to lack of capacity. This
	// means that other higher priority tasks ran instead and that not enough bots
	// were available to run this task for TaskSlice.expiration_secs seconds.
	TaskState_EXPIRED TaskState = 48
	// The task ran for longer than the allowed time in
	// TaskProperties.execution_timeout_secs or TaskProperties.io_timeout_secs.
	// This means the bot forcefully killed the task process as described in the
	// graceful termination dance in the documentation.
	TaskState_TIMED_OUT TaskState = 64
	// The task ran but the bot had an internal failure, unrelated to the task
	// itself. It can be due to the server being unavailable to get task update,
	// the host on which the bot is running crashing or rebooting, etc.
	TaskState_BOT_DIED TaskState = 80
	// The task never ran, and was manually cancelled via the 'cancel' API before
	// it was reaped.
	TaskState_CANCELED TaskState = 96
	// The task ran and completed normally. The task process exit code may be 0 or
	// another value.
	TaskState_COMPLETED TaskState = 112
	// The task ran but was manually killed via the 'cancel' API. This means the
	// bot forcefully killed the task process as described in the graceful
	// termination dance in the documentation.
	TaskState_KILLED TaskState = 128
	// The task was never set to PENDING and was immediately refused, as the server
	// determined that there is no bot capacity to run this task. This happens
	// because no bot exposes a superset of the requested task dimensions.
	//
	// Set TaskSlice.wait_for_capacity to True to force the server to keep the task
	// slice pending even in this case. Generally speaking, the task will
	// eventually switch to EXPIRED, as there's no bot to run it. That said, there
	// are situations where it is known that in some not-too-distant future a wild
	// bot will appear that will be able to run this task.
	TaskState_NO_RESOURCE TaskState = 256
)

var TaskState_name = map[int32]string{
	0:   "INVALID",
	16:  "RUNNING",
	32:  "PENDING",
	48:  "EXPIRED",
	64:  "TIMED_OUT",
	80:  "BOT_DIED",
	96:  "CANCELED",
	112: "COMPLETED",
	128: "KILLED",
	256: "NO_RESOURCE",
}

var TaskState_value = map[string]int32{
	"INVALID":     0,
	"RUNNING":     16,
	"PENDING":     32,
	"EXPIRED":     48,
	"TIMED_OUT":   64,
	"BOT_DIED":    80,
	"CANCELED":    96,
	"COMPLETED":   112,
	"KILLED":      128,
	"NO_RESOURCE": 256,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{0}
}

// TaskSpec describes a task request and its state, for the purposes of the
// external scheduler API.
//
// It intentionally elides aspects of a task request that are irrelevant
// to scheduling decisions, to keep this proto small for performance reasons.
//
// This message format is in its early stages, and may be subject to frequent
// or even breaking changes as the external scheduler API is rolled out.
type TaskSpec struct {
	// ID is the swarming task request it.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tags is the list of tags applied to this task request.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// Slices is the set of task slices for this spec. A TaskSpec must contain
	// at least 1 slice.
	Slices []*SliceSpec `protobuf:"bytes,3,rep,name=slices,proto3" json:"slices,omitempty"`
	// State is the current state of this task.
	State TaskState `protobuf:"varint,4,opt,name=state,proto3,enum=swarming.TaskState" json:"state,omitempty"`
	// BotID is the id of the bot that this task is running on. It is only
	// valid if state=RUNNING.
	BotId string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// EnqueuedTime is the time at which a task was enqueued. It is only valid
	// if state=PENDING.
	EnqueuedTime         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=enqueued_time,json=enqueuedTime,proto3" json:"enqueued_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TaskSpec) Reset()         { *m = TaskSpec{} }
func (m *TaskSpec) String() string { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()    {}
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{0}
}

func (m *TaskSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSpec.Unmarshal(m, b)
}
func (m *TaskSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSpec.Marshal(b, m, deterministic)
}
func (m *TaskSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSpec.Merge(m, src)
}
func (m *TaskSpec) XXX_Size() int {
	return xxx_messageInfo_TaskSpec.Size(m)
}
func (m *TaskSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSpec proto.InternalMessageInfo

func (m *TaskSpec) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskSpec) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TaskSpec) GetSlices() []*SliceSpec {
	if m != nil {
		return m.Slices
	}
	return nil
}

func (m *TaskSpec) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_INVALID
}

func (m *TaskSpec) GetBotId() string {
	if m != nil {
		return m.BotId
	}
	return ""
}

func (m *TaskSpec) GetEnqueuedTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueuedTime
	}
	return nil
}

// SliceSpec describes a task request slice, for the purposes of TaskSpec.
type SliceSpec struct {
	// Dimensions is set dimension strings for this slice.
	Dimensions           []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SliceSpec) Reset()         { *m = SliceSpec{} }
func (m *SliceSpec) String() string { return proto.CompactTextString(m) }
func (*SliceSpec) ProtoMessage()    {}
func (*SliceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{1}
}

func (m *SliceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SliceSpec.Unmarshal(m, b)
}
func (m *SliceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SliceSpec.Marshal(b, m, deterministic)
}
func (m *SliceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceSpec.Merge(m, src)
}
func (m *SliceSpec) XXX_Size() int {
	return xxx_messageInfo_SliceSpec.Size(m)
}
func (m *SliceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SliceSpec proto.InternalMessageInfo

func (m *SliceSpec) GetDimensions() []string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func init() {
	proto.RegisterEnum("swarming.TaskState", TaskState_name, TaskState_value)
	proto.RegisterType((*TaskSpec)(nil), "swarming.TaskSpec")
	proto.RegisterType((*SliceSpec)(nil), "swarming.SliceSpec")
}

func init() { proto.RegisterFile("tasks.proto", fileDescriptor_b3834c8ef8464a3f) }

var fileDescriptor_b3834c8ef8464a3f = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xdf, 0x6e, 0x94, 0x40,
	0x18, 0xc5, 0x9d, 0xdd, 0x2e, 0x2e, 0x1f, 0x6d, 0x33, 0x19, 0x63, 0x42, 0x7a, 0xa1, 0xa4, 0x57,
	0x68, 0x13, 0x6a, 0xea, 0x03, 0x68, 0x65, 0x26, 0x66, 0x22, 0x05, 0x32, 0xcb, 0x1a, 0xef, 0x10,
	0xca, 0x48, 0x26, 0x2d, 0x7f, 0xec, 0xcc, 0xc6, 0xdb, 0x3e, 0x86, 0x4f, 0xe7, 0xb3, 0x98, 0x61,
	0x4b, 0xb3, 0x77, 0x9c, 0xf3, 0x1d, 0xe6, 0x9c, 0x1f, 0x78, 0xa6, 0xd2, 0x77, 0x3a, 0x1a, 0x1f,
	0x06, 0x33, 0x90, 0xb5, 0xfe, 0x53, 0x3d, 0x74, 0xaa, 0x6f, 0xcf, 0xde, 0xb6, 0xc3, 0xd0, 0xde,
	0xcb, 0xcb, 0xc9, 0xaf, 0x77, 0xbf, 0x2e, 0x8d, 0xea, 0xa4, 0x36, 0x55, 0x37, 0xee, 0xa3, 0xe7,
	0xff, 0x10, 0xac, 0x8b, 0x4a, 0xdf, 0x6d, 0x46, 0x79, 0x4b, 0x4e, 0x61, 0xa1, 0x1a, 0x1f, 0x05,
	0x28, 0x74, 0xc5, 0x42, 0x35, 0x84, 0xc0, 0x91, 0xa9, 0x5a, 0xed, 0x2f, 0x82, 0x65, 0xe8, 0x8a,
	0xe9, 0x9b, 0x5c, 0x80, 0xa3, 0xef, 0xd5, 0xad, 0xd4, 0xfe, 0x32, 0x58, 0x86, 0xde, 0xd5, 0xab,
	0x68, 0x2e, 0x8b, 0x36, 0xd6, 0xb7, 0x0f, 0x89, 0xa7, 0x08, 0x79, 0x07, 0x2b, 0x6d, 0x2a, 0x23,
	0xfd, 0xa3, 0x00, 0x85, 0xa7, 0x87, 0xd9, 0xa9, 0xd3, 0x9e, 0xc4, 0x3e, 0x41, 0x5e, 0x83, 0x53,
	0x0f, 0xa6, 0x54, 0x8d, 0xbf, 0x9a, 0xfa, 0x57, 0xf5, 0x60, 0x78, 0x43, 0x3e, 0xc1, 0x89, 0xec,
	0x7f, 0xef, 0xe4, 0x4e, 0x36, 0xa5, 0xdd, 0xee, 0x3b, 0x01, 0x0a, 0xbd, 0xab, 0xb3, 0x68, 0x0f,
	0x16, 0xcd, 0x60, 0x51, 0x31, 0x83, 0x89, 0xe3, 0xf9, 0x07, 0x6b, 0x9d, 0x5f, 0x80, 0xfb, 0xbc,
	0x8b, 0xbc, 0x01, 0x68, 0x54, 0x27, 0x7b, 0xad, 0x86, 0x5e, 0xfb, 0x68, 0xc2, 0x3a, 0x70, 0xde,
	0xff, 0x45, 0xe0, 0x3e, 0x2f, 0x23, 0x1e, 0xbc, 0xe4, 0xe9, 0xf7, 0xeb, 0x84, 0x53, 0xfc, 0xc2,
	0x0a, 0xb1, 0x4d, 0x53, 0x9e, 0x7e, 0xc5, 0xd8, 0x8a, 0x9c, 0xa5, 0xd4, 0x8a, 0xc0, 0x0a, 0xf6,
	0x23, 0xe7, 0x82, 0x51, 0xfc, 0x81, 0x9c, 0x80, 0x5b, 0xf0, 0x1b, 0x46, 0xcb, 0x6c, 0x5b, 0xe0,
	0xcf, 0xe4, 0x18, 0xd6, 0x5f, 0xb2, 0xa2, 0xa4, 0x9c, 0x51, 0x9c, 0x5b, 0x15, 0x5f, 0xa7, 0x31,
	0x4b, 0x18, 0xc5, 0x3f, 0x6d, 0x34, 0xce, 0x6e, 0xf2, 0x84, 0x15, 0x8c, 0xe2, 0x91, 0x78, 0xe0,
	0x7c, 0xe3, 0x89, 0x3d, 0x3d, 0x22, 0x82, 0xc1, 0x4b, 0xb3, 0x52, 0xb0, 0x4d, 0xb6, 0x15, 0x31,
	0xc3, 0x8f, 0x8b, 0xda, 0x99, 0x48, 0x3f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xde, 0x0b, 0x2f,
	0xa9, 0xe9, 0x01, 0x00, 0x00,
}
