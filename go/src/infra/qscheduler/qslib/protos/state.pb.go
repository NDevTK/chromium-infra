// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/qscheduler/qslib/protos/state.proto

package protos

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// State represents the overall state of a quota scheduler worker pool,
// account set, and task queue. This is represented separately from
// configuration information. The state is expected to be updated frequently,
// on each scheduler tick.
//
// The proto representation optimizes for a small binary-serialized size, rather
// than human-friendliness, because the number of tasks that can be stored
// in a single datastore entity (~1 MB) is one of the main scaling limits
// of the quotascheduler.
type SchedulerState struct {
	// QueuedRequests is the set of Requests that are waiting to be assigned to a
	// worker, keyed by request id.
	QueuedRequests map[string]*TaskRequest `protobuf:"bytes,1,rep,name=queued_requests,json=queuedRequests,proto3" json:"queued_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Balance of all quota accounts for this pool, keyed by account id.
	Balances map[string]*SchedulerState_Balance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Workers that may run tasks, and their states, keyed by worker id.
	Workers map[string]*Worker `protobuf:"bytes,3,rep,name=workers,proto3" json:"workers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// LastUpdateTime is the last time at which UpdateTime was called on a scheduler,
	// and corresponds to the when the quota account balances were updated.
	LastUpdateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// LabelMap maps label IDs to their string values.
	//
	// Requests and workers store labels by IDs.
	LabelMap             map[uint64]string `protobuf:"bytes,5,rep,name=label_map,json=labelMap,proto3" json:"label_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SchedulerState) Reset()         { *m = SchedulerState{} }
func (m *SchedulerState) String() string { return proto.CompactTextString(m) }
func (*SchedulerState) ProtoMessage()    {}
func (*SchedulerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8fd87cf23cc561d, []int{0}
}

func (m *SchedulerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerState.Unmarshal(m, b)
}
func (m *SchedulerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerState.Marshal(b, m, deterministic)
}
func (m *SchedulerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerState.Merge(m, src)
}
func (m *SchedulerState) XXX_Size() int {
	return xxx_messageInfo_SchedulerState.Size(m)
}
func (m *SchedulerState) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerState.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerState proto.InternalMessageInfo

func (m *SchedulerState) GetQueuedRequests() map[string]*TaskRequest {
	if m != nil {
		return m.QueuedRequests
	}
	return nil
}

func (m *SchedulerState) GetBalances() map[string]*SchedulerState_Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *SchedulerState) GetWorkers() map[string]*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *SchedulerState) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *SchedulerState) GetLabelMap() map[uint64]string {
	if m != nil {
		return m.LabelMap
	}
	return nil
}

type SchedulerState_Balance struct {
	Value                []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SchedulerState_Balance) Reset()         { *m = SchedulerState_Balance{} }
func (m *SchedulerState_Balance) String() string { return proto.CompactTextString(m) }
func (*SchedulerState_Balance) ProtoMessage()    {}
func (*SchedulerState_Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8fd87cf23cc561d, []int{0, 1}
}

func (m *SchedulerState_Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerState_Balance.Unmarshal(m, b)
}
func (m *SchedulerState_Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerState_Balance.Marshal(b, m, deterministic)
}
func (m *SchedulerState_Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerState_Balance.Merge(m, src)
}
func (m *SchedulerState_Balance) XXX_Size() int {
	return xxx_messageInfo_SchedulerState_Balance.Size(m)
}
func (m *SchedulerState_Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerState_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerState_Balance proto.InternalMessageInfo

func (m *SchedulerState_Balance) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// TaskRequestProto represents a requested task in the queue, and refers to the
// quota account to run it against. This representation intentionally
// excludes most of the details of a Swarming task request.
type TaskRequest struct {
	// AccountId is the id of the account that this request charges to.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// EnqueueTime is the time at which the request was enqueued.
	EnqueueTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	// ConfirmedTime is the most recent time at which the Request state was
	// provided or confirmed by external authority (via a call to Enforce or
	// AddRequest).
	ConfirmedTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=confirmed_time,json=confirmedTime,proto3" json:"confirmed_time,omitempty"`
	// ProvisionableLabelIds represents the task's provisionable labels.
	ProvisionableLabelIds []uint64 `protobuf:"varint,6,rep,packed,name=provisionable_label_ids,json=provisionableLabelIds,proto3" json:"provisionable_label_ids,omitempty"`
	// BaseLabelIds represents the task's base labels.
	BaseLabelIds         []uint64 `protobuf:"varint,7,rep,packed,name=base_label_ids,json=baseLabelIds,proto3" json:"base_label_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8fd87cf23cc561d, []int{1}
}

func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRequest.Unmarshal(m, b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return xxx_messageInfo_TaskRequest.Size(m)
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *TaskRequest) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func (m *TaskRequest) GetConfirmedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ConfirmedTime
	}
	return nil
}

func (m *TaskRequest) GetProvisionableLabelIds() []uint64 {
	if m != nil {
		return m.ProvisionableLabelIds
	}
	return nil
}

func (m *TaskRequest) GetBaseLabelIds() []uint64 {
	if m != nil {
		return m.BaseLabelIds
	}
	return nil
}

// TaskRun represents a task that has been assigned to a worker and is
// now running.
type TaskRun struct {
	// Cost is the total cost that has been incurred on this task while running.
	Cost []float32 `protobuf:"fixed32,1,rep,packed,name=cost,proto3" json:"cost,omitempty"`
	// Request is the request that this running task corresponds to.
	Request *TaskRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// RequestId is the request id of the request that this running task
	// corresponds to.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Priority is the current priority level of the running task.
	Priority             int32    `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRun) Reset()         { *m = TaskRun{} }
func (m *TaskRun) String() string { return proto.CompactTextString(m) }
func (*TaskRun) ProtoMessage()    {}
func (*TaskRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8fd87cf23cc561d, []int{2}
}

func (m *TaskRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRun.Unmarshal(m, b)
}
func (m *TaskRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRun.Marshal(b, m, deterministic)
}
func (m *TaskRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRun.Merge(m, src)
}
func (m *TaskRun) XXX_Size() int {
	return xxx_messageInfo_TaskRun.Size(m)
}
func (m *TaskRun) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRun.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRun proto.InternalMessageInfo

func (m *TaskRun) GetCost() []float32 {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *TaskRun) GetRequest() *TaskRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TaskRun) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TaskRun) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// Worker represents a resource that can run 1 task at a time. This corresponds
// to the swarming concept of a Bot. This representation considers only the
// subset of Labels that are Provisionable (can be changed by running a task),
// because the quota scheduler algorithm is expected to run against a pool of
// otherwise homogenous workers.
type Worker struct {
	// RunningTask is, if non-nil, the task that is currently running on the
	// worker.
	RunningTask *TaskRun `protobuf:"bytes,2,opt,name=running_task,json=runningTask,proto3" json:"running_task,omitempty"`
	// ConfirmedTime is the most recent time at which the Worker state was
	// directly confirmed as idle by external authority (via a call to MarkIdle or
	// NotifyRequest).
	ConfirmedTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=confirmed_time,json=confirmedTime,proto3" json:"confirmed_time,omitempty"`
	// LabelIds represents the worker's labels.
	LabelIds             []uint64 `protobuf:"varint,4,rep,packed,name=label_ids,json=labelIds,proto3" json:"label_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8fd87cf23cc561d, []int{3}
}

func (m *Worker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Worker.Unmarshal(m, b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return xxx_messageInfo_Worker.Size(m)
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetRunningTask() *TaskRun {
	if m != nil {
		return m.RunningTask
	}
	return nil
}

func (m *Worker) GetConfirmedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ConfirmedTime
	}
	return nil
}

func (m *Worker) GetLabelIds() []uint64 {
	if m != nil {
		return m.LabelIds
	}
	return nil
}

func init() {
	proto.RegisterType((*SchedulerState)(nil), "protos.SchedulerState")
	proto.RegisterMapType((map[string]*SchedulerState_Balance)(nil), "protos.SchedulerState.BalancesEntry")
	proto.RegisterMapType((map[uint64]string)(nil), "protos.SchedulerState.LabelMapEntry")
	proto.RegisterMapType((map[string]*TaskRequest)(nil), "protos.SchedulerState.QueuedRequestsEntry")
	proto.RegisterMapType((map[string]*Worker)(nil), "protos.SchedulerState.WorkersEntry")
	proto.RegisterType((*SchedulerState_Balance)(nil), "protos.SchedulerState.Balance")
	proto.RegisterType((*TaskRequest)(nil), "protos.TaskRequest")
	proto.RegisterType((*TaskRun)(nil), "protos.TaskRun")
	proto.RegisterType((*Worker)(nil), "protos.Worker")
}

func init() {
	proto.RegisterFile("infra/qscheduler/qslib/protos/state.proto", fileDescriptor_a8fd87cf23cc561d)
}

var fileDescriptor_a8fd87cf23cc561d = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xe5, 0x4b, 0x6e, 0x27, 0x69, 0x1a, 0x4d, 0x8b, 0xb0, 0x8c, 0xa0, 0x51, 0xe8, 0x22,
	0x45, 0xc2, 0x91, 0x0a, 0x42, 0x08, 0x54, 0x09, 0x10, 0x2c, 0x5a, 0xc1, 0x02, 0xb7, 0xc0, 0x82,
	0x85, 0x35, 0xb6, 0xa7, 0xc5, 0x8a, 0x33, 0x76, 0x66, 0xc6, 0x45, 0x7d, 0x02, 0x5e, 0x81, 0x35,
	0x0f, 0xc4, 0x33, 0xa1, 0xb9, 0xb8, 0xb2, 0xa5, 0xb4, 0xc0, 0x6e, 0xe6, 0xe4, 0xff, 0xff, 0xe3,
	0xf9, 0xe6, 0x4c, 0xe0, 0x20, 0xa3, 0xe7, 0x0c, 0x2f, 0xd6, 0x3c, 0xf9, 0x46, 0xd2, 0x2a, 0x27,
	0x6c, 0xb1, 0xe6, 0x79, 0x16, 0x2f, 0x4a, 0x56, 0x88, 0x82, 0x2f, 0xb8, 0xc0, 0x82, 0x04, 0x6a,
	0x83, 0xba, 0xba, 0xe6, 0xef, 0x5d, 0x14, 0xc5, 0x45, 0x4e, 0xb4, 0x24, 0xae, 0xce, 0x17, 0x22,
	0x5b, 0x11, 0x2e, 0xf0, 0xaa, 0xd4, 0xc2, 0xd9, 0xef, 0x0e, 0x8c, 0x4f, 0xeb, 0xbc, 0x53, 0x99,
	0x80, 0x4e, 0x61, 0x7b, 0x5d, 0x91, 0x8a, 0xa4, 0x11, 0x23, 0xeb, 0x8a, 0x70, 0xc1, 0x3d, 0x6b,
	0xea, 0xcc, 0x87, 0x87, 0x8f, 0xb4, 0x87, 0x07, 0x6d, 0x43, 0xf0, 0x51, 0xa9, 0x43, 0x23, 0x7e,
	0x47, 0x05, 0xbb, 0x0a, 0xc7, 0xeb, 0x56, 0x11, 0xbd, 0x82, 0x7e, 0x8c, 0x73, 0x4c, 0x13, 0xc2,
	0x3d, 0x5b, 0xa5, 0xed, 0xdf, 0x90, 0xf6, 0xc6, 0xc8, 0x74, 0xce, 0xb5, 0x0b, 0x1d, 0x41, 0xef,
	0x7b, 0xc1, 0x96, 0x84, 0x71, 0xcf, 0x51, 0x01, 0x0f, 0x6f, 0x08, 0xf8, 0xa2, 0x55, 0xda, 0x5f,
	0x7b, 0xd0, 0x5b, 0x98, 0xe4, 0x98, 0x8b, 0xa8, 0x2a, 0x53, 0x2c, 0x48, 0x24, 0x39, 0x78, 0xee,
	0xd4, 0x9a, 0x0f, 0x0f, 0xfd, 0x40, 0x43, 0x0a, 0x6a, 0x48, 0xc1, 0x59, 0x0d, 0x29, 0x1c, 0x4b,
	0xcf, 0x27, 0x65, 0x91, 0x45, 0xf4, 0x1a, 0x06, 0x39, 0x8e, 0x49, 0x1e, 0xad, 0x70, 0xe9, 0x75,
	0x6e, 0x3d, 0xc7, 0x7b, 0xa9, 0xfb, 0x80, 0x4b, 0x73, 0x8e, 0xdc, 0x6c, 0xfd, 0xcf, 0xb0, 0xb3,
	0x01, 0x18, 0x9a, 0x80, 0xb3, 0x24, 0x57, 0x9e, 0x35, 0xb5, 0xe6, 0x83, 0x50, 0x2e, 0xd1, 0x01,
	0x74, 0x2e, 0x71, 0x5e, 0x11, 0xcf, 0x56, 0x9f, 0xb9, 0x53, 0xf7, 0x39, 0xc3, 0x7c, 0x69, 0xbc,
	0xa1, 0x56, 0xbc, 0xb0, 0x9f, 0x5b, 0xfe, 0x1e, 0xf4, 0x0c, 0x3a, 0xb4, 0x5b, 0x3b, 0xe5, 0xbd,
	0xd9, 0x46, 0xe4, 0x7f, 0x85, 0xad, 0x16, 0xdb, 0x0d, 0x2d, 0x9f, 0xb6, 0x5b, 0x3e, 0xb8, 0xfd,
	0x8a, 0x9a, 0xdd, 0x4f, 0x60, 0xd4, 0xe4, 0xbe, 0x21, 0x7b, 0xbf, 0x9d, 0x3d, 0xae, 0xb3, 0xb5,
	0xad, 0x99, 0xf5, 0x12, 0xb6, 0x5a, 0xf0, 0x9a, 0x61, 0xae, 0x0e, 0xdb, 0x6d, 0x86, 0x0d, 0x1a,
	0xe6, 0xd9, 0x4f, 0x1b, 0x86, 0x0d, 0x42, 0xe8, 0x3e, 0x00, 0x4e, 0x92, 0xa2, 0xa2, 0x22, 0xca,
	0x52, 0xf3, 0x3d, 0x03, 0x53, 0x39, 0x4e, 0xd1, 0x11, 0x8c, 0x08, 0x55, 0xb3, 0xaa, 0x47, 0xc2,
	0xfe, 0xeb, 0x48, 0x0c, 0x8d, 0xde, 0xcc, 0xc3, 0x38, 0x29, 0xe8, 0x79, 0xc6, 0x56, 0x24, 0xfd,
	0xd7, 0x99, 0xda, 0xba, 0x76, 0xa8, 0x88, 0x67, 0x70, 0xb7, 0x64, 0xc5, 0x65, 0xc6, 0xb3, 0x82,
	0xe2, 0x38, 0x27, 0x91, 0x1e, 0xb0, 0x2c, 0xe5, 0x5e, 0x77, 0xea, 0xcc, 0xdd, 0xf0, 0x4e, 0xeb,
	0x67, 0x45, 0xe6, 0x38, 0xe5, 0x68, 0x1f, 0xc6, 0x31, 0xe6, 0x4d, 0x79, 0x4f, 0xc9, 0x47, 0xb2,
	0x5a, 0xab, 0x4e, 0xdc, 0xbe, 0x33, 0x71, 0x4f, 0xdc, 0x7e, 0x67, 0xd2, 0x9d, 0xfd, 0xb0, 0xa0,
	0xa7, 0xd0, 0x54, 0x14, 0x21, 0x70, 0x93, 0x82, 0x0b, 0x33, 0x21, 0x6a, 0x8d, 0x1e, 0x43, 0xcf,
	0xbc, 0xf8, 0xdb, 0x46, 0xae, 0xd6, 0x48, 0xb2, 0x66, 0x29, 0xc9, 0x3a, 0x9a, 0xac, 0xa9, 0x1c,
	0xa7, 0xc8, 0x87, 0x7e, 0xc9, 0xb2, 0x82, 0x65, 0xe2, 0x4a, 0x41, 0xe9, 0x84, 0xd7, 0xfb, 0xd9,
	0x2f, 0x0b, 0xba, 0xfa, 0xde, 0xd1, 0x21, 0x8c, 0x58, 0x45, 0x69, 0x46, 0x2f, 0x22, 0x81, 0xf9,
	0xd2, 0x74, 0xde, 0x6e, 0x75, 0xae, 0x68, 0x38, 0x34, 0x22, 0xb9, 0xdf, 0x40, 0xdd, 0xf9, 0x5f,
	0xea, 0xf7, 0xea, 0x87, 0x2c, 0xc1, 0xb9, 0x0a, 0x9c, 0x7e, 0xa2, 0x1a, 0x9a, 0x35, 0xb1, 0x63,
	0xfd, 0x1f, 0xfa, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0xd3, 0x3e, 0x85, 0x77, 0x05,
	0x00, 0x00,
}
