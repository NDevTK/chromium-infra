// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/cros/lab_inventory/api/v1/service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	device "go.chromium.org/chromiumos/infra/proto/go/device"
	lab "go.chromium.org/chromiumos/infra/proto/go/lab"
	manufacturing "go.chromium.org/chromiumos/infra/proto/go/manufacturing"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceOpResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceOpResult) Reset()         { *m = DeviceOpResult{} }
func (m *DeviceOpResult) String() string { return proto.CompactTextString(m) }
func (*DeviceOpResult) ProtoMessage()    {}
func (*DeviceOpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{0}
}

func (m *DeviceOpResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceOpResult.Unmarshal(m, b)
}
func (m *DeviceOpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceOpResult.Marshal(b, m, deterministic)
}
func (m *DeviceOpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOpResult.Merge(m, src)
}
func (m *DeviceOpResult) XXX_Size() int {
	return xxx_messageInfo_DeviceOpResult.Size(m)
}
func (m *DeviceOpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOpResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOpResult proto.InternalMessageInfo

func (m *DeviceOpResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceOpResult) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DeviceOpResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type DeviceID struct {
	// Types that are valid to be assigned to Id:
	//	*DeviceID_Hostname
	//	*DeviceID_ChromeosDeviceId
	Id                   isDeviceID_Id `protobuf_oneof:"id"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeviceID) Reset()         { *m = DeviceID{} }
func (m *DeviceID) String() string { return proto.CompactTextString(m) }
func (*DeviceID) ProtoMessage()    {}
func (*DeviceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{1}
}

func (m *DeviceID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceID.Unmarshal(m, b)
}
func (m *DeviceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceID.Marshal(b, m, deterministic)
}
func (m *DeviceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceID.Merge(m, src)
}
func (m *DeviceID) XXX_Size() int {
	return xxx_messageInfo_DeviceID.Size(m)
}
func (m *DeviceID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceID.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceID proto.InternalMessageInfo

type isDeviceID_Id interface {
	isDeviceID_Id()
}

type DeviceID_Hostname struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3,oneof"`
}

type DeviceID_ChromeosDeviceId struct {
	ChromeosDeviceId string `protobuf:"bytes,2,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3,oneof"`
}

func (*DeviceID_Hostname) isDeviceID_Id() {}

func (*DeviceID_ChromeosDeviceId) isDeviceID_Id() {}

func (m *DeviceID) GetId() isDeviceID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeviceID) GetHostname() string {
	if x, ok := m.GetId().(*DeviceID_Hostname); ok {
		return x.Hostname
	}
	return ""
}

func (m *DeviceID) GetChromeosDeviceId() string {
	if x, ok := m.GetId().(*DeviceID_ChromeosDeviceId); ok {
		return x.ChromeosDeviceId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeviceID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeviceID_Hostname)(nil),
		(*DeviceID_ChromeosDeviceId)(nil),
	}
}

type AddCrosDevicesRequest struct {
	Devices              []*lab.ChromeOSDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AddCrosDevicesRequest) Reset()         { *m = AddCrosDevicesRequest{} }
func (m *AddCrosDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*AddCrosDevicesRequest) ProtoMessage()    {}
func (*AddCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{2}
}

func (m *AddCrosDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCrosDevicesRequest.Unmarshal(m, b)
}
func (m *AddCrosDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCrosDevicesRequest.Marshal(b, m, deterministic)
}
func (m *AddCrosDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCrosDevicesRequest.Merge(m, src)
}
func (m *AddCrosDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_AddCrosDevicesRequest.Size(m)
}
func (m *AddCrosDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCrosDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCrosDevicesRequest proto.InternalMessageInfo

func (m *AddCrosDevicesRequest) GetDevices() []*lab.ChromeOSDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

type AddCrosDevicesResponse struct {
	PassedDevices        []*DeviceOpResult `protobuf:"bytes,1,rep,name=passed_devices,json=passedDevices,proto3" json:"passed_devices,omitempty"`
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddCrosDevicesResponse) Reset()         { *m = AddCrosDevicesResponse{} }
func (m *AddCrosDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*AddCrosDevicesResponse) ProtoMessage()    {}
func (*AddCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{3}
}

func (m *AddCrosDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCrosDevicesResponse.Unmarshal(m, b)
}
func (m *AddCrosDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCrosDevicesResponse.Marshal(b, m, deterministic)
}
func (m *AddCrosDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCrosDevicesResponse.Merge(m, src)
}
func (m *AddCrosDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_AddCrosDevicesResponse.Size(m)
}
func (m *AddCrosDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCrosDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCrosDevicesResponse proto.InternalMessageInfo

func (m *AddCrosDevicesResponse) GetPassedDevices() []*DeviceOpResult {
	if m != nil {
		return m.PassedDevices
	}
	return nil
}

func (m *AddCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type GetCrosDevicesRequest struct {
	Ids                  []*DeviceID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetCrosDevicesRequest) Reset()         { *m = GetCrosDevicesRequest{} }
func (m *GetCrosDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetCrosDevicesRequest) ProtoMessage()    {}
func (*GetCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{4}
}

func (m *GetCrosDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCrosDevicesRequest.Unmarshal(m, b)
}
func (m *GetCrosDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCrosDevicesRequest.Marshal(b, m, deterministic)
}
func (m *GetCrosDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCrosDevicesRequest.Merge(m, src)
}
func (m *GetCrosDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_GetCrosDevicesRequest.Size(m)
}
func (m *GetCrosDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCrosDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCrosDevicesRequest proto.InternalMessageInfo

func (m *GetCrosDevicesRequest) GetIds() []*DeviceID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type HwidData struct {
	Sku                  string   `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Variant              string   `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HwidData) Reset()         { *m = HwidData{} }
func (m *HwidData) String() string { return proto.CompactTextString(m) }
func (*HwidData) ProtoMessage()    {}
func (*HwidData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{5}
}

func (m *HwidData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HwidData.Unmarshal(m, b)
}
func (m *HwidData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HwidData.Marshal(b, m, deterministic)
}
func (m *HwidData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HwidData.Merge(m, src)
}
func (m *HwidData) XXX_Size() int {
	return xxx_messageInfo_HwidData.Size(m)
}
func (m *HwidData) XXX_DiscardUnknown() {
	xxx_messageInfo_HwidData.DiscardUnknown(m)
}

var xxx_messageInfo_HwidData proto.InternalMessageInfo

func (m *HwidData) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *HwidData) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

type ExtendedDeviceData struct {
	LabConfig            *lab.ChromeOSDevice   `protobuf:"bytes,1,opt,name=lab_config,json=labConfig,proto3" json:"lab_config,omitempty"`
	DeviceConfig         *device.Config        `protobuf:"bytes,2,opt,name=device_config,json=deviceConfig,proto3" json:"device_config,omitempty"`
	ManufacturingConfig  *manufacturing.Config `protobuf:"bytes,3,opt,name=manufacturing_config,json=manufacturingConfig,proto3" json:"manufacturing_config,omitempty"`
	HwidData             *HwidData             `protobuf:"bytes,4,opt,name=hwid_data,json=hwidData,proto3" json:"hwid_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExtendedDeviceData) Reset()         { *m = ExtendedDeviceData{} }
func (m *ExtendedDeviceData) String() string { return proto.CompactTextString(m) }
func (*ExtendedDeviceData) ProtoMessage()    {}
func (*ExtendedDeviceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{6}
}

func (m *ExtendedDeviceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendedDeviceData.Unmarshal(m, b)
}
func (m *ExtendedDeviceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendedDeviceData.Marshal(b, m, deterministic)
}
func (m *ExtendedDeviceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedDeviceData.Merge(m, src)
}
func (m *ExtendedDeviceData) XXX_Size() int {
	return xxx_messageInfo_ExtendedDeviceData.Size(m)
}
func (m *ExtendedDeviceData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedDeviceData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedDeviceData proto.InternalMessageInfo

func (m *ExtendedDeviceData) GetLabConfig() *lab.ChromeOSDevice {
	if m != nil {
		return m.LabConfig
	}
	return nil
}

func (m *ExtendedDeviceData) GetDeviceConfig() *device.Config {
	if m != nil {
		return m.DeviceConfig
	}
	return nil
}

func (m *ExtendedDeviceData) GetManufacturingConfig() *manufacturing.Config {
	if m != nil {
		return m.ManufacturingConfig
	}
	return nil
}

func (m *ExtendedDeviceData) GetHwidData() *HwidData {
	if m != nil {
		return m.HwidData
	}
	return nil
}

type GetCrosDevicesResponse struct {
	Data                 []*ExtendedDeviceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	FailedDevices        []*DeviceOpResult     `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetCrosDevicesResponse) Reset()         { *m = GetCrosDevicesResponse{} }
func (m *GetCrosDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*GetCrosDevicesResponse) ProtoMessage()    {}
func (*GetCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{7}
}

func (m *GetCrosDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCrosDevicesResponse.Unmarshal(m, b)
}
func (m *GetCrosDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCrosDevicesResponse.Marshal(b, m, deterministic)
}
func (m *GetCrosDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCrosDevicesResponse.Merge(m, src)
}
func (m *GetCrosDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_GetCrosDevicesResponse.Size(m)
}
func (m *GetCrosDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCrosDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCrosDevicesResponse proto.InternalMessageInfo

func (m *GetCrosDevicesResponse) GetData() []*ExtendedDeviceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type UpdateDutsStatusRequest struct {
	States               []*lab.DutState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	Reason               string          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateDutsStatusRequest) Reset()         { *m = UpdateDutsStatusRequest{} }
func (m *UpdateDutsStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDutsStatusRequest) ProtoMessage()    {}
func (*UpdateDutsStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{8}
}

func (m *UpdateDutsStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDutsStatusRequest.Unmarshal(m, b)
}
func (m *UpdateDutsStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDutsStatusRequest.Marshal(b, m, deterministic)
}
func (m *UpdateDutsStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDutsStatusRequest.Merge(m, src)
}
func (m *UpdateDutsStatusRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDutsStatusRequest.Size(m)
}
func (m *UpdateDutsStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDutsStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDutsStatusRequest proto.InternalMessageInfo

func (m *UpdateDutsStatusRequest) GetStates() []*lab.DutState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *UpdateDutsStatusRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateDutsStatusResponse struct {
	UpdatedDevices       []*DeviceOpResult `protobuf:"bytes,1,rep,name=updated_devices,json=updatedDevices,proto3" json:"updated_devices,omitempty"`
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateDutsStatusResponse) Reset()         { *m = UpdateDutsStatusResponse{} }
func (m *UpdateDutsStatusResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDutsStatusResponse) ProtoMessage()    {}
func (*UpdateDutsStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{9}
}

func (m *UpdateDutsStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDutsStatusResponse.Unmarshal(m, b)
}
func (m *UpdateDutsStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDutsStatusResponse.Marshal(b, m, deterministic)
}
func (m *UpdateDutsStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDutsStatusResponse.Merge(m, src)
}
func (m *UpdateDutsStatusResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateDutsStatusResponse.Size(m)
}
func (m *UpdateDutsStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDutsStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDutsStatusResponse proto.InternalMessageInfo

func (m *UpdateDutsStatusResponse) GetUpdatedDevices() []*DeviceOpResult {
	if m != nil {
		return m.UpdatedDevices
	}
	return nil
}

func (m *UpdateDutsStatusResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type UpdateCrosDevicesSetupRequest struct {
	Devices              []*lab.ChromeOSDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	Reason               string                `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateCrosDevicesSetupRequest) Reset()         { *m = UpdateCrosDevicesSetupRequest{} }
func (m *UpdateCrosDevicesSetupRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCrosDevicesSetupRequest) ProtoMessage()    {}
func (*UpdateCrosDevicesSetupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{10}
}

func (m *UpdateCrosDevicesSetupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCrosDevicesSetupRequest.Unmarshal(m, b)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCrosDevicesSetupRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrosDevicesSetupRequest.Merge(m, src)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCrosDevicesSetupRequest.Size(m)
}
func (m *UpdateCrosDevicesSetupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrosDevicesSetupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrosDevicesSetupRequest proto.InternalMessageInfo

func (m *UpdateCrosDevicesSetupRequest) GetDevices() []*lab.ChromeOSDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *UpdateCrosDevicesSetupRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateCrosDevicesSetupResponse struct {
	UpdatedDevices       []*DeviceOpResult `protobuf:"bytes,1,rep,name=updated_devices,json=updatedDevices,proto3" json:"updated_devices,omitempty"`
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateCrosDevicesSetupResponse) Reset()         { *m = UpdateCrosDevicesSetupResponse{} }
func (m *UpdateCrosDevicesSetupResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCrosDevicesSetupResponse) ProtoMessage()    {}
func (*UpdateCrosDevicesSetupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{11}
}

func (m *UpdateCrosDevicesSetupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCrosDevicesSetupResponse.Unmarshal(m, b)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCrosDevicesSetupResponse.Marshal(b, m, deterministic)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrosDevicesSetupResponse.Merge(m, src)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateCrosDevicesSetupResponse.Size(m)
}
func (m *UpdateCrosDevicesSetupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrosDevicesSetupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrosDevicesSetupResponse proto.InternalMessageInfo

func (m *UpdateCrosDevicesSetupResponse) GetUpdatedDevices() []*DeviceOpResult {
	if m != nil {
		return m.UpdatedDevices
	}
	return nil
}

func (m *UpdateCrosDevicesSetupResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

type DeleteCrosDevicesRequest struct {
	Ids                  []*DeviceID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeleteCrosDevicesRequest) Reset()         { *m = DeleteCrosDevicesRequest{} }
func (m *DeleteCrosDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCrosDevicesRequest) ProtoMessage()    {}
func (*DeleteCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{12}
}

func (m *DeleteCrosDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCrosDevicesRequest.Unmarshal(m, b)
}
func (m *DeleteCrosDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCrosDevicesRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCrosDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCrosDevicesRequest.Merge(m, src)
}
func (m *DeleteCrosDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCrosDevicesRequest.Size(m)
}
func (m *DeleteCrosDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCrosDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCrosDevicesRequest proto.InternalMessageInfo

func (m *DeleteCrosDevicesRequest) GetIds() []*DeviceID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DeleteCrosDevicesResponse struct {
	RemovedDevices []*DeviceOpResult `protobuf:"bytes,1,rep,name=removed_devices,json=removedDevices,proto3" json:"removed_devices,omitempty"`
	// Devices cannot be removed for any reason.
	FailedDevices        []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteCrosDevicesResponse) Reset()         { *m = DeleteCrosDevicesResponse{} }
func (m *DeleteCrosDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCrosDevicesResponse) ProtoMessage()    {}
func (*DeleteCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014c8d2ea65f9050, []int{13}
}

func (m *DeleteCrosDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCrosDevicesResponse.Unmarshal(m, b)
}
func (m *DeleteCrosDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCrosDevicesResponse.Marshal(b, m, deterministic)
}
func (m *DeleteCrosDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCrosDevicesResponse.Merge(m, src)
}
func (m *DeleteCrosDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteCrosDevicesResponse.Size(m)
}
func (m *DeleteCrosDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCrosDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCrosDevicesResponse proto.InternalMessageInfo

func (m *DeleteCrosDevicesResponse) GetRemovedDevices() []*DeviceOpResult {
	if m != nil {
		return m.RemovedDevices
	}
	return nil
}

func (m *DeleteCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if m != nil {
		return m.FailedDevices
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceOpResult)(nil), "inventory.DeviceOpResult")
	proto.RegisterType((*DeviceID)(nil), "inventory.DeviceID")
	proto.RegisterType((*AddCrosDevicesRequest)(nil), "inventory.AddCrosDevicesRequest")
	proto.RegisterType((*AddCrosDevicesResponse)(nil), "inventory.AddCrosDevicesResponse")
	proto.RegisterType((*GetCrosDevicesRequest)(nil), "inventory.GetCrosDevicesRequest")
	proto.RegisterType((*HwidData)(nil), "inventory.HwidData")
	proto.RegisterType((*ExtendedDeviceData)(nil), "inventory.ExtendedDeviceData")
	proto.RegisterType((*GetCrosDevicesResponse)(nil), "inventory.GetCrosDevicesResponse")
	proto.RegisterType((*UpdateDutsStatusRequest)(nil), "inventory.UpdateDutsStatusRequest")
	proto.RegisterType((*UpdateDutsStatusResponse)(nil), "inventory.UpdateDutsStatusResponse")
	proto.RegisterType((*UpdateCrosDevicesSetupRequest)(nil), "inventory.UpdateCrosDevicesSetupRequest")
	proto.RegisterType((*UpdateCrosDevicesSetupResponse)(nil), "inventory.UpdateCrosDevicesSetupResponse")
	proto.RegisterType((*DeleteCrosDevicesRequest)(nil), "inventory.DeleteCrosDevicesRequest")
	proto.RegisterType((*DeleteCrosDevicesResponse)(nil), "inventory.DeleteCrosDevicesResponse")
}

func init() {
	proto.RegisterFile("infra/appengine/cros/lab_inventory/api/v1/service.proto", fileDescriptor_014c8d2ea65f9050)
}

var fileDescriptor_014c8d2ea65f9050 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4d, 0x6f, 0x13, 0x39,
	0x18, 0xc7, 0x3b, 0x49, 0xb7, 0x4d, 0x9e, 0xdd, 0x66, 0xbb, 0xee, 0x36, 0x3b, 0xcd, 0x52, 0x54,
	0xa6, 0x20, 0x95, 0x03, 0x33, 0xb4, 0x95, 0xe0, 0x80, 0x54, 0xd1, 0x36, 0x85, 0xf4, 0x80, 0x2a,
	0x4d, 0x55, 0x89, 0x17, 0xa9, 0x91, 0x93, 0x71, 0x12, 0x8b, 0x64, 0x3c, 0xd8, 0x9e, 0x14, 0x3e,
	0x04, 0xdf, 0x80, 0x03, 0x5c, 0xf8, 0x66, 0x7c, 0x08, 0x6e, 0x28, 0xb6, 0xa7, 0x99, 0xc9, 0x4b,
	0x21, 0x55, 0x0f, 0xdc, 0xc6, 0x7e, 0x9e, 0xff, 0xcf, 0x7e, 0xde, 0x9c, 0xc0, 0x63, 0x1a, 0xb6,
	0x38, 0xf6, 0x70, 0x14, 0x91, 0xb0, 0x4d, 0x43, 0xe2, 0x35, 0x39, 0x13, 0x5e, 0x17, 0x37, 0xea,
	0x34, 0xec, 0x93, 0x50, 0x32, 0xfe, 0xc1, 0xc3, 0x11, 0xf5, 0xfa, 0xdb, 0x9e, 0x20, 0xbc, 0x4f,
	0x9b, 0xc4, 0x8d, 0x38, 0x93, 0x0c, 0x15, 0x2f, 0xed, 0x95, 0x27, 0x6d, 0xe6, 0x36, 0x3b, 0x9c,
	0xf5, 0x68, 0xdc, 0x73, 0x19, 0x6f, 0x7b, 0xc9, 0x82, 0x09, 0x4f, 0xe3, 0x95, 0xc4, 0x13, 0xbc,
	0x39, 0x20, 0x7b, 0x01, 0x19, 0x72, 0x2a, 0x7b, 0xb3, 0x8a, 0x63, 0x59, 0x17, 0x12, 0xcb, 0xeb,
	0xe8, 0xf5, 0xc1, 0x5e, 0x93, 0x85, 0x2d, 0xda, 0x36, 0xfa, 0xa3, 0x19, 0xf4, 0x3d, 0x1c, 0xc6,
	0x2d, 0xdc, 0x94, 0x31, 0xa7, 0x61, 0x3b, 0x83, 0x71, 0x5e, 0x41, 0xa9, 0xaa, 0xe8, 0x27, 0x91,
	0x4f, 0x44, 0xdc, 0x95, 0xa8, 0x04, 0x39, 0x1a, 0xd8, 0xd6, 0x86, 0xb5, 0x55, 0xf4, 0x73, 0x34,
	0x40, 0x15, 0x28, 0x74, 0x98, 0x90, 0x21, 0xee, 0x11, 0x3b, 0xa7, 0x76, 0x2f, 0xd7, 0xe8, 0x7f,
	0x28, 0x12, 0xce, 0x19, 0xaf, 0xf7, 0x44, 0xdb, 0xce, 0x6b, 0xa3, 0xda, 0x78, 0x21, 0xda, 0xce,
	0x39, 0x14, 0x34, 0xfa, 0xb8, 0x8a, 0x6e, 0xa5, 0x20, 0x0a, 0x5d, 0x9b, 0x4b, 0x61, 0x5c, 0x40,
	0xea, 0xf6, 0x84, 0x89, 0xba, 0x8e, 0xb5, 0x4e, 0x03, 0x7d, 0x58, 0x6d, 0xce, 0x5f, 0x4e, 0x6c,
	0x86, 0x16, 0x1c, 0xcc, 0x0f, 0xae, 0xe8, 0x3c, 0x83, 0xd5, 0xfd, 0x20, 0x38, 0xe4, 0x89, 0x41,
	0xf8, 0xe4, 0x5d, 0x4c, 0x84, 0x44, 0x0f, 0x60, 0x51, 0x53, 0x84, 0x6d, 0x6d, 0xe4, 0xb7, 0xfe,
	0xdc, 0x59, 0x71, 0xbb, 0xb8, 0xe1, 0x1e, 0x2a, 0xcc, 0xc9, 0xa9, 0xf6, 0xf6, 0x13, 0x1f, 0xe7,
	0x93, 0x05, 0xe5, 0x51, 0x90, 0x88, 0x58, 0x28, 0x08, 0x7a, 0x0a, 0xa5, 0x08, 0x0b, 0x41, 0x82,
	0x7a, 0x16, 0xb8, 0xe6, 0x5e, 0x76, 0x91, 0x9b, 0x4d, 0x9f, 0xbf, 0xa4, 0x05, 0x86, 0x34, 0x20,
	0xb4, 0x30, 0xed, 0xa6, 0x08, 0xb9, 0x9f, 0x12, 0xb4, 0xc0, 0x10, 0x9c, 0x3d, 0x58, 0x7d, 0x4e,
	0xe4, 0x84, 0x30, 0xef, 0x41, 0x9e, 0x06, 0xc3, 0x10, 0x47, 0x79, 0xc7, 0x55, 0x7f, 0x60, 0x77,
	0x1e, 0x41, 0xa1, 0x76, 0x41, 0x83, 0x2a, 0x96, 0x18, 0x2d, 0x43, 0x5e, 0xbc, 0x8d, 0x4d, 0x71,
	0x07, 0x9f, 0xc8, 0x86, 0xc5, 0x3e, 0xe6, 0x14, 0x87, 0xd2, 0x14, 0x37, 0x59, 0x3a, 0xdf, 0x2d,
	0x40, 0x47, 0xef, 0x25, 0x09, 0x83, 0xe4, 0x2e, 0x0a, 0xb1, 0x03, 0x30, 0x98, 0x32, 0xdd, 0x44,
	0x8a, 0x34, 0x25, 0xbf, 0xc5, 0x2e, 0x6e, 0x1c, 0x2a, 0x2f, 0xb4, 0x0b, 0x4b, 0xa6, 0xac, 0x46,
	0x96, 0x53, 0xb2, 0x92, 0x6b, 0x26, 0x4a, 0xbb, 0xf9, 0x7f, 0xe9, 0xa5, 0x11, 0xd5, 0xe0, 0xdf,
	0x4c, 0xdf, 0x26, 0xda, 0xbc, 0xd2, 0xae, 0xba, 0x19, 0x63, 0x82, 0x58, 0xc9, 0xec, 0x1a, 0xd2,
	0x43, 0x28, 0x76, 0x2e, 0x68, 0x50, 0x0f, 0xb0, 0xc4, 0xf6, 0xbc, 0xb9, 0xf1, 0x30, 0x5d, 0x49,
	0x76, 0xfc, 0x42, 0xc7, 0x7c, 0x39, 0x1f, 0x2d, 0x28, 0x8f, 0x26, 0xdd, 0xb4, 0xc4, 0x36, 0xcc,
	0x2b, 0x8e, 0x4e, 0xfb, 0x7a, 0x8a, 0x33, 0x9e, 0x2c, 0x5f, 0xb9, 0xde, 0x40, 0x0f, 0xbc, 0x84,
	0xff, 0xce, 0xa2, 0x00, 0x4b, 0x52, 0x8d, 0xa5, 0x38, 0x95, 0x58, 0xc6, 0xa9, 0x2e, 0x58, 0x50,
	0xcf, 0x4a, 0xd2, 0x08, 0x4b, 0xaa, 0x16, 0xd5, 0x58, 0x0e, 0xdc, 0x88, 0x6f, 0x8c, 0xa8, 0x0c,
	0x0b, 0x9c, 0x60, 0xc1, 0x42, 0x53, 0x66, 0xb3, 0x72, 0x3e, 0x5b, 0x60, 0x8f, 0xa3, 0x4d, 0xac,
	0x07, 0xf0, 0x77, 0xac, 0x6c, 0x33, 0xf4, 0x7f, 0xc9, 0x28, 0x6e, 0x6e, 0x00, 0x5a, 0xb0, 0xae,
	0x6f, 0x98, 0x2a, 0xc7, 0x29, 0x91, 0x71, 0x74, 0xbd, 0x79, 0x9f, 0x9a, 0x8a, 0xaf, 0x16, 0xdc,
	0x9e, 0x76, 0xd0, 0x6f, 0x95, 0x90, 0x7d, 0xb0, 0xab, 0xa4, 0x4b, 0x32, 0xf7, 0x9c, 0xf1, 0x51,
	0xf8, 0x62, 0xc1, 0xda, 0x04, 0xc6, 0x30, 0x4c, 0x4e, 0x7a, 0xac, 0x3f, 0x53, 0x98, 0x46, 0x71,
	0x63, 0x61, 0xee, 0x7c, 0xcb, 0x43, 0xf1, 0x38, 0xf1, 0x45, 0x67, 0x50, 0xca, 0x3e, 0xd2, 0x68,
	0x23, 0x45, 0x9a, 0xf8, 0x43, 0x50, 0xb9, 0x73, 0x85, 0x87, 0x09, 0xf5, 0x0c, 0x4a, 0xd9, 0x41,
	0xcf, 0x60, 0x27, 0x3e, 0xbc, 0x19, 0xec, 0x94, 0x57, 0xe2, 0x0d, 0x2c, 0x8f, 0x4e, 0x15, 0x72,
	0x52, 0xb2, 0x29, 0xd3, 0x5c, 0xd9, 0xbc, 0xd2, 0xc7, 0xc0, 0x7b, 0x50, 0x9e, 0xdc, 0xa7, 0x68,
	0x6b, 0x4c, 0x3e, 0x65, 0x66, 0x2a, 0xf7, 0x7f, 0xc1, 0xd3, 0x1c, 0x77, 0x0e, 0xff, 0x8c, 0xb5,
	0x0a, 0xda, 0xcc, 0x94, 0x71, 0x72, 0x33, 0x56, 0xee, 0x5e, 0xed, 0xa4, 0xf9, 0x07, 0x7f, 0xbc,
	0xce, 0xe3, 0x88, 0x36, 0x16, 0xd4, 0x1f, 0x92, 0xdd, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf9,
	0x96, 0x52, 0x83, 0xda, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// AddCrosDevices adds new Chrome OS devices to the inventory.
	AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error)
	// GetCrosDevices retrieves requested Chrome OS devices from the inventory.
	GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error)
	// UpdateDutsStatus updates selected Duts' status labels related to testing.
	UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error)
	// UpdateCrosDevicesSetup updates the selected Chrome OS devices setup data
	// in the inventory.
	UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error)
	// DeleteCrosDevices delete the selelcted devices from the inventory.
	DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error) {
	out := new(AddCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "AddCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error) {
	out := new(GetCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "GetCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error) {
	out := new(UpdateDutsStatusResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateDutsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error) {
	out := new(UpdateCrosDevicesSetupResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateCrosDevicesSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error) {
	out := new(DeleteCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeleteCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error) {
	out := new(AddCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/AddCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error) {
	out := new(GetCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/GetCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error) {
	out := new(UpdateDutsStatusResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateDutsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error) {
	out := new(UpdateCrosDevicesSetupResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateCrosDevicesSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error) {
	out := new(DeleteCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeleteCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// AddCrosDevices adds new Chrome OS devices to the inventory.
	AddCrosDevices(context.Context, *AddCrosDevicesRequest) (*AddCrosDevicesResponse, error)
	// GetCrosDevices retrieves requested Chrome OS devices from the inventory.
	GetCrosDevices(context.Context, *GetCrosDevicesRequest) (*GetCrosDevicesResponse, error)
	// UpdateDutsStatus updates selected Duts' status labels related to testing.
	UpdateDutsStatus(context.Context, *UpdateDutsStatusRequest) (*UpdateDutsStatusResponse, error)
	// UpdateCrosDevicesSetup updates the selected Chrome OS devices setup data
	// in the inventory.
	UpdateCrosDevicesSetup(context.Context, *UpdateCrosDevicesSetupRequest) (*UpdateCrosDevicesSetupResponse, error)
	// DeleteCrosDevices delete the selelcted devices from the inventory.
	DeleteCrosDevices(context.Context, *DeleteCrosDevicesRequest) (*DeleteCrosDevicesResponse, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) AddCrosDevices(ctx context.Context, req *AddCrosDevicesRequest) (*AddCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) GetCrosDevices(ctx context.Context, req *GetCrosDevicesRequest) (*GetCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) UpdateDutsStatus(ctx context.Context, req *UpdateDutsStatusRequest) (*UpdateDutsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDutsStatus not implemented")
}
func (*UnimplementedInventoryServer) UpdateCrosDevicesSetup(ctx context.Context, req *UpdateCrosDevicesSetupRequest) (*UpdateCrosDevicesSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrosDevicesSetup not implemented")
}
func (*UnimplementedInventoryServer) DeleteCrosDevices(ctx context.Context, req *DeleteCrosDevicesRequest) (*DeleteCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrosDevices not implemented")
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_AddCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/AddCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddCrosDevices(ctx, req.(*AddCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/GetCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetCrosDevices(ctx, req.(*GetCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDutsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDutsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDutsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateDutsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDutsStatus(ctx, req.(*UpdateDutsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateCrosDevicesSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrosDevicesSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateCrosDevicesSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateCrosDevicesSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateCrosDevicesSetup(ctx, req.(*UpdateCrosDevicesSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeleteCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteCrosDevices(ctx, req.(*DeleteCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCrosDevices",
			Handler:    _Inventory_AddCrosDevices_Handler,
		},
		{
			MethodName: "GetCrosDevices",
			Handler:    _Inventory_GetCrosDevices_Handler,
		},
		{
			MethodName: "UpdateDutsStatus",
			Handler:    _Inventory_UpdateDutsStatus_Handler,
		},
		{
			MethodName: "UpdateCrosDevicesSetup",
			Handler:    _Inventory_UpdateCrosDevicesSetup_Handler,
		},
		{
			MethodName: "DeleteCrosDevices",
			Handler:    _Inventory_DeleteCrosDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/cros/lab_inventory/api/v1/service.proto",
}
