// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/qscheduler/qslib/reconciler/reconciler.proto

package reconciler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskUpdate_Type int32

const (
	// Invalid update type.
	TaskUpdate_NULL TaskUpdate_Type = 0
	// A new task has been enqueued.
	TaskUpdate_NEW TaskUpdate_Type = 1
	// A task has been assigned to a worker.
	TaskUpdate_ASSIGNED TaskUpdate_Type = 2
	// A task that was previously assigned to a worker has been interrupted and
	// reenqueued.
	TaskUpdate_INTERRUPTED TaskUpdate_Type = 3
)

var TaskUpdate_Type_name = map[int32]string{
	0: "NULL",
	1: "NEW",
	2: "ASSIGNED",
	3: "INTERRUPTED",
}

var TaskUpdate_Type_value = map[string]int32{
	"NULL":        0,
	"NEW":         1,
	"ASSIGNED":    2,
	"INTERRUPTED": 3,
}

func (x TaskUpdate_Type) String() string {
	return proto.EnumName(TaskUpdate_Type_name, int32(x))
}

func (TaskUpdate_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0, 0}
}

// TaskUpdate represents a change in the state of an existing task, or the
// creation of a new task.
type TaskUpdate struct {
	// Time is the time at which this Update occurred.
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Type describes which kind of update this represents.
	Type TaskUpdate_Type `protobuf:"varint,2,opt,name=type,proto3,enum=reconciler.TaskUpdate_Type" json:"type,omitempty"`
	// RequestId is the id of the request that is being created or updated.
	// This is supplied by the scheduler client -- for swarming this would
	// be the swarming task id.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// WorkerId is the worker that the request is:
	// - case NEW:         <invalid> TODO(akeshet): error out if this is supplied
	// - case ASSIGNED:    starting to run on.
	// - case INTERRUPTED: previously running on.
	WorkerId string `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// ProvisionableLabels is the label set for the new task.
	// This field is only relevant and should only be set for NEW type updates.
	ProvisionableLabels []string `protobuf:"bytes,5,rep,name=provisionable_labels,json=provisionableLabels,proto3" json:"provisionable_labels,omitempty"`
	// AccountId is the id of the quota account that should be charged
	// for the new task. This field is only relevant and should only be set
	// for NEW type updates.
	AccountId string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// EnqueueTime is the time at which a request was first enqueued. This field
	// is only relevant for NEW type updates.
	EnqueueTime          *timestamp.Timestamp `protobuf:"bytes,7,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TaskUpdate) Reset()         { *m = TaskUpdate{} }
func (m *TaskUpdate) String() string { return proto.CompactTextString(m) }
func (*TaskUpdate) ProtoMessage()    {}
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0}
}

func (m *TaskUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskUpdate.Unmarshal(m, b)
}
func (m *TaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskUpdate.Marshal(b, m, deterministic)
}
func (m *TaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdate.Merge(m, src)
}
func (m *TaskUpdate) XXX_Size() int {
	return xxx_messageInfo_TaskUpdate.Size(m)
}
func (m *TaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdate proto.InternalMessageInfo

func (m *TaskUpdate) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TaskUpdate) GetType() TaskUpdate_Type {
	if m != nil {
		return m.Type
	}
	return TaskUpdate_NULL
}

func (m *TaskUpdate) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TaskUpdate) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *TaskUpdate) GetProvisionableLabels() []string {
	if m != nil {
		return m.ProvisionableLabels
	}
	return nil
}

func (m *TaskUpdate) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *TaskUpdate) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("reconciler.TaskUpdate_Type", TaskUpdate_Type_name, TaskUpdate_Type_value)
	proto.RegisterType((*TaskUpdate)(nil), "reconciler.TaskUpdate")
}

func init() {
	proto.RegisterFile("infra/qscheduler/qslib/reconciler/reconciler.proto", fileDescriptor_320df42c60a35510)
}

var fileDescriptor_320df42c60a35510 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0x4f, 0x6f, 0xaa, 0x40,
	0x14, 0xc5, 0x1f, 0xc2, 0x53, 0xb9, 0x9a, 0xf7, 0xc8, 0xb4, 0x0b, 0xa2, 0x69, 0x4a, 0x5c, 0xb1,
	0x82, 0xd4, 0x6e, 0xba, 0xe9, 0xa2, 0x89, 0xa4, 0x21, 0x31, 0xa4, 0x41, 0x4c, 0x97, 0x86, 0x3f,
	0x57, 0x3b, 0x11, 0x19, 0x98, 0x81, 0x36, 0x7e, 0xef, 0x7e, 0x80, 0x86, 0x41, 0x63, 0xbb, 0xea,
	0x6e, 0xf2, 0x3b, 0xe7, 0xdc, 0x33, 0x07, 0xe6, 0xb4, 0xd8, 0xf2, 0xd8, 0xad, 0x44, 0xfa, 0x86,
	0x59, 0x93, 0x23, 0x77, 0x2b, 0x91, 0xd3, 0xc4, 0xe5, 0x98, 0xb2, 0x22, 0xa5, 0x2d, 0xb8, 0x3c,
	0x9d, 0x92, 0xb3, 0x9a, 0x11, 0xb8, 0x90, 0xc9, 0xed, 0x8e, 0xb1, 0x5d, 0x8e, 0xae, 0x54, 0x92,
	0x66, 0xeb, 0xd6, 0xf4, 0x80, 0xa2, 0x8e, 0x0f, 0x65, 0x67, 0x9e, 0x7d, 0xf6, 0x00, 0xa2, 0x58,
	0xec, 0xd7, 0x65, 0x16, 0xd7, 0x48, 0x1c, 0xd0, 0x5a, 0x87, 0xa9, 0x58, 0x8a, 0x3d, 0x9a, 0x4f,
	0x9c, 0x2e, 0xee, 0x9c, 0xe3, 0x4e, 0x74, 0x8e, 0x87, 0xd2, 0x47, 0x5c, 0xd0, 0xea, 0x63, 0x89,
	0x66, 0xcf, 0x52, 0xec, 0x7f, 0xf3, 0xa9, 0xf3, 0xed, 0x33, 0x97, 0xab, 0x4e, 0x74, 0x2c, 0x31,
	0x94, 0x46, 0x72, 0x03, 0xc0, 0xb1, 0x6a, 0x50, 0xd4, 0x1b, 0x9a, 0x99, 0xaa, 0xa5, 0xd8, 0x7a,
	0xa8, 0x9f, 0x88, 0x9f, 0x91, 0x29, 0xe8, 0x1f, 0x8c, 0xef, 0x91, 0xb7, 0xaa, 0x26, 0xd5, 0x61,
	0x07, 0xfc, 0x8c, 0xdc, 0xc1, 0x75, 0xc9, 0xd9, 0x3b, 0x15, 0x94, 0x15, 0x71, 0x92, 0xe3, 0x26,
	0x8f, 0x13, 0xcc, 0x85, 0xf9, 0xd7, 0x52, 0x6d, 0x3d, 0xbc, 0xfa, 0xa1, 0x2d, 0xa5, 0xd4, 0xd6,
	0xc5, 0x69, 0xca, 0x9a, 0x42, 0xd6, 0xf5, 0xbb, 0xba, 0x13, 0xf1, 0x33, 0xf2, 0x08, 0x63, 0x2c,
	0xaa, 0x06, 0x1b, 0xdc, 0xc8, 0xd9, 0x83, 0x5f, 0x67, 0x8f, 0x4e, 0xfe, 0x96, 0xcc, 0x1e, 0x40,
	0x6b, 0xa7, 0x91, 0x21, 0x68, 0xc1, 0x7a, 0xb9, 0x34, 0xfe, 0x90, 0x01, 0xa8, 0x81, 0xf7, 0x6a,
	0x28, 0x64, 0x0c, 0xc3, 0xa7, 0xd5, 0xca, 0x7f, 0x0e, 0xbc, 0x85, 0xd1, 0x23, 0xff, 0x61, 0xe4,
	0x07, 0x91, 0x17, 0x86, 0xeb, 0x97, 0xc8, 0x5b, 0x18, 0x6a, 0xd2, 0x97, 0xa7, 0xef, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x43, 0xff, 0xf3, 0x84, 0xe0, 0x01, 0x00, 0x00,
}
