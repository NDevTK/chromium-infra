// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tricium;

import "infra/tricium/api/v1/data.proto";
import "infra/tricium/api/v1/function.proto";
import "infra/tricium/api/v1/platform.proto";

// Tricium service configuration.
//
// Listing supported platforms and analyzers shared between projects connected
// to Tricium.
message ServiceConfig {
  // Supported platforms.
  repeated Platform.Details platforms = 1;

  // Supported data types.
  repeated Data.TypeDetails data_details = 2;

  // List of shared functions.
  repeated Function functions = 3;

  // Details for connected projects.
  repeated ProjectDetails projects = 4;

  // Base recipe command used for workers implemented as recipes.
  //
  // Specific recipe details for the worker will be added as flags at the
  // end of the argument list.
  Cmd recipe_cmd = 5;

  // Base recipe packages used for workers implemented as recipes.
  //
  // These packages will be adjusted for the platform in question, by appending
  // platform name details to the end of the package name.
  repeated CipdPackage recipe_packages = 6;

  // Swarming server to use for this service instance.
  //
  // This should be a full URL with no trailing slash.
  string swarming_server = 7;

  // Isolate server to use for this service instance.
  //
  // This should be a full URL with no trailing slash.
  string isolate_server = 8;
}

message ProjectDetails {
  // Project name used to map these project details to the config for a project.
  string name = 1;

  // General service account for this project.
  // Used for any service interaction, with the exception of swarming.
  string service_account = 2;

  // Project-specific swarming service account.
  string swarming_service_account = 3;

  // Details of the repository connected to the project. This should be the
  // repository hosting the files that should be analyzed for this project.
  RepoDetails repo_details = 4;

  // Gerrit details for a project.
  //
  // This field should only be included if there is a Gerrit host for a
  // project and that host should be polled for changes and used for
  // reporting of analyzer progress and results.
  GerritDetails gerrit_details = 5;
}

// Tricium project configuration.
//
// Specifies details needed to connect a project to Tricium.
// Adds project-specific functions and selects shared function
// implementations.
message ProjectConfig {
  // Project name,
  string name = 1;

  // Access control rules for the project.
  repeated Acl acls = 2;

  // Project-specific function details.
  //
  // This includes project-specific analyzer implementations and full
  // project-specific analyzer specifications.
  repeated Function functions = 3;

  // Selection of function implementations to run for this project.
  repeated Selection selections = 4;
}

// Repository details for a project.
message RepoDetails {
  // Supported kinds of repositories.
  enum Kind {
    GIT = 0;
  }

  Kind kind = 1;

  // If repository kind is GIT then provide Git details.
  GitRepoDetails git_details = 2;
}

// Git repository details.
message GitRepoDetails {
  // URL to repository.
  string repository = 1;

  // Default ref to use to get files to analyze.
  string ref = 2;
}

// Gerrit details for a project.
message GerritDetails {
  // The Gerrit host to connect to.
  //
  // Value must not include protocol.
  string host = 1;

  // Gerrit project name.
  string project = 2;
}

// Access control rules.
message Acl {
  // Roles relevant to Tricium.
  enum Role {
   // Can read progress/results.
   READER = 0;
   // Can request analysis.
   REQUESTER = 1;
  }

  // Role of a group or identity.
  Role role = 1;

  // Name of group, as defined in the auth service. Specify either group or
  // identity, not both.
  string group = 2;

  // Identity, as defined by the auth service. Can be either an email address
  // or an indentity string, for instance, "anonymous:anonymous" for anonymous
  // users. Specify either group or identity, not both.
  string identity = 3;
}

// Selection of function implementations to run for a project.
message Selection {
  // Name of function to run.
  string function = 1;

  // Name of platform to retrieve results from.
  Platform.Name platform = 2;

  // Function configuration to use on this platform.
  repeated Config configs = 3;
}

// Function configuration used when selecting a function implementation.
message Config {
  // Name of the configuration option.
  string name = 1;

  // Value of the configuration.
  string value = 2;
}
