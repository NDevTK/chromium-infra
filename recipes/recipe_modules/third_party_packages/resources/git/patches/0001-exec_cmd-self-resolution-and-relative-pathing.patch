From 872d2840f7670b6795521f59723bbcd0db753183 Mon Sep 17 00:00:00 2001
From: Dan Jacques <dnj@google.com>
Date: Fri, 9 Jun 2017 08:09:51 -0700
Subject: [PATCH 1/2] exec_cmd: self-resolution and relative pathing.

Enable Git to resolve its own binary location using a variety of
OS-specific and generic methods, including:
- procfs via "/proc/self/exe" (Linux)
- _NSGetExecutablePath (Darwin)
- argv0, if absolute (all, including Windows).

This is used to enable RUNTIME_PREFIX support for non-Windows systems,
notably Linux and Darwin. When configured with RUNTIME_PREFIX, Git will
do a best-effort resolution of its executable path and automatically use
this as its "exec_path" for relative helper and data lookups, unless
explicitly overridden.

Git will also always export and consume its resolved "exec_path" using
the EXEC_PATH_ENVIRONMENT regardless of whether the user has overridden
it, simplifying future lookups and ensuring consistency in Git tooling
execution.

Signed-off-by: Dan Jacques <dnj@google.com>
---
 Makefile         |  14 ++++++-
 common-main.c    |   4 +-
 config.mak.uname |   4 ++
 exec_cmd.c       | 117 ++++++++++++++++++++++++++++++++++++++++++++++++-------
 exec_cmd.h       |   4 +-
 gettext.c        |   3 +-
 git.c            |   2 +-
 7 files changed, 128 insertions(+), 20 deletions(-)

diff --git a/Makefile b/Makefile
index cd7598599..ccfd5d55d 100644
--- a/Makefile
+++ b/Makefile
@@ -462,6 +462,7 @@ ARFLAGS = rcs
 #   mandir
 #   infodir
 #   htmldir
+#   localedir
 # This can help installing the suite in a relocatable way.
 
 prefix = $(HOME)
@@ -485,6 +486,7 @@ pathsep = :
 mandir_relative = $(patsubst $(prefix)/%,%,$(mandir))
 infodir_relative = $(patsubst $(prefix)/%,%,$(infodir))
 htmldir_relative = $(patsubst $(prefix)/%,%,$(htmldir))
+localedir_relative = $(patsubst $(prefix)/%,%,$(localedir))
 
 export prefix bindir sharedir sysconfdir gitwebdir localedir
 
@@ -1632,6 +1634,14 @@ ifdef HAVE_GETDELIM
 	BASIC_CFLAGS += -DHAVE_GETDELIM
 endif
 
+ifdef PROCFS_EXECUTABLE_PATH
+	BASIC_CFLAGS += '-DPROCFS_EXECUTABLE_PATH="$(PROCFS_EXECUTABLE_PATH)"'
+endif
+
+ifdef HAVE_NS_GET_EXECUTABLE_PATH
+	BASIC_CFLAGS += -DHAVE_NS_GET_EXECUTABLE_PATH
+endif
+
 ifeq ($(TCLTK_PATH),)
 NO_TCLTK = NoThanks
 endif
@@ -1714,6 +1724,7 @@ bindir_relative_SQ = $(subst ','\'',$(bindir_relative))
 mandir_relative_SQ = $(subst ','\'',$(mandir_relative))
 infodir_relative_SQ = $(subst ','\'',$(infodir_relative))
 localedir_SQ = $(subst ','\'',$(localedir))
+localedir_relative_SQ = $(subst ','\'',$(localedir_relative))
 gitexecdir_SQ = $(subst ','\'',$(gitexecdir))
 template_dir_SQ = $(subst ','\'',$(template_dir))
 htmldir_relative_SQ = $(subst ','\'',$(htmldir_relative))
@@ -2129,6 +2140,7 @@ endif
 exec_cmd.sp exec_cmd.s exec_cmd.o: GIT-PREFIX
 exec_cmd.sp exec_cmd.s exec_cmd.o: EXTRA_CPPFLAGS = \
 	'-DGIT_EXEC_PATH="$(gitexecdir_SQ)"' \
+	'-DGIT_LOCALE_PATH="$(localedir_relative_SQ)"' \
 	'-DBINDIR="$(bindir_relative_SQ)"' \
 	'-DPREFIX="$(prefix_SQ)"'
 
@@ -2146,7 +2158,7 @@ attr.sp attr.s attr.o: EXTRA_CPPFLAGS = \
 
 gettext.sp gettext.s gettext.o: GIT-PREFIX
 gettext.sp gettext.s gettext.o: EXTRA_CPPFLAGS = \
-	-DGIT_LOCALE_PATH='"$(localedir_SQ)"'
+	-DGIT_LOCALE_PATH='"$(localedir_relative_SQ)"'
 
 http-push.sp http.sp http-walker.sp remote-curl.sp imap-send.sp: SPARSE_FLAGS += \
 	-DCURL_DISABLE_TYPECHECK
diff --git a/common-main.c b/common-main.c
index 6a689007e..6516a1f89 100644
--- a/common-main.c
+++ b/common-main.c
@@ -32,12 +32,12 @@ int main(int argc, const char **argv)
 	 */
 	sanitize_stdfds();
 
+	git_resolve_executable_dir(argv[0]);
+
 	git_setup_gettext();
 
 	attr_start();
 
-	git_extract_argv0_path(argv[0]);
-
 	restore_sigpipe_to_default();
 
 	return cmd_main(argc, argv);
diff --git a/config.mak.uname b/config.mak.uname
index 685a80d13..bd5c326d4 100644
--- a/config.mak.uname
+++ b/config.mak.uname
@@ -37,6 +37,7 @@ ifeq ($(uname_S),Linux)
 	HAVE_GETDELIM = YesPlease
 	SANE_TEXT_GREP=-a
 	FREAD_READS_DIRECTORIES = UnfortunatelyYes
+	PROCFS_EXECUTABLE_PATH = /proc/self/exe
 endif
 ifeq ($(uname_S),GNU/kFreeBSD)
 	HAVE_ALLOCA_H = YesPlease
@@ -111,6 +112,7 @@ ifeq ($(uname_S),Darwin)
 	BASIC_CFLAGS += -DPROTECT_HFS_DEFAULT=1
 	HAVE_BSD_SYSCTL = YesPlease
 	FREAD_READS_DIRECTORIES = UnfortunatelyYes
+	HAVE_NS_GET_EXECUTABLE_PATH = YesPlease
 endif
 ifeq ($(uname_S),SunOS)
 	NEEDS_SOCKET = YesPlease
@@ -218,6 +220,7 @@ ifeq ($(uname_S),OpenBSD)
 	BASIC_LDFLAGS += -L/usr/local/lib
 	HAVE_PATHS_H = YesPlease
 	HAVE_BSD_SYSCTL = YesPlease
+	PROCFS_EXECUTABLE_PATH = /proc/curproc/file
 endif
 ifeq ($(uname_S),MirBSD)
 	NO_STRCASESTR = YesPlease
@@ -236,6 +239,7 @@ ifeq ($(uname_S),NetBSD)
 	USE_ST_TIMESPEC = YesPlease
 	HAVE_PATHS_H = YesPlease
 	HAVE_BSD_SYSCTL = YesPlease
+	PROCFS_EXECUTABLE_PATH = /proc/curproc/exe
 endif
 ifeq ($(uname_S),AIX)
 	DEFAULT_PAGER = more
diff --git a/exec_cmd.c b/exec_cmd.c
index ce192a2d6..f745fcbf9 100644
--- a/exec_cmd.c
+++ b/exec_cmd.c
@@ -4,22 +4,26 @@
 #include "argv-array.h"
 #define MAX_ARGS	32
 
+#if defined(RUNTIME_PREFIX) && defined(HAVE_NS_GET_EXECUTABLE_PATH)
+#include <mach-o/dyld.h>
+#endif
+
 static const char *argv_exec_path;
 
 #ifdef RUNTIME_PREFIX
-static const char *argv0_path;
+static const char *executable_path;
 
 static const char *system_prefix(void)
 {
 	static const char *prefix;
 
-	assert(argv0_path);
-	assert(is_absolute_path(argv0_path));
+	assert(executable_path);
+	assert(is_absolute_path(executable_path));
 
 	if (!prefix &&
-	    !(prefix = strip_path_suffix(argv0_path, GIT_EXEC_PATH)) &&
-	    !(prefix = strip_path_suffix(argv0_path, BINDIR)) &&
-	    !(prefix = strip_path_suffix(argv0_path, "git"))) {
+	    !(prefix = strip_path_suffix(executable_path, GIT_EXEC_PATH)) &&
+	    !(prefix = strip_path_suffix(executable_path, BINDIR)) &&
+	    !(prefix = strip_path_suffix(executable_path, "git"))) {
 		prefix = PREFIX;
 		trace_printf("RUNTIME_PREFIX requested, "
 				"but prefix computation failed.  "
@@ -28,17 +32,102 @@ static const char *system_prefix(void)
 	return prefix;
 }
 
-void git_extract_argv0_path(const char *argv0)
+/* Resolves executable path from argv[0] if it is absolute. */
+static int git_get_exec_path_from_argv0(struct strbuf *buf, const char *argv0)
 {
 	const char *slash;
 
 	if (!argv0 || !*argv0)
-		return;
+		return 1;
 
 	slash = find_last_dir_sep(argv0);
+	if (slash) {
+		trace_printf("Determined executable path from argv0: %s\n", argv0);
+		strbuf_add_absolute_path(buf, argv0);
+		return 0;
+	}
+	return 1;
+}
+
+#ifdef PROCFS_EXECUTABLE_PATH
+/* Resolves executable path by exanining "/proc/self/exe". */
+static int git_get_exec_path_procfs(struct strbuf *buf)
+{
+	char *path = realpath(PROCFS_EXECUTABLE_PATH, NULL);
+
+	if (path) {
+		trace_printf("Determined executable path from procfs: %s\n", path);
+		strbuf_addstr(buf, path);
+		free(path);
+		return 0;
+	}
+	return 1;
+}
+#endif /* PROCFS_EXECUTABLE_PATH */
+
+#ifdef HAVE_NS_GET_EXECUTABLE_PATH
+/* Resolves executable path by querying Mac applicaton stack. */
+static int git_get_exec_path_mac(struct strbuf *buf)
+{
+	char path[PATH_MAX];
+	uint32_t size = sizeof(path);
+	if (!_NSGetExecutablePath(path, &size)) {
+		trace_printf("Determined executable path from Mac: %s\n", path);
+		strbuf_addstr(buf, path);
+		return 0;
+	}
+	return 1;
+}
+#endif /* HAVE_NS_GET_EXECUTABLE_PATH */
+
+/* Resolves the absolute path of the current executable. */
+static char *git_get_exec_path(const char *argv0)
+{
+	struct strbuf buf = STRBUF_INIT;
+
+	if (
+#ifdef PROCFS_EXECUTABLE_PATH
+	    git_get_exec_path_procfs(&buf) &&
+#endif
+#ifdef HAVE_NS_GET_EXECUTABLE_PATH
+	    git_get_exec_path_mac(&buf) &&
+#endif
+	    git_get_exec_path_from_argv0(&buf, argv0))
+		return NULL;
+
+	if (strbuf_normalize_path(&buf)) {
+		trace_printf("Could not normalize path: %s\n", buf.buf);
+		strbuf_release(&buf);
+		return NULL;
+	}
 
-	if (slash)
-		argv0_path = xstrndup(argv0, slash - argv0);
+	return strbuf_detach(&buf, NULL);
+}
+
+void git_resolve_executable_dir(const char *argv0)
+{
+	char *resolved;
+	const char *slash;
+	const char *path;
+
+	if ((path = getenv(EXEC_PATH_ENVIRONMENT)) != NULL) {
+		trace_printf("Determined executable path from ENV: %s\n", path);
+		executable_path = path;
+	} else {
+		resolved = git_get_exec_path(argv0);
+		if (!resolved) {
+			trace_printf("Could not determine executable path from: "
+					"%s\n", argv0);
+			return;
+		}
+
+		slash = find_last_dir_sep(resolved);
+		if (slash)
+			resolved[slash - resolved] = '\0';
+
+		executable_path = resolved;
+	}
+	trace_printf("Determined executable path: %s\n", executable_path);
 }
 
 #else
@@ -48,7 +137,7 @@ static const char *system_prefix(void)
 	return PREFIX;
 }
 
-void git_extract_argv0_path(const char *argv0)
+void git_resolve_executable_dir(const char *argv0)
 {
 }
 
@@ -65,7 +154,7 @@ char *system_path(const char *path)
 	return strbuf_detach(&d, NULL);
 }
 
-void git_set_argv_exec_path(const char *exec_path)
+void git_set_exec_path(const char *exec_path)
 {
 	argv_exec_path = exec_path;
 	/*
@@ -103,10 +192,12 @@ static void add_path(struct strbuf *out, const char *path)
 
 void setup_path(void)
 {
+	const char *exec_path = git_exec_path();
 	const char *old_path = getenv("PATH");
 	struct strbuf new_path = STRBUF_INIT;
 
-	add_path(&new_path, git_exec_path());
+	git_set_exec_path(exec_path);
+	add_path(&new_path, exec_path);
 
 	if (old_path)
 		strbuf_addstr(&new_path, old_path);
diff --git a/exec_cmd.h b/exec_cmd.h
index ff0b48048..2522453cd 100644
--- a/exec_cmd.h
+++ b/exec_cmd.h
@@ -3,8 +3,8 @@
 
 struct argv_array;
 
-extern void git_set_argv_exec_path(const char *exec_path);
-extern void git_extract_argv0_path(const char *path);
+extern void git_set_exec_path(const char *exec_path);
+extern void git_resolve_executable_dir(const char *path);
 extern const char *git_exec_path(void);
 extern void setup_path(void);
 extern const char **prepare_git_cmd(struct argv_array *out, const char **argv);
diff --git a/gettext.c b/gettext.c
index db727ea02..f4c90742c 100644
--- a/gettext.c
+++ b/gettext.c
@@ -3,6 +3,7 @@
  */
 
 #include "git-compat-util.h"
+#include "exec_cmd.h"
 #include "gettext.h"
 #include "strbuf.h"
 #include "utf8.h"
@@ -160,7 +161,7 @@ void git_setup_gettext(void)
 	const char *podir = getenv("GIT_TEXTDOMAINDIR");
 
 	if (!podir)
-		podir = GIT_LOCALE_PATH;
+		podir = system_path(GIT_LOCALE_PATH);
 	bindtextdomain("git", podir);
 	setlocale(LC_MESSAGES, "");
 	setlocale(LC_TIME, "");
diff --git a/git.c b/git.c
index 9e96dd409..dc4cc1419 100644
--- a/git.c
+++ b/git.c
@@ -65,7 +65,7 @@ static int handle_options(const char ***argv, int *argc, int *envchanged)
 		 */
 		if (skip_prefix(cmd, "--exec-path", &cmd)) {
 			if (*cmd == '=')
-				git_set_argv_exec_path(cmd + 1);
+				git_set_exec_path(cmd + 1);
 			else {
 				puts(git_exec_path());
 				exit(0);
-- 
2.14.1.chromium11

