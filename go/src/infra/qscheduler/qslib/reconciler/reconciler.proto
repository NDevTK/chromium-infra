// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package reconciler;

import "google/protobuf/timestamp.proto";

// TaskInstant represents the state of a task at a particular time.
message TaskInstant {

	enum State {
		// Invalid update type, do not use.
		NULL = 0;

		// The task is waiting for a worker.
		WAITING = 1;

		// The task is running on a worker.
		RUNNING = 2;

		// The task is neither waiting for a worker nor running on a worker.
		ABSENT = 3;
	}


	// Time is the time at which the task is in the given state.
	google.protobuf.Timestamp time = 1;

	// State is the state of the task.
	State state = 2;

	// RequestId is the id of the task. This is supplied by the scheduler client,
	// for swarming this would be the swarming task id.
	string request_id = 3;

	// WorkerId is the worker that the request is that the task is running on.
	// This is relevant and valid only for RUNNING state.
	// TODO(akeshet): Error out if this is specified for non-RUNNING states.
	string worker_id = 4;

	// ProvisionableLabels is the label set for the new task.
	// This field is only relevant and should only be set for WAITING state.
	repeated string provisionable_labels = 5;

	// AccountId is the id of the quota account that should be charged
	// for the new task. This field is only relevant and should only be set
	// for WAITING state.
	string account_id = 6;

	// EnqueueTime is the time at which a request was first enqueued. This field
	// is only relevant for WAITING state.
	google.protobuf.Timestamp enqueue_time = 7;
}

// WorkerQueue represents the queue of qscheduler operations that are pending
// for a given worker.
//
// At present, the queue of operations for a worker can be at most 2 elements
// in length, and consist of either:
// - An Abort Job operation followed by an Assign Job operation.
// - An Assign Job operation.
//
// Therefore, instead of representing this as a list of operations, it is
// convenient to flatten this queue into a single object.
message WorkerQueue {
	// EnqueueTime is the time at which these operations were enqueued.
	google.protobuf.Timestamp enqueue_time = 1;

	// TaskToAssign is the task request that should be assigned to this worker.
	string task_to_assign = 2;

	// TaskToAbort indicates the task request id that should be aborted on this worker.
	//
	// Empty string "" indicates that there is nothing to abort.
	string task_to_abort = 3;
}

// State represents a reconciler, which includes its configuration and the
// pending operations that are in-flight and have not been ACK'ed yet.
message State {
	// WorkerQueues is a map from worker id to the pending operations for that worker.
	map<string, WorkerQueue> worker_queues = 1;

	// TaskErrors is a map from task ids that had an error to the error description.
	// These tasks will be returned from GetCancellations, until they are ack'ed as
	// aborted.
	map<string, string> task_errors = 2;
}
