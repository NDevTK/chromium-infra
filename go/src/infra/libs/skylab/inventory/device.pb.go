// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package inventory

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Similar to device phases, but for the cr50 module onboard.
//
// NEXT TAG: 3
type SchedulableLabels_CR50_Phase int32

const (
	SchedulableLabels_CR50_PHASE_INVALID SchedulableLabels_CR50_Phase = 0
	SchedulableLabels_CR50_PHASE_PREPVT  SchedulableLabels_CR50_Phase = 1
	SchedulableLabels_CR50_PHASE_PVT     SchedulableLabels_CR50_Phase = 2
)

var SchedulableLabels_CR50_Phase_name = map[int32]string{
	0: "CR50_PHASE_INVALID",
	1: "CR50_PHASE_PREPVT",
	2: "CR50_PHASE_PVT",
}

var SchedulableLabels_CR50_Phase_value = map[string]int32{
	"CR50_PHASE_INVALID": 0,
	"CR50_PHASE_PREPVT":  1,
	"CR50_PHASE_PVT":     2,
}

func (x SchedulableLabels_CR50_Phase) Enum() *SchedulableLabels_CR50_Phase {
	p := new(SchedulableLabels_CR50_Phase)
	*p = x
	return p
}

func (x SchedulableLabels_CR50_Phase) String() string {
	return proto.EnumName(SchedulableLabels_CR50_Phase_name, int32(x))
}

func (x *SchedulableLabels_CR50_Phase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_CR50_Phase_value, data, "SchedulableLabels_CR50_Phase")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_CR50_Phase(value)
	return nil
}

func (SchedulableLabels_CR50_Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 0}
}

// critical_pools are pool labels that the builders are dependent on, and that
// the cros-infra team is responsible for managing explicitly. All other pool
// labels used for adhoc labeling of DUTs go into self_serve_pools.
//
// NEXT TAG: 9
type SchedulableLabels_DUTPool int32

const (
	SchedulableLabels_DUT_POOL_INVALID       SchedulableLabels_DUTPool = 0
	SchedulableLabels_DUT_POOL_CQ            SchedulableLabels_DUTPool = 1
	SchedulableLabels_DUT_POOL_BVT           SchedulableLabels_DUTPool = 2
	SchedulableLabels_DUT_POOL_SUITES        SchedulableLabels_DUTPool = 3
	SchedulableLabels_DUT_POOL_CTS           SchedulableLabels_DUTPool = 4
	SchedulableLabels_DUT_POOL_CTS_PERBUILD  SchedulableLabels_DUTPool = 5
	SchedulableLabels_DUT_POOL_CONTINUOUS    SchedulableLabels_DUTPool = 6
	SchedulableLabels_DUT_POOL_ARC_PRESUBMIT SchedulableLabels_DUTPool = 7
	SchedulableLabels_DUT_POOL_QUOTA         SchedulableLabels_DUTPool = 8
)

var SchedulableLabels_DUTPool_name = map[int32]string{
	0: "DUT_POOL_INVALID",
	1: "DUT_POOL_CQ",
	2: "DUT_POOL_BVT",
	3: "DUT_POOL_SUITES",
	4: "DUT_POOL_CTS",
	5: "DUT_POOL_CTS_PERBUILD",
	6: "DUT_POOL_CONTINUOUS",
	7: "DUT_POOL_ARC_PRESUBMIT",
	8: "DUT_POOL_QUOTA",
}

var SchedulableLabels_DUTPool_value = map[string]int32{
	"DUT_POOL_INVALID":       0,
	"DUT_POOL_CQ":            1,
	"DUT_POOL_BVT":           2,
	"DUT_POOL_SUITES":        3,
	"DUT_POOL_CTS":           4,
	"DUT_POOL_CTS_PERBUILD":  5,
	"DUT_POOL_CONTINUOUS":    6,
	"DUT_POOL_ARC_PRESUBMIT": 7,
	"DUT_POOL_QUOTA":         8,
}

func (x SchedulableLabels_DUTPool) Enum() *SchedulableLabels_DUTPool {
	p := new(SchedulableLabels_DUTPool)
	*p = x
	return p
}

func (x SchedulableLabels_DUTPool) String() string {
	return proto.EnumName(SchedulableLabels_DUTPool_name, int32(x))
}

func (x *SchedulableLabels_DUTPool) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_DUTPool_value, data, "SchedulableLabels_DUTPool")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_DUTPool(value)
	return nil
}

func (SchedulableLabels_DUTPool) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 1}
}

// NEXT TAG: 3
type SchedulableLabels_CTSABI int32

const (
	SchedulableLabels_CTS_ABI_INVALID SchedulableLabels_CTSABI = 0
	SchedulableLabels_CTS_ABI_ARM     SchedulableLabels_CTSABI = 1
	SchedulableLabels_CTS_ABI_X86     SchedulableLabels_CTSABI = 2
)

var SchedulableLabels_CTSABI_name = map[int32]string{
	0: "CTS_ABI_INVALID",
	1: "CTS_ABI_ARM",
	2: "CTS_ABI_X86",
}

var SchedulableLabels_CTSABI_value = map[string]int32{
	"CTS_ABI_INVALID": 0,
	"CTS_ABI_ARM":     1,
	"CTS_ABI_X86":     2,
}

func (x SchedulableLabels_CTSABI) Enum() *SchedulableLabels_CTSABI {
	p := new(SchedulableLabels_CTSABI)
	*p = x
	return p
}

func (x SchedulableLabels_CTSABI) String() string {
	return proto.EnumName(SchedulableLabels_CTSABI_name, int32(x))
}

func (x *SchedulableLabels_CTSABI) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_CTSABI_value, data, "SchedulableLabels_CTSABI")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_CTSABI(value)
	return nil
}

func (SchedulableLabels_CTSABI) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 2}
}

// NEXT TAG: 3
type SchedulableLabels_CTSCPU int32

const (
	SchedulableLabels_CTS_CPU_INVALID SchedulableLabels_CTSCPU = 0
	SchedulableLabels_CTS_CPU_ARM     SchedulableLabels_CTSCPU = 1
	SchedulableLabels_CTS_CPU_X86     SchedulableLabels_CTSCPU = 2
)

var SchedulableLabels_CTSCPU_name = map[int32]string{
	0: "CTS_CPU_INVALID",
	1: "CTS_CPU_ARM",
	2: "CTS_CPU_X86",
}

var SchedulableLabels_CTSCPU_value = map[string]int32{
	"CTS_CPU_INVALID": 0,
	"CTS_CPU_ARM":     1,
	"CTS_CPU_X86":     2,
}

func (x SchedulableLabels_CTSCPU) Enum() *SchedulableLabels_CTSCPU {
	p := new(SchedulableLabels_CTSCPU)
	*p = x
	return p
}

func (x SchedulableLabels_CTSCPU) String() string {
	return proto.EnumName(SchedulableLabels_CTSCPU_name, int32(x))
}

func (x *SchedulableLabels_CTSCPU) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_CTSCPU_value, data, "SchedulableLabels_CTSCPU")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_CTSCPU(value)
	return nil
}

func (SchedulableLabels_CTSCPU) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 3}
}

// NEXT TAG: 2
type SchedulableLabels_ECType int32

const (
	SchedulableLabels_EC_TYPE_INVALID   SchedulableLabels_ECType = 0
	SchedulableLabels_EC_TYPE_CHROME_OS SchedulableLabels_ECType = 1
)

var SchedulableLabels_ECType_name = map[int32]string{
	0: "EC_TYPE_INVALID",
	1: "EC_TYPE_CHROME_OS",
}

var SchedulableLabels_ECType_value = map[string]int32{
	"EC_TYPE_INVALID":   0,
	"EC_TYPE_CHROME_OS": 1,
}

func (x SchedulableLabels_ECType) Enum() *SchedulableLabels_ECType {
	p := new(SchedulableLabels_ECType)
	*p = x
	return p
}

func (x SchedulableLabels_ECType) String() string {
	return proto.EnumName(SchedulableLabels_ECType_name, int32(x))
}

func (x *SchedulableLabels_ECType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_ECType_value, data, "SchedulableLabels_ECType")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_ECType(value)
	return nil
}

func (SchedulableLabels_ECType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 4}
}

// NEXT TAG: 6
type SchedulableLabels_OSType int32

const (
	SchedulableLabels_OS_TYPE_INVALID    SchedulableLabels_OSType = 0
	SchedulableLabels_OS_TYPE_ANDROID    SchedulableLabels_OSType = 1
	SchedulableLabels_OS_TYPE_CROS       SchedulableLabels_OSType = 2
	SchedulableLabels_OS_TYPE_JETSTREAM  SchedulableLabels_OSType = 3
	SchedulableLabels_OS_TYPE_MOBLAB     SchedulableLabels_OSType = 4
	SchedulableLabels_OS_TYPE_LABSTATION SchedulableLabels_OSType = 5
)

var SchedulableLabels_OSType_name = map[int32]string{
	0: "OS_TYPE_INVALID",
	1: "OS_TYPE_ANDROID",
	2: "OS_TYPE_CROS",
	3: "OS_TYPE_JETSTREAM",
	4: "OS_TYPE_MOBLAB",
	5: "OS_TYPE_LABSTATION",
}

var SchedulableLabels_OSType_value = map[string]int32{
	"OS_TYPE_INVALID":    0,
	"OS_TYPE_ANDROID":    1,
	"OS_TYPE_CROS":       2,
	"OS_TYPE_JETSTREAM":  3,
	"OS_TYPE_MOBLAB":     4,
	"OS_TYPE_LABSTATION": 5,
}

func (x SchedulableLabels_OSType) Enum() *SchedulableLabels_OSType {
	p := new(SchedulableLabels_OSType)
	*p = x
	return p
}

func (x SchedulableLabels_OSType) String() string {
	return proto.EnumName(SchedulableLabels_OSType_name, int32(x))
}

func (x *SchedulableLabels_OSType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_OSType_value, data, "SchedulableLabels_OSType")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_OSType(value)
	return nil
}

func (SchedulableLabels_OSType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 5}
}

// Devices go through the phases EVT -> DVT -> PVT during early development.
// Post launch devices are in the MP phase.
// Certain phases end up having to be repeated as hardware evolves. Leave some
// scope for iteration within phases.
//
// NEXT TAG: 9
type SchedulableLabels_Phase int32

const (
	SchedulableLabels_PHASE_INVALID SchedulableLabels_Phase = 0
	SchedulableLabels_PHASE_EVT     SchedulableLabels_Phase = 1
	SchedulableLabels_PHASE_EVT2    SchedulableLabels_Phase = 2
	SchedulableLabels_PHASE_DVT     SchedulableLabels_Phase = 3
	SchedulableLabels_PHASE_DVT2    SchedulableLabels_Phase = 4
	SchedulableLabels_PHASE_PVT     SchedulableLabels_Phase = 5
	SchedulableLabels_PHASE_PVT2    SchedulableLabels_Phase = 6
	SchedulableLabels_PHASE_PVT3    SchedulableLabels_Phase = 7
	SchedulableLabels_PHASE_MP      SchedulableLabels_Phase = 8
)

var SchedulableLabels_Phase_name = map[int32]string{
	0: "PHASE_INVALID",
	1: "PHASE_EVT",
	2: "PHASE_EVT2",
	3: "PHASE_DVT",
	4: "PHASE_DVT2",
	5: "PHASE_PVT",
	6: "PHASE_PVT2",
	7: "PHASE_PVT3",
	8: "PHASE_MP",
}

var SchedulableLabels_Phase_value = map[string]int32{
	"PHASE_INVALID": 0,
	"PHASE_EVT":     1,
	"PHASE_EVT2":    2,
	"PHASE_DVT":     3,
	"PHASE_DVT2":    4,
	"PHASE_PVT":     5,
	"PHASE_PVT2":    6,
	"PHASE_PVT3":    7,
	"PHASE_MP":      8,
}

func (x SchedulableLabels_Phase) Enum() *SchedulableLabels_Phase {
	p := new(SchedulableLabels_Phase)
	*p = x
	return p
}

func (x SchedulableLabels_Phase) String() string {
	return proto.EnumName(SchedulableLabels_Phase_name, int32(x))
}

func (x *SchedulableLabels_Phase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchedulableLabels_Phase_value, data, "SchedulableLabels_Phase")
	if err != nil {
		return err
	}
	*x = SchedulableLabels_Phase(value)
	return nil
}

func (SchedulableLabels_Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 6}
}

// NEXT TAG: 5
type HardwareCapabilities_Carrier int32

const (
	HardwareCapabilities_CARRIER_INVALID HardwareCapabilities_Carrier = 0
	HardwareCapabilities_CARRIER_ATT     HardwareCapabilities_Carrier = 1
	HardwareCapabilities_CARRIER_TMOBILE HardwareCapabilities_Carrier = 2
	HardwareCapabilities_CARRIER_VERIZON HardwareCapabilities_Carrier = 3
	HardwareCapabilities_CARRIER_SPRINT  HardwareCapabilities_Carrier = 4
)

var HardwareCapabilities_Carrier_name = map[int32]string{
	0: "CARRIER_INVALID",
	1: "CARRIER_ATT",
	2: "CARRIER_TMOBILE",
	3: "CARRIER_VERIZON",
	4: "CARRIER_SPRINT",
}

var HardwareCapabilities_Carrier_value = map[string]int32{
	"CARRIER_INVALID": 0,
	"CARRIER_ATT":     1,
	"CARRIER_TMOBILE": 2,
	"CARRIER_VERIZON": 3,
	"CARRIER_SPRINT":  4,
}

func (x HardwareCapabilities_Carrier) Enum() *HardwareCapabilities_Carrier {
	p := new(HardwareCapabilities_Carrier)
	*p = x
	return p
}

func (x HardwareCapabilities_Carrier) String() string {
	return proto.EnumName(HardwareCapabilities_Carrier_name, int32(x))
}

func (x *HardwareCapabilities_Carrier) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HardwareCapabilities_Carrier_value, data, "HardwareCapabilities_Carrier")
	if err != nil {
		return err
	}
	*x = HardwareCapabilities_Carrier(value)
	return nil
}

func (HardwareCapabilities_Carrier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{11, 0}
}

// NEXT TAG: 9
type HardwareCapabilities_VideoAcceleration int32

const (
	HardwareCapabilities_VIDEO_ACCELERATION_INVALID   HardwareCapabilities_VideoAcceleration = 0
	HardwareCapabilities_VIDEO_ACCELERATION_H264      HardwareCapabilities_VideoAcceleration = 1
	HardwareCapabilities_VIDEO_ACCELERATION_ENC_H264  HardwareCapabilities_VideoAcceleration = 2
	HardwareCapabilities_VIDEO_ACCELERATION_VP8       HardwareCapabilities_VideoAcceleration = 3
	HardwareCapabilities_VIDEO_ACCELERATION_ENC_VP8   HardwareCapabilities_VideoAcceleration = 4
	HardwareCapabilities_VIDEO_ACCELERATION_VP9       HardwareCapabilities_VideoAcceleration = 5
	HardwareCapabilities_VIDEO_ACCELERATION_ENC_VP9   HardwareCapabilities_VideoAcceleration = 6
	HardwareCapabilities_VIDEO_ACCELERATION_VP9_2     HardwareCapabilities_VideoAcceleration = 7
	HardwareCapabilities_VIDEO_ACCELERATION_ENC_VP9_2 HardwareCapabilities_VideoAcceleration = 8
)

var HardwareCapabilities_VideoAcceleration_name = map[int32]string{
	0: "VIDEO_ACCELERATION_INVALID",
	1: "VIDEO_ACCELERATION_H264",
	2: "VIDEO_ACCELERATION_ENC_H264",
	3: "VIDEO_ACCELERATION_VP8",
	4: "VIDEO_ACCELERATION_ENC_VP8",
	5: "VIDEO_ACCELERATION_VP9",
	6: "VIDEO_ACCELERATION_ENC_VP9",
	7: "VIDEO_ACCELERATION_VP9_2",
	8: "VIDEO_ACCELERATION_ENC_VP9_2",
}

var HardwareCapabilities_VideoAcceleration_value = map[string]int32{
	"VIDEO_ACCELERATION_INVALID":   0,
	"VIDEO_ACCELERATION_H264":      1,
	"VIDEO_ACCELERATION_ENC_H264":  2,
	"VIDEO_ACCELERATION_VP8":       3,
	"VIDEO_ACCELERATION_ENC_VP8":   4,
	"VIDEO_ACCELERATION_VP9":       5,
	"VIDEO_ACCELERATION_ENC_VP9":   6,
	"VIDEO_ACCELERATION_VP9_2":     7,
	"VIDEO_ACCELERATION_ENC_VP9_2": 8,
}

func (x HardwareCapabilities_VideoAcceleration) Enum() *HardwareCapabilities_VideoAcceleration {
	p := new(HardwareCapabilities_VideoAcceleration)
	*p = x
	return p
}

func (x HardwareCapabilities_VideoAcceleration) String() string {
	return proto.EnumName(HardwareCapabilities_VideoAcceleration_name, int32(x))
}

func (x *HardwareCapabilities_VideoAcceleration) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HardwareCapabilities_VideoAcceleration_value, data, "HardwareCapabilities_VideoAcceleration")
	if err != nil {
		return err
	}
	*x = HardwareCapabilities_VideoAcceleration(value)
	return nil
}

func (HardwareCapabilities_VideoAcceleration) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{11, 1}
}

// NEXT TAG: 9
type Peripherals_ChameleonType int32

const (
	Peripherals_CHAMELEON_TYPE_INVALID      Peripherals_ChameleonType = 0
	Peripherals_CHAMELEON_TYPE_BT_HID       Peripherals_ChameleonType = 1
	Peripherals_CHAMELEON_TYPE_DP           Peripherals_ChameleonType = 2
	Peripherals_CHAMELEON_TYPE_DP_HDMI      Peripherals_ChameleonType = 3
	Peripherals_CHAMELEON_TYPE_VGA          Peripherals_ChameleonType = 4
	Peripherals_CHAMELEON_TYPE_HDMI         Peripherals_ChameleonType = 5
	Peripherals_CHAMELEON_TYPE_BT_BLE_HID   Peripherals_ChameleonType = 6
	Peripherals_CHAMELEON_TYPE_BT_A2DP_SINK Peripherals_ChameleonType = 7
	Peripherals_CHAMELEON_TYPE_BT_PEER      Peripherals_ChameleonType = 8
)

var Peripherals_ChameleonType_name = map[int32]string{
	0: "CHAMELEON_TYPE_INVALID",
	1: "CHAMELEON_TYPE_BT_HID",
	2: "CHAMELEON_TYPE_DP",
	3: "CHAMELEON_TYPE_DP_HDMI",
	4: "CHAMELEON_TYPE_VGA",
	5: "CHAMELEON_TYPE_HDMI",
	6: "CHAMELEON_TYPE_BT_BLE_HID",
	7: "CHAMELEON_TYPE_BT_A2DP_SINK",
	8: "CHAMELEON_TYPE_BT_PEER",
}

var Peripherals_ChameleonType_value = map[string]int32{
	"CHAMELEON_TYPE_INVALID":      0,
	"CHAMELEON_TYPE_BT_HID":       1,
	"CHAMELEON_TYPE_DP":           2,
	"CHAMELEON_TYPE_DP_HDMI":      3,
	"CHAMELEON_TYPE_VGA":          4,
	"CHAMELEON_TYPE_HDMI":         5,
	"CHAMELEON_TYPE_BT_BLE_HID":   6,
	"CHAMELEON_TYPE_BT_A2DP_SINK": 7,
	"CHAMELEON_TYPE_BT_PEER":      8,
}

func (x Peripherals_ChameleonType) Enum() *Peripherals_ChameleonType {
	p := new(Peripherals_ChameleonType)
	*p = x
	return p
}

func (x Peripherals_ChameleonType) String() string {
	return proto.EnumName(Peripherals_ChameleonType_name, int32(x))
}

func (x *Peripherals_ChameleonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Peripherals_ChameleonType_value, data, "Peripherals_ChameleonType")
	if err != nil {
		return err
	}
	*x = Peripherals_ChameleonType(value)
	return nil
}

func (Peripherals_ChameleonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{12, 0}
}

// Related to sparse CTS testing. See b/70309087
// NEXT TAG: 4
type TestCoverageHints_CTSSparse int32

const (
	TestCoverageHints_CTS_SPARSE_INVALID TestCoverageHints_CTSSparse = 0
	TestCoverageHints_CTS_SPARSE_2       TestCoverageHints_CTSSparse = 1
	TestCoverageHints_CTS_SPARSE_3       TestCoverageHints_CTSSparse = 2
	TestCoverageHints_CTS_SPARSE_5       TestCoverageHints_CTSSparse = 3
)

var TestCoverageHints_CTSSparse_name = map[int32]string{
	0: "CTS_SPARSE_INVALID",
	1: "CTS_SPARSE_2",
	2: "CTS_SPARSE_3",
	3: "CTS_SPARSE_5",
}

var TestCoverageHints_CTSSparse_value = map[string]int32{
	"CTS_SPARSE_INVALID": 0,
	"CTS_SPARSE_2":       1,
	"CTS_SPARSE_3":       2,
	"CTS_SPARSE_5":       3,
}

func (x TestCoverageHints_CTSSparse) Enum() *TestCoverageHints_CTSSparse {
	p := new(TestCoverageHints_CTSSparse)
	*p = x
	return p
}

func (x TestCoverageHints_CTSSparse) String() string {
	return proto.EnumName(TestCoverageHints_CTSSparse_name, int32(x))
}

func (x *TestCoverageHints_CTSSparse) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCoverageHints_CTSSparse_value, data, "TestCoverageHints_CTSSparse")
	if err != nil {
		return err
	}
	*x = TestCoverageHints_CTSSparse(value)
	return nil
}

func (TestCoverageHints_CTSSparse) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{13, 0}
}

// NEXT TAG: 4
type Device struct {
	// Each of these must contain a 'CommonDeviceSpecs common' field.
	// We will use this informal composition based sharing rather than proto
	// extensions because extensions are unwieldy, and we really want composition
	// not inhertence.
	//
	// Types that are valid to be assigned to Device:
	//	*Device_Dut
	//	*Device_ServoHost
	//	*Device_Chameleon
	Device               isDevice_Device `protobuf_oneof:"device"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

type isDevice_Device interface {
	isDevice_Device()
}

type Device_Dut struct {
	Dut *DeviceUnderTest `protobuf:"bytes,1,opt,name=dut,oneof"`
}

type Device_ServoHost struct {
	ServoHost *ServoHostDevice `protobuf:"bytes,2,opt,name=servo_host,json=servoHost,oneof"`
}

type Device_Chameleon struct {
	Chameleon *ChameleonDevice `protobuf:"bytes,3,opt,name=chameleon,oneof"`
}

func (*Device_Dut) isDevice_Device() {}

func (*Device_ServoHost) isDevice_Device() {}

func (*Device_Chameleon) isDevice_Device() {}

func (m *Device) GetDevice() isDevice_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Device) GetDut() *DeviceUnderTest {
	if x, ok := m.GetDevice().(*Device_Dut); ok {
		return x.Dut
	}
	return nil
}

func (m *Device) GetServoHost() *ServoHostDevice {
	if x, ok := m.GetDevice().(*Device_ServoHost); ok {
		return x.ServoHost
	}
	return nil
}

func (m *Device) GetChameleon() *ChameleonDevice {
	if x, ok := m.GetDevice().(*Device_Chameleon); ok {
		return x.Chameleon
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Device) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Device_Dut)(nil),
		(*Device_ServoHost)(nil),
		(*Device_Chameleon)(nil),
	}
}

// NEXT TAG: 2
type DeviceUnderTest struct {
	Common               *CommonDeviceSpecs `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	RemovalReason        *RemovalReason     `protobuf:"bytes,2,opt,name=removal_reason,json=removalReason" json:"removal_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DeviceUnderTest) Reset()         { *m = DeviceUnderTest{} }
func (m *DeviceUnderTest) String() string { return proto.CompactTextString(m) }
func (*DeviceUnderTest) ProtoMessage()    {}
func (*DeviceUnderTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}

func (m *DeviceUnderTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUnderTest.Unmarshal(m, b)
}
func (m *DeviceUnderTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUnderTest.Marshal(b, m, deterministic)
}
func (m *DeviceUnderTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUnderTest.Merge(m, src)
}
func (m *DeviceUnderTest) XXX_Size() int {
	return xxx_messageInfo_DeviceUnderTest.Size(m)
}
func (m *DeviceUnderTest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUnderTest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUnderTest proto.InternalMessageInfo

func (m *DeviceUnderTest) GetCommon() *CommonDeviceSpecs {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *DeviceUnderTest) GetRemovalReason() *RemovalReason {
	if m != nil {
		return m.RemovalReason
	}
	return nil
}

// NEXT TAG: 2
type ServoHostDevice struct {
	Common               *CommonDeviceSpecs `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	Version              *string            `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ServoHostDevice) Reset()         { *m = ServoHostDevice{} }
func (m *ServoHostDevice) String() string { return proto.CompactTextString(m) }
func (*ServoHostDevice) ProtoMessage()    {}
func (*ServoHostDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2}
}

func (m *ServoHostDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServoHostDevice.Unmarshal(m, b)
}
func (m *ServoHostDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServoHostDevice.Marshal(b, m, deterministic)
}
func (m *ServoHostDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServoHostDevice.Merge(m, src)
}
func (m *ServoHostDevice) XXX_Size() int {
	return xxx_messageInfo_ServoHostDevice.Size(m)
}
func (m *ServoHostDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ServoHostDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ServoHostDevice proto.InternalMessageInfo

func (m *ServoHostDevice) GetCommon() *CommonDeviceSpecs {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *ServoHostDevice) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

// NEXT TAG: 2
type ChameleonDevice struct {
	Common               *CommonDeviceSpecs `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChameleonDevice) Reset()         { *m = ChameleonDevice{} }
func (m *ChameleonDevice) String() string { return proto.CompactTextString(m) }
func (*ChameleonDevice) ProtoMessage()    {}
func (*ChameleonDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{3}
}

func (m *ChameleonDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChameleonDevice.Unmarshal(m, b)
}
func (m *ChameleonDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChameleonDevice.Marshal(b, m, deterministic)
}
func (m *ChameleonDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChameleonDevice.Merge(m, src)
}
func (m *ChameleonDevice) XXX_Size() int {
	return xxx_messageInfo_ChameleonDevice.Size(m)
}
func (m *ChameleonDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ChameleonDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ChameleonDevice proto.InternalMessageInfo

func (m *ChameleonDevice) GetCommon() *CommonDeviceSpecs {
	if m != nil {
		return m.Common
	}
	return nil
}

//
// Keep sorted by field name.
//
// NEXT TAG: 12
type CommonDeviceSpecs struct {
	// These are opaque keyvals for skylab services. Devices may arbitrarily
	// define any attributes they want.
	Attributes []*KeyValue `protobuf:"bytes,9,rep,name=attributes" json:"attributes,omitempty"`
	// A device may be locked for multiple reasons by multiple people. All locks
	// need to be removed for the device to go back into circulation.
	DeviceLocks []*DeviceLock `protobuf:"bytes,6,rep,name=device_locks,json=deviceLocks" json:"device_locks,omitempty"`
	Environment *Environment  `protobuf:"varint,10,opt,name=environment,enum=chrome.chromeos_infra.skylab.proto.inventory.Environment" json:"environment,omitempty"`
	Hostname    *string       `protobuf:"bytes,2,req,name=hostname" json:"hostname,omitempty"`
	// An invariant property corresponding to the hardware deployed for this
	// device.
	Hwid *string `protobuf:"bytes,3,opt,name=hwid" json:"hwid,omitempty"`
	Id   *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The scheduling system uses these to target jobs at the right kinds of
	// devices.
	Labels   *SchedulableLabels `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	Location *Location          `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	// Deprecated: This is needed for the master AFE in the autotest infra to
	// forward RPCs to the relevant shard for a device.
	// Not to be used in skylab.
	OwnerShard *Shard `protobuf:"bytes,7,opt,name=owner_shard,json=ownerShard" json:"owner_shard,omitempty"` // Deprecated: Do not use.
	// An invariant about the distros inventory tag associated with the device.
	// For ChromeOS devices, this can be read off of vboot.
	SerialNumber *string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	// Similar to a useless machine, if set to true, automatic inventory
	// updates should set this back to false.  This can be used to test
	// that automated updates are firing correctly.
	UselessSwitch        *bool    `protobuf:"varint,11,opt,name=useless_switch,json=uselessSwitch" json:"useless_switch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonDeviceSpecs) Reset()         { *m = CommonDeviceSpecs{} }
func (m *CommonDeviceSpecs) String() string { return proto.CompactTextString(m) }
func (*CommonDeviceSpecs) ProtoMessage()    {}
func (*CommonDeviceSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{4}
}

func (m *CommonDeviceSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonDeviceSpecs.Unmarshal(m, b)
}
func (m *CommonDeviceSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonDeviceSpecs.Marshal(b, m, deterministic)
}
func (m *CommonDeviceSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonDeviceSpecs.Merge(m, src)
}
func (m *CommonDeviceSpecs) XXX_Size() int {
	return xxx_messageInfo_CommonDeviceSpecs.Size(m)
}
func (m *CommonDeviceSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonDeviceSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_CommonDeviceSpecs proto.InternalMessageInfo

func (m *CommonDeviceSpecs) GetAttributes() []*KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CommonDeviceSpecs) GetDeviceLocks() []*DeviceLock {
	if m != nil {
		return m.DeviceLocks
	}
	return nil
}

func (m *CommonDeviceSpecs) GetEnvironment() Environment {
	if m != nil && m.Environment != nil {
		return *m.Environment
	}
	return Environment_ENVIRONMENT_INVALID
}

func (m *CommonDeviceSpecs) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *CommonDeviceSpecs) GetHwid() string {
	if m != nil && m.Hwid != nil {
		return *m.Hwid
	}
	return ""
}

func (m *CommonDeviceSpecs) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *CommonDeviceSpecs) GetLabels() *SchedulableLabels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CommonDeviceSpecs) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// Deprecated: Do not use.
func (m *CommonDeviceSpecs) GetOwnerShard() *Shard {
	if m != nil {
		return m.OwnerShard
	}
	return nil
}

func (m *CommonDeviceSpecs) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CommonDeviceSpecs) GetUselessSwitch() bool {
	if m != nil && m.UselessSwitch != nil {
		return *m.UselessSwitch
	}
	return false
}

// RemovalReason describes the reason for a DUT being removed from running
// tasks. See also go/skylab-dut-removal-reason NEXT TAG: 4
type RemovalReason struct {
	// bug is a link to a bug in crbug.com or other bug tracker.  Required.
	Bug *string `protobuf:"bytes,1,opt,name=bug" json:"bug,omitempty"`
	// comment should be a short comment to provide quick context for
	// the removal reason.  This should not be used as a replacement for
	// keeping the bug up to date with context.
	Comment *string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	// expire_time indicates when the reason for removal should be
	// revisited so that DUTs don't get forgotten.  Required.
	ExpireTime           *Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RemovalReason) Reset()         { *m = RemovalReason{} }
func (m *RemovalReason) String() string { return proto.CompactTextString(m) }
func (*RemovalReason) ProtoMessage()    {}
func (*RemovalReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{5}
}

func (m *RemovalReason) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovalReason.Unmarshal(m, b)
}
func (m *RemovalReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovalReason.Marshal(b, m, deterministic)
}
func (m *RemovalReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovalReason.Merge(m, src)
}
func (m *RemovalReason) XXX_Size() int {
	return xxx_messageInfo_RemovalReason.Size(m)
}
func (m *RemovalReason) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovalReason.DiscardUnknown(m)
}

var xxx_messageInfo_RemovalReason proto.InternalMessageInfo

func (m *RemovalReason) GetBug() string {
	if m != nil && m.Bug != nil {
		return *m.Bug
	}
	return ""
}

func (m *RemovalReason) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *RemovalReason) GetExpireTime() *Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

// NEXT TAG: 5
type Location struct {
	Lab                  *PhysicalLab `protobuf:"bytes,1,req,name=lab" json:"lab,omitempty"`
	Row                  *int32       `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	Rack                 *int32       `protobuf:"varint,3,req,name=rack" json:"rack,omitempty"`
	Host                 *int32       `protobuf:"varint,4,req,name=host" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{6}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLab() *PhysicalLab {
	if m != nil {
		return m.Lab
	}
	return nil
}

func (m *Location) GetRow() int32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

func (m *Location) GetRack() int32 {
	if m != nil && m.Rack != nil {
		return *m.Rack
	}
	return 0
}

func (m *Location) GetHost() int32 {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return 0
}

// NEXT TAG: 2
type PhysicalLab struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhysicalLab) Reset()         { *m = PhysicalLab{} }
func (m *PhysicalLab) String() string { return proto.CompactTextString(m) }
func (*PhysicalLab) ProtoMessage()    {}
func (*PhysicalLab) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{7}
}

func (m *PhysicalLab) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalLab.Unmarshal(m, b)
}
func (m *PhysicalLab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalLab.Marshal(b, m, deterministic)
}
func (m *PhysicalLab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalLab.Merge(m, src)
}
func (m *PhysicalLab) XXX_Size() int {
	return xxx_messageInfo_PhysicalLab.Size(m)
}
func (m *PhysicalLab) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalLab.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalLab proto.InternalMessageInfo

func (m *PhysicalLab) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// A DeviceLock is a generic way of pulling any lab device out of commission
// temporarily. This allows us to quickly take out a device without deleting it
// from inventory. The exact effect of locking a device varies by the type of
// device and services involved.
// NEXT TAG: 6
type DeviceLock struct {
	Lock *bool `protobuf:"varint,1,req,name=lock" json:"lock,omitempty"` // Deprecated: Do not use.
	// This field is informational only. Do not assume this as a real user
	// identity in any auth domain.
	LockedBy             *string    `protobuf:"bytes,2,req,name=locked_by,json=lockedBy" json:"locked_by,omitempty"`
	LockReason           *string    `protobuf:"bytes,3,req,name=lock_reason,json=lockReason" json:"lock_reason,omitempty"`
	BeginTime            *Timestamp `protobuf:"bytes,4,req,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	ExpireTime           *Timestamp `protobuf:"bytes,5,req,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	LockId               *int32     `protobuf:"varint,6,req,name=lock_id,json=lockId" json:"lock_id,omitempty"` // Deprecated: Do not use.
	Id                   *string    `protobuf:"bytes,7,req,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeviceLock) Reset()         { *m = DeviceLock{} }
func (m *DeviceLock) String() string { return proto.CompactTextString(m) }
func (*DeviceLock) ProtoMessage()    {}
func (*DeviceLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{8}
}

func (m *DeviceLock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceLock.Unmarshal(m, b)
}
func (m *DeviceLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceLock.Marshal(b, m, deterministic)
}
func (m *DeviceLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceLock.Merge(m, src)
}
func (m *DeviceLock) XXX_Size() int {
	return xxx_messageInfo_DeviceLock.Size(m)
}
func (m *DeviceLock) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceLock.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceLock proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *DeviceLock) GetLock() bool {
	if m != nil && m.Lock != nil {
		return *m.Lock
	}
	return false
}

func (m *DeviceLock) GetLockedBy() string {
	if m != nil && m.LockedBy != nil {
		return *m.LockedBy
	}
	return ""
}

func (m *DeviceLock) GetLockReason() string {
	if m != nil && m.LockReason != nil {
		return *m.LockReason
	}
	return ""
}

func (m *DeviceLock) GetBeginTime() *Timestamp {
	if m != nil {
		return m.BeginTime
	}
	return nil
}

func (m *DeviceLock) GetExpireTime() *Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

// Deprecated: Do not use.
func (m *DeviceLock) GetLockId() int32 {
	if m != nil && m.LockId != nil {
		return *m.LockId
	}
	return 0
}

func (m *DeviceLock) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

// NEXT TAG: 2
type Shard struct {
	Hostname             *string  `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{9}
}

func (m *Shard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shard.Unmarshal(m, b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
}
func (m *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(m, src)
}
func (m *Shard) XXX_Size() int {
	return xxx_messageInfo_Shard.Size(m)
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

// These labels are used for scheduling decisions in skylab. They should be
// semantically known to the inventory service to allow filtering based on them.
// (i.e., no "extra_labels" field down here)
//
// Keep sorted by field name.
//
// NEXT TAG: 32
type SchedulableLabels struct {
	// Whether this device supports ARC execution environment.
	Arc *bool `protobuf:"varint,20,opt,name=arc" json:"arc,omitempty"`
	// TODO(pprabhu) This should be an enum shared with stable_versions.proto
	// But there are 171 of them...
	Board *string `protobuf:"bytes,2,opt,name=board" json:"board,omitempty"`
	// This matches the brand id in chromiumos/infra/proto/src/device/brand_id.proto
	Brand        *string                       `protobuf:"bytes,26,opt,name=brand" json:"brand,omitempty"`
	Capabilities *HardwareCapabilities         `protobuf:"bytes,5,opt,name=capabilities" json:"capabilities,omitempty"`
	Cr50Phase    *SchedulableLabels_CR50_Phase `protobuf:"varint,22,opt,name=cr50_phase,json=cr50Phase,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_CR50_Phase" json:"cr50_phase,omitempty"`
	// Example: cr50-ro-keyid:prod
	// Example: cr50-ro-keyid:0xaa66150f
	Cr50RoKeyid *string `protobuf:"bytes,28,opt,name=cr50_ro_keyid,json=cr50RoKeyid" json:"cr50_ro_keyid,omitempty"`
	// Example: cr50-ro-version:0.0.10
	Cr50RoVersion *string `protobuf:"bytes,29,opt,name=cr50_ro_version,json=cr50RoVersion" json:"cr50_ro_version,omitempty"`
	// Example: cr50-rw-keyid:prod
	// Example: cr50-rw-keyid:0xde88588d
	Cr50RwKeyid *string `protobuf:"bytes,30,opt,name=cr50_rw_keyid,json=cr50RwKeyid" json:"cr50_rw_keyid,omitempty"`
	// Example:cr50-rw-version:0.3.20
	Cr50RwVersion *string                     `protobuf:"bytes,31,opt,name=cr50_rw_version,json=cr50RwVersion" json:"cr50_rw_version,omitempty"`
	CriticalPools []SchedulableLabels_DUTPool `protobuf:"varint,3,rep,name=critical_pools,json=criticalPools,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_DUTPool" json:"critical_pools,omitempty"`
	CtsAbi        []SchedulableLabels_CTSABI  `protobuf:"varint,14,rep,name=cts_abi,json=ctsAbi,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_CTSABI" json:"cts_abi,omitempty"`
	CtsCpu        []SchedulableLabels_CTSCPU  `protobuf:"varint,21,rep,name=cts_cpu,json=ctsCpu,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_CTSCPU" json:"cts_cpu,omitempty"`
	EcType        *SchedulableLabels_ECType   `protobuf:"varint,10,opt,name=ec_type,json=ecType,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_ECType" json:"ec_type,omitempty"`
	// crbug.com/994200: this matches to label "sku" in autotest.
	HwidSku     *string                   `protobuf:"bytes,27,opt,name=hwid_sku,json=hwidSku" json:"hwid_sku,omitempty"`
	Model       *string                   `protobuf:"bytes,13,opt,name=model" json:"model,omitempty"`
	Sku         *string                   `protobuf:"bytes,25,opt,name=sku" json:"sku,omitempty"`
	OsType      *SchedulableLabels_OSType `protobuf:"varint,15,opt,name=os_type,json=osType,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_OSType" json:"os_type,omitempty"`
	Peripherals *Peripherals              `protobuf:"bytes,19,opt,name=peripherals" json:"peripherals,omitempty"`
	Phase       *SchedulableLabels_Phase  `protobuf:"varint,16,opt,name=phase,enum=chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_Phase" json:"phase,omitempty"`
	// TODO(pprabhu) This should be an enum shared with stable_versions.proto
	// But there are 171 of them...
	Platform          *string            `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	ReferenceDesign   *string            `protobuf:"bytes,24,opt,name=reference_design,json=referenceDesign" json:"reference_design,omitempty"`
	SelfServePools    []string           `protobuf:"bytes,4,rep,name=self_serve_pools,json=selfServePools" json:"self_serve_pools,omitempty"`
	TestCoverageHints *TestCoverageHints `protobuf:"bytes,18,opt,name=test_coverage_hints,json=testCoverageHints" json:"test_coverage_hints,omitempty"`
	// useless_switch does nothing.  Like a useless machine, if set to
	// true, automatic label updates should set this back to false.
	// This can be used to test that automated updates are firing
	// correctly.
	UselessSwitch        *bool    `protobuf:"varint,23,opt,name=useless_switch,json=uselessSwitch" json:"useless_switch,omitempty"`
	Variant              []string `protobuf:"bytes,17,rep,name=variant" json:"variant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulableLabels) Reset()         { *m = SchedulableLabels{} }
func (m *SchedulableLabels) String() string { return proto.CompactTextString(m) }
func (*SchedulableLabels) ProtoMessage()    {}
func (*SchedulableLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10}
}

func (m *SchedulableLabels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulableLabels.Unmarshal(m, b)
}
func (m *SchedulableLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulableLabels.Marshal(b, m, deterministic)
}
func (m *SchedulableLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulableLabels.Merge(m, src)
}
func (m *SchedulableLabels) XXX_Size() int {
	return xxx_messageInfo_SchedulableLabels.Size(m)
}
func (m *SchedulableLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulableLabels.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulableLabels proto.InternalMessageInfo

func (m *SchedulableLabels) GetArc() bool {
	if m != nil && m.Arc != nil {
		return *m.Arc
	}
	return false
}

func (m *SchedulableLabels) GetBoard() string {
	if m != nil && m.Board != nil {
		return *m.Board
	}
	return ""
}

func (m *SchedulableLabels) GetBrand() string {
	if m != nil && m.Brand != nil {
		return *m.Brand
	}
	return ""
}

func (m *SchedulableLabels) GetCapabilities() *HardwareCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *SchedulableLabels) GetCr50Phase() SchedulableLabels_CR50_Phase {
	if m != nil && m.Cr50Phase != nil {
		return *m.Cr50Phase
	}
	return SchedulableLabels_CR50_PHASE_INVALID
}

func (m *SchedulableLabels) GetCr50RoKeyid() string {
	if m != nil && m.Cr50RoKeyid != nil {
		return *m.Cr50RoKeyid
	}
	return ""
}

func (m *SchedulableLabels) GetCr50RoVersion() string {
	if m != nil && m.Cr50RoVersion != nil {
		return *m.Cr50RoVersion
	}
	return ""
}

func (m *SchedulableLabels) GetCr50RwKeyid() string {
	if m != nil && m.Cr50RwKeyid != nil {
		return *m.Cr50RwKeyid
	}
	return ""
}

func (m *SchedulableLabels) GetCr50RwVersion() string {
	if m != nil && m.Cr50RwVersion != nil {
		return *m.Cr50RwVersion
	}
	return ""
}

func (m *SchedulableLabels) GetCriticalPools() []SchedulableLabels_DUTPool {
	if m != nil {
		return m.CriticalPools
	}
	return nil
}

func (m *SchedulableLabels) GetCtsAbi() []SchedulableLabels_CTSABI {
	if m != nil {
		return m.CtsAbi
	}
	return nil
}

func (m *SchedulableLabels) GetCtsCpu() []SchedulableLabels_CTSCPU {
	if m != nil {
		return m.CtsCpu
	}
	return nil
}

func (m *SchedulableLabels) GetEcType() SchedulableLabels_ECType {
	if m != nil && m.EcType != nil {
		return *m.EcType
	}
	return SchedulableLabels_EC_TYPE_INVALID
}

func (m *SchedulableLabels) GetHwidSku() string {
	if m != nil && m.HwidSku != nil {
		return *m.HwidSku
	}
	return ""
}

func (m *SchedulableLabels) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *SchedulableLabels) GetSku() string {
	if m != nil && m.Sku != nil {
		return *m.Sku
	}
	return ""
}

func (m *SchedulableLabels) GetOsType() SchedulableLabels_OSType {
	if m != nil && m.OsType != nil {
		return *m.OsType
	}
	return SchedulableLabels_OS_TYPE_INVALID
}

func (m *SchedulableLabels) GetPeripherals() *Peripherals {
	if m != nil {
		return m.Peripherals
	}
	return nil
}

func (m *SchedulableLabels) GetPhase() SchedulableLabels_Phase {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return SchedulableLabels_PHASE_INVALID
}

func (m *SchedulableLabels) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *SchedulableLabels) GetReferenceDesign() string {
	if m != nil && m.ReferenceDesign != nil {
		return *m.ReferenceDesign
	}
	return ""
}

func (m *SchedulableLabels) GetSelfServePools() []string {
	if m != nil {
		return m.SelfServePools
	}
	return nil
}

func (m *SchedulableLabels) GetTestCoverageHints() *TestCoverageHints {
	if m != nil {
		return m.TestCoverageHints
	}
	return nil
}

func (m *SchedulableLabels) GetUselessSwitch() bool {
	if m != nil && m.UselessSwitch != nil {
		return *m.UselessSwitch
	}
	return false
}

func (m *SchedulableLabels) GetVariant() []string {
	if m != nil {
		return m.Variant
	}
	return nil
}

// Keep sorted by field name.
//
// NEXT TAG: 20
type HardwareCapabilities struct {
	Atrus          *bool                         `protobuf:"varint,17,opt,name=atrus" json:"atrus,omitempty"`
	Bluetooth      *bool                         `protobuf:"varint,7,opt,name=bluetooth" json:"bluetooth,omitempty"`
	Carrier        *HardwareCapabilities_Carrier `protobuf:"varint,16,opt,name=carrier,enum=chrome.chromeos_infra.skylab.proto.inventory.HardwareCapabilities_Carrier" json:"carrier,omitempty"`
	Detachablebase *bool                         `protobuf:"varint,12,opt,name=detachablebase" json:"detachablebase,omitempty"`
	// Indicating if the device has fingerprint sensor.
	Fingerprint          *bool                                    `protobuf:"varint,19,opt,name=fingerprint" json:"fingerprint,omitempty"`
	Flashrom             *bool                                    `protobuf:"varint,14,opt,name=flashrom" json:"flashrom,omitempty"`
	GpuFamily            *string                                  `protobuf:"bytes,3,opt,name=gpu_family,json=gpuFamily" json:"gpu_family,omitempty"`
	Graphics             *string                                  `protobuf:"bytes,4,opt,name=graphics" json:"graphics,omitempty"`
	Hotwording           *bool                                    `protobuf:"varint,15,opt,name=hotwording" json:"hotwording,omitempty"`
	InternalDisplay      *bool                                    `protobuf:"varint,8,opt,name=internal_display,json=internalDisplay" json:"internal_display,omitempty"`
	Lucidsleep           *bool                                    `protobuf:"varint,13,opt,name=lucidsleep" json:"lucidsleep,omitempty"`
	Modem                *string                                  `protobuf:"bytes,1,opt,name=modem" json:"modem,omitempty"`
	Power                *string                                  `protobuf:"bytes,6,opt,name=power" json:"power,omitempty"`
	Storage              *string                                  `protobuf:"bytes,5,opt,name=storage" json:"storage,omitempty"`
	Telephony            *string                                  `protobuf:"bytes,2,opt,name=telephony" json:"telephony,omitempty"`
	Webcam               *bool                                    `protobuf:"varint,9,opt,name=webcam" json:"webcam,omitempty"`
	Touchpad             *bool                                    `protobuf:"varint,10,opt,name=touchpad" json:"touchpad,omitempty"`
	Touchscreen          *bool                                    `protobuf:"varint,18,opt,name=touchscreen" json:"touchscreen,omitempty"`
	VideoAcceleration    []HardwareCapabilities_VideoAcceleration `protobuf:"varint,11,rep,name=video_acceleration,json=videoAcceleration,enum=chrome.chromeos_infra.skylab.proto.inventory.HardwareCapabilities_VideoAcceleration" json:"video_acceleration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *HardwareCapabilities) Reset()         { *m = HardwareCapabilities{} }
func (m *HardwareCapabilities) String() string { return proto.CompactTextString(m) }
func (*HardwareCapabilities) ProtoMessage()    {}
func (*HardwareCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{11}
}

func (m *HardwareCapabilities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareCapabilities.Unmarshal(m, b)
}
func (m *HardwareCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareCapabilities.Marshal(b, m, deterministic)
}
func (m *HardwareCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareCapabilities.Merge(m, src)
}
func (m *HardwareCapabilities) XXX_Size() int {
	return xxx_messageInfo_HardwareCapabilities.Size(m)
}
func (m *HardwareCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareCapabilities proto.InternalMessageInfo

func (m *HardwareCapabilities) GetAtrus() bool {
	if m != nil && m.Atrus != nil {
		return *m.Atrus
	}
	return false
}

func (m *HardwareCapabilities) GetBluetooth() bool {
	if m != nil && m.Bluetooth != nil {
		return *m.Bluetooth
	}
	return false
}

func (m *HardwareCapabilities) GetCarrier() HardwareCapabilities_Carrier {
	if m != nil && m.Carrier != nil {
		return *m.Carrier
	}
	return HardwareCapabilities_CARRIER_INVALID
}

func (m *HardwareCapabilities) GetDetachablebase() bool {
	if m != nil && m.Detachablebase != nil {
		return *m.Detachablebase
	}
	return false
}

func (m *HardwareCapabilities) GetFingerprint() bool {
	if m != nil && m.Fingerprint != nil {
		return *m.Fingerprint
	}
	return false
}

func (m *HardwareCapabilities) GetFlashrom() bool {
	if m != nil && m.Flashrom != nil {
		return *m.Flashrom
	}
	return false
}

func (m *HardwareCapabilities) GetGpuFamily() string {
	if m != nil && m.GpuFamily != nil {
		return *m.GpuFamily
	}
	return ""
}

func (m *HardwareCapabilities) GetGraphics() string {
	if m != nil && m.Graphics != nil {
		return *m.Graphics
	}
	return ""
}

func (m *HardwareCapabilities) GetHotwording() bool {
	if m != nil && m.Hotwording != nil {
		return *m.Hotwording
	}
	return false
}

func (m *HardwareCapabilities) GetInternalDisplay() bool {
	if m != nil && m.InternalDisplay != nil {
		return *m.InternalDisplay
	}
	return false
}

func (m *HardwareCapabilities) GetLucidsleep() bool {
	if m != nil && m.Lucidsleep != nil {
		return *m.Lucidsleep
	}
	return false
}

func (m *HardwareCapabilities) GetModem() string {
	if m != nil && m.Modem != nil {
		return *m.Modem
	}
	return ""
}

func (m *HardwareCapabilities) GetPower() string {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return ""
}

func (m *HardwareCapabilities) GetStorage() string {
	if m != nil && m.Storage != nil {
		return *m.Storage
	}
	return ""
}

func (m *HardwareCapabilities) GetTelephony() string {
	if m != nil && m.Telephony != nil {
		return *m.Telephony
	}
	return ""
}

func (m *HardwareCapabilities) GetWebcam() bool {
	if m != nil && m.Webcam != nil {
		return *m.Webcam
	}
	return false
}

func (m *HardwareCapabilities) GetTouchpad() bool {
	if m != nil && m.Touchpad != nil {
		return *m.Touchpad
	}
	return false
}

func (m *HardwareCapabilities) GetTouchscreen() bool {
	if m != nil && m.Touchscreen != nil {
		return *m.Touchscreen
	}
	return false
}

func (m *HardwareCapabilities) GetVideoAcceleration() []HardwareCapabilities_VideoAcceleration {
	if m != nil {
		return m.VideoAcceleration
	}
	return nil
}

// Peripherals list peripherals connected to the device in the lab.
//
// These peripherals are not addressable as devices themselves. For peripherals
// that have complex connections with devices, create a separate device and
// connections with other devices.
//
// Keep sorted by field names.
//
// NEXT TAG: 14
type Peripherals struct {
	AudioBoard *bool `protobuf:"varint,6,opt,name=audio_board,json=audioBoard" json:"audio_board,omitempty"`
	// The DUT is housed in an audio box to record / replay audio for audio
	// testing.
	AudioBox            *bool `protobuf:"varint,7,opt,name=audio_box,json=audioBox" json:"audio_box,omitempty"`
	AudioLoopbackDongle *bool `protobuf:"varint,1,opt,name=audio_loopback_dongle,json=audioLoopbackDongle" json:"audio_loopback_dongle,omitempty"`
	// Is this device connected to a chameleon (GVC head).
	Chameleon     *bool                       `protobuf:"varint,5,opt,name=chameleon" json:"chameleon,omitempty"`
	ChameleonType []Peripherals_ChameleonType `protobuf:"varint,10,rep,name=chameleon_type,json=chameleonType,enum=chrome.chromeos_infra.skylab.proto.inventory.Peripherals_ChameleonType" json:"chameleon_type,omitempty"`
	// Whether DUT WiFi antenna is connected conductively or OTA.
	Conductive *bool `protobuf:"varint,11,opt,name=conductive" json:"conductive,omitempty"`
	Huddly     *bool `protobuf:"varint,9,opt,name=huddly" json:"huddly,omitempty"`
	Mimo       *bool `protobuf:"varint,8,opt,name=mimo" json:"mimo,omitempty"`
	// Whether a DUT has a special camera (Logitech PTZ Pro 2) connected to it.
	Ptzpro2   *bool `protobuf:"varint,12,opt,name=ptzpro2" json:"ptzpro2,omitempty"`
	Servo     *bool `protobuf:"varint,2,opt,name=servo" json:"servo,omitempty"`
	Stylus    *bool `protobuf:"varint,3,opt,name=stylus" json:"stylus,omitempty"`
	Camerabox *bool `protobuf:"varint,13,opt,name=camerabox" json:"camerabox,omitempty"`
	// Is this device inside a hermetic wifi cell.
	Wificell             *bool    `protobuf:"varint,4,opt,name=wificell" json:"wificell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peripherals) Reset()         { *m = Peripherals{} }
func (m *Peripherals) String() string { return proto.CompactTextString(m) }
func (*Peripherals) ProtoMessage()    {}
func (*Peripherals) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{12}
}

func (m *Peripherals) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peripherals.Unmarshal(m, b)
}
func (m *Peripherals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peripherals.Marshal(b, m, deterministic)
}
func (m *Peripherals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peripherals.Merge(m, src)
}
func (m *Peripherals) XXX_Size() int {
	return xxx_messageInfo_Peripherals.Size(m)
}
func (m *Peripherals) XXX_DiscardUnknown() {
	xxx_messageInfo_Peripherals.DiscardUnknown(m)
}

var xxx_messageInfo_Peripherals proto.InternalMessageInfo

func (m *Peripherals) GetAudioBoard() bool {
	if m != nil && m.AudioBoard != nil {
		return *m.AudioBoard
	}
	return false
}

func (m *Peripherals) GetAudioBox() bool {
	if m != nil && m.AudioBox != nil {
		return *m.AudioBox
	}
	return false
}

func (m *Peripherals) GetAudioLoopbackDongle() bool {
	if m != nil && m.AudioLoopbackDongle != nil {
		return *m.AudioLoopbackDongle
	}
	return false
}

func (m *Peripherals) GetChameleon() bool {
	if m != nil && m.Chameleon != nil {
		return *m.Chameleon
	}
	return false
}

func (m *Peripherals) GetChameleonType() []Peripherals_ChameleonType {
	if m != nil {
		return m.ChameleonType
	}
	return nil
}

func (m *Peripherals) GetConductive() bool {
	if m != nil && m.Conductive != nil {
		return *m.Conductive
	}
	return false
}

func (m *Peripherals) GetHuddly() bool {
	if m != nil && m.Huddly != nil {
		return *m.Huddly
	}
	return false
}

func (m *Peripherals) GetMimo() bool {
	if m != nil && m.Mimo != nil {
		return *m.Mimo
	}
	return false
}

func (m *Peripherals) GetPtzpro2() bool {
	if m != nil && m.Ptzpro2 != nil {
		return *m.Ptzpro2
	}
	return false
}

func (m *Peripherals) GetServo() bool {
	if m != nil && m.Servo != nil {
		return *m.Servo
	}
	return false
}

func (m *Peripherals) GetStylus() bool {
	if m != nil && m.Stylus != nil {
		return *m.Stylus
	}
	return false
}

func (m *Peripherals) GetCamerabox() bool {
	if m != nil && m.Camerabox != nil {
		return *m.Camerabox
	}
	return false
}

func (m *Peripherals) GetWificell() bool {
	if m != nil && m.Wificell != nil {
		return *m.Wificell
	}
	return false
}

// These labels are used by the CI system to provide test coverage hints to
// Skylab.
//
// TODO(pprabhu) Most of these should instead be self-servo pools.
// Migrate the test requests to use pools and then deprecate these fields in
// favor of pools.
//
// Keep sorted by field name.
//
// NEXT TAG: 14
type TestCoverageHints struct {
	ChaosDut     *bool                         `protobuf:"varint,7,opt,name=chaos_dut,json=chaosDut" json:"chaos_dut,omitempty"`
	ChaosNightly *bool                         `protobuf:"varint,13,opt,name=chaos_nightly,json=chaosNightly" json:"chaos_nightly,omitempty"`
	Chromesign   *bool                         `protobuf:"varint,11,opt,name=chromesign" json:"chromesign,omitempty"`
	CtsSparse    []TestCoverageHints_CTSSparse `protobuf:"varint,1,rep,name=cts_sparse,json=ctsSparse,enum=chrome.chromeos_infra.skylab.proto.inventory.TestCoverageHints_CTSSparse" json:"cts_sparse,omitempty"`
	// Whether the DUT has the hangout app installed.
	// This is a software feature of the DUT that is not provisioned as part of
	// the test setup, hence the DUT must be labelled explicitly as supporting
	// this feature.  Should probably be a SoftwareFeature for the DUT.
	HangoutApp *bool `protobuf:"varint,9,opt,name=hangout_app,json=hangoutApp" json:"hangout_app,omitempty"`
	// Whether the DUT has the meet app installed.
	// This is a software feature of the DUT that is not provisioned as part of
	// the test setup, hence the DUT must be labelled explicitly as supporting
	// this feature.  Should probably be a SoftwareFeature for the DUT.
	MeetApp              *bool    `protobuf:"varint,10,opt,name=meet_app,json=meetApp" json:"meet_app,omitempty"`
	RecoveryTest         *bool    `protobuf:"varint,8,opt,name=recovery_test,json=recoveryTest" json:"recovery_test,omitempty"`
	TestAudiojack        *bool    `protobuf:"varint,3,opt,name=test_audiojack,json=testAudiojack" json:"test_audiojack,omitempty"`
	TestHdmiaudio        *bool    `protobuf:"varint,2,opt,name=test_hdmiaudio,json=testHdmiaudio" json:"test_hdmiaudio,omitempty"`
	TestUsbaudio         *bool    `protobuf:"varint,4,opt,name=test_usbaudio,json=testUsbaudio" json:"test_usbaudio,omitempty"`
	TestUsbprinting      *bool    `protobuf:"varint,5,opt,name=test_usbprinting,json=testUsbprinting" json:"test_usbprinting,omitempty"`
	UsbDetect            *bool    `protobuf:"varint,6,opt,name=usb_detect,json=usbDetect" json:"usb_detect,omitempty"`
	UseLid               *bool    `protobuf:"varint,12,opt,name=use_lid,json=useLid" json:"use_lid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestCoverageHints) Reset()         { *m = TestCoverageHints{} }
func (m *TestCoverageHints) String() string { return proto.CompactTextString(m) }
func (*TestCoverageHints) ProtoMessage()    {}
func (*TestCoverageHints) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{13}
}

func (m *TestCoverageHints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestCoverageHints.Unmarshal(m, b)
}
func (m *TestCoverageHints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestCoverageHints.Marshal(b, m, deterministic)
}
func (m *TestCoverageHints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCoverageHints.Merge(m, src)
}
func (m *TestCoverageHints) XXX_Size() int {
	return xxx_messageInfo_TestCoverageHints.Size(m)
}
func (m *TestCoverageHints) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCoverageHints.DiscardUnknown(m)
}

var xxx_messageInfo_TestCoverageHints proto.InternalMessageInfo

func (m *TestCoverageHints) GetChaosDut() bool {
	if m != nil && m.ChaosDut != nil {
		return *m.ChaosDut
	}
	return false
}

func (m *TestCoverageHints) GetChaosNightly() bool {
	if m != nil && m.ChaosNightly != nil {
		return *m.ChaosNightly
	}
	return false
}

func (m *TestCoverageHints) GetChromesign() bool {
	if m != nil && m.Chromesign != nil {
		return *m.Chromesign
	}
	return false
}

func (m *TestCoverageHints) GetCtsSparse() []TestCoverageHints_CTSSparse {
	if m != nil {
		return m.CtsSparse
	}
	return nil
}

func (m *TestCoverageHints) GetHangoutApp() bool {
	if m != nil && m.HangoutApp != nil {
		return *m.HangoutApp
	}
	return false
}

func (m *TestCoverageHints) GetMeetApp() bool {
	if m != nil && m.MeetApp != nil {
		return *m.MeetApp
	}
	return false
}

func (m *TestCoverageHints) GetRecoveryTest() bool {
	if m != nil && m.RecoveryTest != nil {
		return *m.RecoveryTest
	}
	return false
}

func (m *TestCoverageHints) GetTestAudiojack() bool {
	if m != nil && m.TestAudiojack != nil {
		return *m.TestAudiojack
	}
	return false
}

func (m *TestCoverageHints) GetTestHdmiaudio() bool {
	if m != nil && m.TestHdmiaudio != nil {
		return *m.TestHdmiaudio
	}
	return false
}

func (m *TestCoverageHints) GetTestUsbaudio() bool {
	if m != nil && m.TestUsbaudio != nil {
		return *m.TestUsbaudio
	}
	return false
}

func (m *TestCoverageHints) GetTestUsbprinting() bool {
	if m != nil && m.TestUsbprinting != nil {
		return *m.TestUsbprinting
	}
	return false
}

func (m *TestCoverageHints) GetUsbDetect() bool {
	if m != nil && m.UsbDetect != nil {
		return *m.UsbDetect
	}
	return false
}

func (m *TestCoverageHints) GetUseLid() bool {
	if m != nil && m.UseLid != nil {
		return *m.UseLid
	}
	return false
}

// NEXT TAG: 3
type KeyValue struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{14}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_CR50_Phase", SchedulableLabels_CR50_Phase_name, SchedulableLabels_CR50_Phase_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_DUTPool", SchedulableLabels_DUTPool_name, SchedulableLabels_DUTPool_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_CTSABI", SchedulableLabels_CTSABI_name, SchedulableLabels_CTSABI_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_CTSCPU", SchedulableLabels_CTSCPU_name, SchedulableLabels_CTSCPU_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_ECType", SchedulableLabels_ECType_name, SchedulableLabels_ECType_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_OSType", SchedulableLabels_OSType_name, SchedulableLabels_OSType_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels_Phase", SchedulableLabels_Phase_name, SchedulableLabels_Phase_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.HardwareCapabilities_Carrier", HardwareCapabilities_Carrier_name, HardwareCapabilities_Carrier_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.HardwareCapabilities_VideoAcceleration", HardwareCapabilities_VideoAcceleration_name, HardwareCapabilities_VideoAcceleration_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.Peripherals_ChameleonType", Peripherals_ChameleonType_name, Peripherals_ChameleonType_value)
	proto.RegisterEnum("chrome.chromeos_infra.skylab.proto.inventory.TestCoverageHints_CTSSparse", TestCoverageHints_CTSSparse_name, TestCoverageHints_CTSSparse_value)
	proto.RegisterType((*Device)(nil), "chrome.chromeos_infra.skylab.proto.inventory.Device")
	proto.RegisterType((*DeviceUnderTest)(nil), "chrome.chromeos_infra.skylab.proto.inventory.DeviceUnderTest")
	proto.RegisterType((*ServoHostDevice)(nil), "chrome.chromeos_infra.skylab.proto.inventory.ServoHostDevice")
	proto.RegisterType((*ChameleonDevice)(nil), "chrome.chromeos_infra.skylab.proto.inventory.ChameleonDevice")
	proto.RegisterType((*CommonDeviceSpecs)(nil), "chrome.chromeos_infra.skylab.proto.inventory.CommonDeviceSpecs")
	proto.RegisterType((*RemovalReason)(nil), "chrome.chromeos_infra.skylab.proto.inventory.RemovalReason")
	proto.RegisterType((*Location)(nil), "chrome.chromeos_infra.skylab.proto.inventory.Location")
	proto.RegisterType((*PhysicalLab)(nil), "chrome.chromeos_infra.skylab.proto.inventory.PhysicalLab")
	proto.RegisterType((*DeviceLock)(nil), "chrome.chromeos_infra.skylab.proto.inventory.DeviceLock")
	proto.RegisterType((*Shard)(nil), "chrome.chromeos_infra.skylab.proto.inventory.Shard")
	proto.RegisterType((*SchedulableLabels)(nil), "chrome.chromeos_infra.skylab.proto.inventory.SchedulableLabels")
	proto.RegisterType((*HardwareCapabilities)(nil), "chrome.chromeos_infra.skylab.proto.inventory.HardwareCapabilities")
	proto.RegisterType((*Peripherals)(nil), "chrome.chromeos_infra.skylab.proto.inventory.Peripherals")
	proto.RegisterType((*TestCoverageHints)(nil), "chrome.chromeos_infra.skylab.proto.inventory.TestCoverageHints")
	proto.RegisterType((*KeyValue)(nil), "chrome.chromeos_infra.skylab.proto.inventory.KeyValue")
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 2606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xdb, 0x6e, 0xeb, 0xc6,
	0xd5, 0x8e, 0xce, 0xd4, 0x92, 0x25, 0xd3, 0xb3, 0x4f, 0xdc, 0x87, 0x24, 0xfe, 0xb5, 0x91, 0xc0,
	0x3f, 0xf0, 0xc3, 0x08, 0x94, 0xc3, 0x9f, 0xa0, 0x28, 0x02, 0x9d, 0x12, 0x2b, 0x5b, 0xb6, 0x94,
	0x11, 0xa5, 0xe6, 0x80, 0x96, 0xa0, 0xc8, 0xb1, 0xc5, 0x98, 0x22, 0x09, 0x0e, 0x69, 0x45, 0xbd,
	0x6d, 0xd1, 0x5e, 0xf7, 0xa2, 0xe8, 0x0b, 0xf4, 0xa6, 0x6f, 0xd0, 0xdb, 0x5e, 0x17, 0xed, 0x53,
	0xf4, 0x05, 0xfa, 0x06, 0xc5, 0x9a, 0x21, 0x25, 0x5a, 0x76, 0x0a, 0x78, 0x3b, 0xb9, 0xd2, 0xac,
	0x6f, 0xcd, 0x7c, 0x33, 0xb3, 0x66, 0xad, 0x35, 0x6b, 0x28, 0xd8, 0xb3, 0xd9, 0x95, 0x63, 0xb1,
	0xe3, 0x20, 0xf4, 0x23, 0x9f, 0xfc, 0x9f, 0xb5, 0x08, 0xfd, 0x25, 0x3b, 0x96, 0x3f, 0x3e, 0x37,
	0x1c, 0xef, 0x3c, 0x34, 0x8f, 0xf9, 0xe5, 0xda, 0x35, 0xe7, 0xb2, 0xcf, 0xb1, 0xe3, 0x5d, 0x31,
	0x2f, 0xf2, 0xc3, 0xf5, 0xb3, 0x3d, 0xcb, 0x5f, 0x2e, 0x7d, 0x4f, 0xe2, 0xcd, 0x3f, 0xe7, 0xa1,
	0xdc, 0x13, 0x64, 0xe4, 0x4b, 0x28, 0xd8, 0x71, 0xa4, 0xe5, 0x0e, 0x73, 0x47, 0xb5, 0xd6, 0xcf,
	0x8f, 0xef, 0x42, 0x7a, 0x2c, 0x29, 0xa6, 0x9e, 0xcd, 0x42, 0x9d, 0xf1, 0xe8, 0xe4, 0x0d, 0x8a,
	0x5c, 0xe4, 0x57, 0x00, 0x9c, 0x85, 0x57, 0xbe, 0xb1, 0xf0, 0x79, 0xa4, 0xe5, 0x5f, 0x87, 0x79,
	0x82, 0xe3, 0x4f, 0x7c, 0x1e, 0xc9, 0x29, 0x4e, 0xde, 0xa0, 0x55, 0x9e, 0x42, 0xe4, 0x97, 0x50,
	0xb5, 0x16, 0xe6, 0x92, 0xb9, 0xcc, 0xf7, 0xb4, 0xc2, 0xeb, 0xd0, 0x77, 0xd3, 0xe1, 0x5b, 0xfa,
	0x0d, 0x63, 0x47, 0x81, 0xb2, 0x34, 0x74, 0xf3, 0x9f, 0x39, 0xd8, 0xdf, 0xd9, 0x23, 0xf9, 0x05,
	0x94, 0xa5, 0x29, 0xb5, 0xdc, 0x61, 0xfe, 0xa8, 0xd6, 0xfa, 0xf4, 0x8e, 0x33, 0x8b, 0xb1, 0x92,
	0x74, 0x12, 0x30, 0x8b, 0xd3, 0x84, 0x8e, 0xcc, 0xa1, 0x11, 0xb2, 0xa5, 0x7f, 0x65, 0xba, 0x46,
	0xc8, 0x4c, 0xee, 0x7b, 0x89, 0xe5, 0x7e, 0x76, 0xb7, 0x09, 0xa8, 0xe4, 0xa0, 0x82, 0x82, 0xd6,
	0xc3, 0xac, 0xd8, 0xfc, 0x6d, 0x0e, 0xf6, 0x77, 0x4c, 0xfb, 0xd3, 0x6d, 0x48, 0x83, 0xca, 0x15,
	0x0b, 0xb9, 0x93, 0xec, 0xa4, 0x4a, 0x53, 0xb1, 0xf9, 0x1d, 0xec, 0xef, 0x9c, 0xc0, 0x4f, 0xb6,
	0x8a, 0xe6, 0x5f, 0x4b, 0x70, 0x70, 0x43, 0x4b, 0x66, 0x00, 0x66, 0x14, 0x85, 0xce, 0x3c, 0x8e,
	0x18, 0xd7, 0xaa, 0x87, 0x85, 0xa3, 0x5a, 0xeb, 0xa3, 0xbb, 0x4d, 0xf9, 0x8a, 0xad, 0x67, 0xa6,
	0x1b, 0x33, 0x9a, 0x61, 0x22, 0xdf, 0xa6, 0x41, 0x6a, 0xb8, 0xbe, 0x75, 0xc9, 0xb5, 0xb2, 0x60,
	0xfe, 0xf8, 0x75, 0xc2, 0x6a, 0xe8, 0x5b, 0x97, 0xb4, 0x66, 0x6f, 0xda, 0x48, 0x5e, 0x63, 0xde,
	0x95, 0x13, 0xfa, 0xde, 0x92, 0x79, 0x91, 0x06, 0x87, 0xb9, 0xa3, 0x46, 0xeb, 0x93, 0xbb, 0x71,
	0xf7, 0xb7, 0x04, 0x34, 0xcb, 0x46, 0x9e, 0x81, 0x82, 0xe1, 0xea, 0x99, 0x4b, 0xa6, 0xe5, 0x0f,
	0xf3, 0x47, 0x55, 0xba, 0x91, 0x09, 0x81, 0xe2, 0x62, 0xe5, 0xd8, 0x22, 0xd6, 0xaa, 0x54, 0xb4,
	0x49, 0x03, 0xf2, 0x8e, 0x2d, 0x0e, 0xab, 0x4a, 0xf3, 0x8e, 0x8d, 0x07, 0xe8, 0x9a, 0x73, 0xe6,
	0x72, 0x4d, 0x11, 0x6e, 0x7b, 0xc7, 0x03, 0x9c, 0x58, 0x0b, 0x66, 0xc7, 0xae, 0x39, 0x77, 0xd9,
	0x50, 0xd0, 0xd0, 0x84, 0x8e, 0x50, 0x50, 0x5c, 0xdf, 0x32, 0x23, 0xf4, 0xa3, 0x92, 0xa0, 0xbe,
	0xe3, 0x41, 0x0d, 0x93, 0xd1, 0x74, 0xc3, 0x43, 0xbe, 0x82, 0x9a, 0xbf, 0xf2, 0x58, 0x68, 0xf0,
	0x85, 0x19, 0xda, 0x5a, 0x45, 0xd0, 0xbe, 0x7f, 0xc7, 0x15, 0xe3, 0xd0, 0x4e, 0x5e, 0xcb, 0x51,
	0x10, 0x5c, 0x42, 0x26, 0x2f, 0xa1, 0xce, 0x59, 0xe8, 0x98, 0xae, 0xe1, 0xc5, 0xcb, 0x39, 0x0b,
	0xb5, 0xa2, 0xb0, 0xd9, 0x9e, 0x04, 0xcf, 0x04, 0x46, 0xde, 0x81, 0x46, 0xcc, 0x99, 0xcb, 0x38,
	0x37, 0xf8, 0xca, 0x89, 0xac, 0x85, 0x56, 0x3b, 0xcc, 0x1d, 0x29, 0xb4, 0x9e, 0xa0, 0x13, 0x01,
	0x36, 0xff, 0x98, 0x83, 0xfa, 0xb5, 0x70, 0x26, 0x2a, 0x14, 0xe6, 0xf1, 0x85, 0x48, 0xd6, 0x55,
	0x8a, 0x4d, 0x0c, 0x32, 0x74, 0x74, 0xf4, 0x87, 0x24, 0xc8, 0x12, 0x11, 0xf7, 0xc8, 0xbe, 0x0f,
	0x9c, 0x90, 0x19, 0x91, 0xb3, 0x64, 0x49, 0x9e, 0xfc, 0xff, 0xbb, 0xed, 0x51, 0x77, 0x96, 0x8c,
	0x47, 0xe6, 0x32, 0xa0, 0x20, 0xb9, 0x10, 0x68, 0xfe, 0x21, 0x07, 0x4a, 0x6a, 0x54, 0xf2, 0x0a,
	0x0a, 0xae, 0x39, 0x4f, 0xa2, 0xf6, 0x8e, 0xce, 0x38, 0x5e, 0xac, 0xb9, 0x63, 0x99, 0xee, 0xd0,
	0x9c, 0x53, 0x64, 0xc1, 0xfd, 0x85, 0xfe, 0x4a, 0xf8, 0x5f, 0x89, 0x62, 0x13, 0x5d, 0x2f, 0x34,
	0xad, 0x4b, 0xad, 0x20, 0x20, 0xd1, 0x16, 0xee, 0x88, 0x37, 0x4b, 0x51, 0x62, 0xd8, 0x6e, 0xfe,
	0x0f, 0xd4, 0x32, 0x6c, 0xd8, 0x45, 0x78, 0xb2, 0xf4, 0x4f, 0xd1, 0x6e, 0xfe, 0x2d, 0x0f, 0xb0,
	0x0d, 0x2d, 0xf2, 0x18, 0x8a, 0x18, 0xa3, 0xa2, 0x8b, 0x22, 0xce, 0x51, 0xc8, 0xe4, 0x39, 0x54,
	0xf1, 0x97, 0xd9, 0xc6, 0x7c, 0x9d, 0x46, 0x82, 0x04, 0x3a, 0x6b, 0xf2, 0x36, 0xd4, 0xb0, 0x9d,
	0x66, 0xe8, 0x82, 0x50, 0x03, 0x42, 0xc9, 0x09, 0xcd, 0x00, 0xe6, 0xec, 0xc2, 0xf1, 0xa4, 0xd1,
	0x8b, 0xc2, 0x2a, 0xaf, 0x6d, 0xf4, 0xaa, 0xa0, 0x42, 0x79, 0xf7, 0x34, 0x4b, 0xf7, 0x23, 0xce,
	0x9c, 0x26, 0x79, 0x0e, 0x15, 0xb1, 0x25, 0xc7, 0xd6, 0xca, 0x68, 0x50, 0x61, 0x8a, 0x32, 0x42,
	0x83, 0x34, 0xca, 0x2b, 0x69, 0x94, 0x37, 0x5f, 0x42, 0x49, 0xfa, 0x79, 0x36, 0x5d, 0xe4, 0xae,
	0xa7, 0x8b, 0xe6, 0xdf, 0x0f, 0xe0, 0xe0, 0x46, 0x3c, 0xe3, 0xd9, 0x9a, 0xa1, 0xa5, 0x3d, 0x14,
	0x9e, 0x8e, 0x4d, 0xf2, 0x10, 0x4a, 0x73, 0x1f, 0xe3, 0x4f, 0x7a, 0xae, 0x14, 0x04, 0x1a, 0x9a,
	0x9e, 0xad, 0x3d, 0x4b, 0x50, 0x14, 0xc8, 0x39, 0xec, 0x59, 0x66, 0x60, 0xce, 0x1d, 0xd7, 0x89,
	0x1c, 0xc6, 0x93, 0x4c, 0xd0, 0xb9, 0x9b, 0x01, 0x4e, 0xcc, 0xd0, 0x5e, 0x99, 0x21, 0xeb, 0x66,
	0x98, 0xe8, 0x35, 0x5e, 0xe2, 0x00, 0x58, 0xe1, 0x87, 0xef, 0x19, 0xc1, 0xc2, 0xe4, 0x4c, 0x7b,
	0x2c, 0x52, 0xec, 0x17, 0xf7, 0x4c, 0x65, 0xc7, 0x5d, 0xfa, 0xe1, 0x7b, 0xc6, 0x18, 0x19, 0x69,
	0x15, 0xd9, 0x45, 0x93, 0x34, 0xa1, 0x2e, 0xa6, 0x0a, 0x7d, 0xe3, 0x92, 0xad, 0x1d, 0x5b, 0x7b,
	0x21, 0x36, 0x5c, 0x43, 0x90, 0xfa, 0xaf, 0x10, 0x22, 0xef, 0xc2, 0x7e, 0xda, 0x27, 0xbd, 0x4b,
	0xdf, 0x14, 0xbd, 0xea, 0xb2, 0xd7, 0x4c, 0x82, 0x5b, 0xae, 0x55, 0xc2, 0xf5, 0x56, 0x86, 0x6b,
	0xb5, 0xc3, 0xb5, 0xda, 0x70, 0xbd, 0x9d, 0xe1, 0x5a, 0xa5, 0x5c, 0x1e, 0x34, 0xac, 0xd0, 0x89,
	0x30, 0x94, 0x8c, 0xc0, 0xf7, 0x5d, 0xae, 0x15, 0x0e, 0x0b, 0x47, 0x8d, 0xd6, 0xe7, 0xf7, 0x35,
	0x43, 0x6f, 0xaa, 0x8f, 0x7d, 0xdf, 0xc5, 0xf9, 0x24, 0x3d, 0x4a, 0x9c, 0x18, 0x50, 0xb1, 0x22,
	0x6e, 0x98, 0x73, 0x47, 0x6b, 0x88, 0x89, 0x3e, 0xbb, 0xb7, 0xbd, 0xf5, 0x49, 0xbb, 0x33, 0xa0,
	0x65, 0x2b, 0xe2, 0xed, 0xb9, 0x93, 0x4e, 0x60, 0x05, 0xb1, 0xf6, 0xe8, 0x47, 0x9b, 0xa0, 0x3b,
	0x9e, 0x8a, 0x09, 0xba, 0x41, 0x8c, 0x13, 0x30, 0xcb, 0x88, 0xd6, 0x01, 0x4b, 0x2e, 0xe5, 0x7b,
	0x4f, 0xd0, 0xef, 0xea, 0xeb, 0x80, 0xd1, 0x32, 0xb3, 0xf0, 0x97, 0x3c, 0x05, 0x05, 0x2f, 0x5d,
	0x83, 0x5f, 0xc6, 0xda, 0x73, 0x99, 0xe6, 0x51, 0x9e, 0x5c, 0xc6, 0x18, 0x2e, 0x4b, 0xdf, 0x66,
	0xae, 0x56, 0x97, 0xe1, 0x22, 0x04, 0x0c, 0x36, 0xec, 0xfb, 0x54, 0x5e, 0x14, 0xfc, 0x52, 0xac,
	0xd1, 0xe7, 0x72, 0x8d, 0xfb, 0x3f, 0xce, 0x1a, 0x47, 0x13, 0xb9, 0x46, 0x9f, 0x8b, 0x35, 0x7e,
	0x0b, 0xb5, 0x80, 0x85, 0x4e, 0xb0, 0x60, 0xa1, 0xe9, 0x72, 0xed, 0x81, 0x08, 0xd0, 0xbb, 0x5e,
	0x08, 0x5b, 0x02, 0x9a, 0x65, 0x23, 0xdf, 0x42, 0x49, 0x46, 0xa4, 0x2a, 0xd6, 0xde, 0xbf, 0xef,
	0xda, 0x65, 0x30, 0x4a, 0x4e, 0xcc, 0x65, 0x81, 0x6b, 0x46, 0xe7, 0x7e, 0xb8, 0x4c, 0xae, 0xd6,
	0x8d, 0x4c, 0xfe, 0x17, 0xd4, 0x90, 0x9d, 0xb3, 0x90, 0x79, 0x16, 0x33, 0x6c, 0xc6, 0x9d, 0x0b,
	0x4f, 0xd3, 0x44, 0x9f, 0xfd, 0x0d, 0xde, 0x13, 0x30, 0x39, 0x02, 0x95, 0x33, 0xf7, 0xdc, 0xc0,
	0x87, 0x0a, 0x4b, 0x22, 0xa7, 0x78, 0x58, 0x38, 0xaa, 0xd2, 0x06, 0xe2, 0x58, 0x77, 0x33, 0xe9,
	0xf1, 0x3e, 0x3c, 0x88, 0x18, 0x8f, 0x0c, 0xcb, 0xbf, 0x62, 0xa1, 0x79, 0xc1, 0x8c, 0x85, 0xe3,
	0x45, 0x5c, 0x23, 0xaf, 0x53, 0x38, 0xe1, 0xa3, 0xa4, 0x9b, 0xf0, 0x9c, 0x20, 0x0d, 0x3d, 0x88,
	0x76, 0xa1, 0x5b, 0x0a, 0x8e, 0x27, 0xb7, 0x14, 0x1c, 0xa2, 0x62, 0x37, 0x43, 0xc7, 0xf4, 0x22,
	0xed, 0x40, 0x2c, 0x3c, 0x15, 0x9b, 0x23, 0x80, 0x6d, 0x12, 0x23, 0x8f, 0x81, 0x48, 0xe9, 0xa4,
	0x3d, 0xe9, 0x1b, 0x83, 0xb3, 0x59, 0x7b, 0x38, 0xe8, 0xa9, 0x6f, 0x90, 0x47, 0x70, 0x90, 0xc1,
	0xc7, 0xb4, 0x3f, 0x9e, 0xe9, 0x6a, 0x8e, 0x10, 0x68, 0x64, 0xe1, 0x99, 0xae, 0xe6, 0x9b, 0xff,
	0xc8, 0x41, 0x25, 0xc9, 0x07, 0xe4, 0x21, 0xa8, 0xbd, 0xa9, 0x6e, 0x8c, 0x47, 0xa3, 0x61, 0x86,
	0x6c, 0x1f, 0x6a, 0x1b, 0xb4, 0xfb, 0xa5, 0x9a, 0x23, 0x2a, 0xec, 0x6d, 0x80, 0x0e, 0x92, 0x90,
	0x07, 0xb0, 0xbf, 0x41, 0x26, 0xd3, 0x81, 0xde, 0x9f, 0xa8, 0x85, 0x6b, 0xdd, 0xba, 0xfa, 0x44,
	0x2d, 0x92, 0xa7, 0xf0, 0x28, 0x8b, 0x18, 0xe3, 0x3e, 0xed, 0x4c, 0x07, 0xc3, 0x9e, 0x5a, 0x22,
	0x4f, 0xe0, 0xc1, 0x56, 0x35, 0x3a, 0xd3, 0x07, 0x67, 0xd3, 0xd1, 0x74, 0xa2, 0x96, 0xc9, 0x33,
	0x78, 0xbc, 0x51, 0xb4, 0x69, 0x17, 0x37, 0x33, 0x99, 0x76, 0x4e, 0x07, 0xba, 0x5a, 0xc1, 0xfd,
	0x6c, 0x74, 0x5f, 0x4e, 0x47, 0x7a, 0x5b, 0x55, 0x9a, 0x9f, 0x42, 0x59, 0x66, 0x1d, 0x5c, 0x14,
	0x4e, 0xd2, 0xee, 0x0c, 0xae, 0x6f, 0x26, 0x05, 0xdb, 0xf4, 0x54, 0xcd, 0x65, 0x81, 0xaf, 0x3e,
	0xfe, 0x48, 0xcd, 0x27, 0x04, 0xdd, 0xf1, 0x34, 0x25, 0xe8, 0x8e, 0xa7, 0x37, 0x09, 0x10, 0xbc,
	0x46, 0x80, 0x80, 0x24, 0xf8, 0x00, 0xca, 0x32, 0x6b, 0x20, 0x41, 0xbf, 0x6b, 0xe8, 0x5f, 0x8f,
	0x77, 0xce, 0x26, 0x05, 0xbb, 0x27, 0x74, 0x74, 0xda, 0x37, 0x46, 0x13, 0x35, 0xd7, 0xfc, 0x7d,
	0x0e, 0xca, 0x32, 0x90, 0x71, 0xd8, 0x68, 0xb2, 0x3b, 0x2c, 0x03, 0xb6, 0xcf, 0x7a, 0x74, 0x34,
	0xe8, 0xc9, 0x93, 0x48, 0xc1, 0x2e, 0x1d, 0x4d, 0xd4, 0x3c, 0xb2, 0xa7, 0xc8, 0x17, 0x7d, 0x7d,
	0xa2, 0xd3, 0x7e, 0xfb, 0x54, 0x2d, 0xa0, 0xa5, 0x52, 0xf8, 0x74, 0xd4, 0x19, 0xb6, 0x3b, 0x6a,
	0x11, 0x9d, 0x27, 0xc5, 0x86, 0xed, 0xce, 0x44, 0x6f, 0xeb, 0x83, 0xd1, 0x99, 0x5a, 0xc2, 0x6a,
	0xb7, 0x24, 0xdd, 0xeb, 0x00, 0xea, 0xbb, 0x9e, 0x55, 0x87, 0xaa, 0x84, 0xfa, 0xc2, 0xa3, 0x1a,
	0x00, 0x1b, 0xb1, 0xa5, 0xe6, 0xb7, 0xea, 0xde, 0x4c, 0x57, 0x0b, 0x5b, 0x75, 0x0f, 0xd5, 0xc5,
	0xad, 0x1a, 0x7d, 0xaf, 0xb4, 0x55, 0x8f, 0x51, 0x5d, 0xbe, 0x26, 0xbf, 0xaf, 0x56, 0xc8, 0x1e,
	0x28, 0x52, 0x3e, 0x1d, 0xab, 0x4a, 0xf3, 0x4f, 0x55, 0x78, 0x78, 0x5b, 0xe1, 0x80, 0x99, 0xd7,
	0x8c, 0xc2, 0x98, 0x6b, 0x07, 0x22, 0x96, 0xa4, 0x40, 0x5e, 0x40, 0x75, 0xee, 0xc6, 0x2c, 0xf2,
	0xfd, 0x68, 0x21, 0x1e, 0x16, 0x0a, 0xdd, 0x02, 0xc4, 0x86, 0x8a, 0x65, 0x86, 0xa1, 0xc3, 0xc2,
	0x24, 0x93, 0x7d, 0x71, 0xff, 0x0a, 0xe6, 0xb8, 0x2b, 0x19, 0x69, 0x4a, 0x4d, 0xde, 0x85, 0x86,
	0xcd, 0x22, 0xd3, 0x5a, 0x60, 0xc6, 0x9b, 0x63, 0xda, 0xdc, 0x13, 0x0b, 0xd9, 0x41, 0xc9, 0x21,
	0xd4, 0xce, 0x1d, 0xef, 0x82, 0x85, 0x41, 0xe8, 0x78, 0x91, 0x48, 0xd9, 0x0a, 0xcd, 0x42, 0x98,
	0x1a, 0xcf, 0x5d, 0x93, 0xe3, 0xda, 0xb4, 0x86, 0x50, 0x6f, 0x64, 0xf2, 0x26, 0xc0, 0x45, 0x10,
	0x1b, 0xe7, 0xe6, 0xd2, 0x71, 0xd7, 0xc9, 0xdb, 0xb0, 0x7a, 0x11, 0xc4, 0x9f, 0x09, 0x00, 0x87,
	0x5e, 0x84, 0x66, 0xb0, 0x70, 0x2c, 0x9e, 0x3c, 0x82, 0x36, 0x32, 0x79, 0x0b, 0x60, 0xe1, 0x47,
	0x2b, 0x3f, 0xb4, 0x1d, 0xef, 0x42, 0xdc, 0x47, 0x0a, 0xcd, 0x20, 0x98, 0x75, 0x1d, 0x2f, 0x62,
	0xa1, 0x67, 0xba, 0x86, 0xed, 0xf0, 0xc0, 0x35, 0xd7, 0xe2, 0x59, 0xa9, 0xd0, 0xfd, 0x14, 0xef,
	0x49, 0x18, 0xa9, 0xdc, 0xd8, 0x72, 0x6c, 0xee, 0x32, 0x16, 0x88, 0x4b, 0x50, 0xa1, 0x19, 0x24,
	0xbd, 0x1f, 0xd3, 0xcc, 0x2e, 0x05, 0x44, 0x03, 0x7f, 0xc5, 0x42, 0xad, 0x2c, 0x51, 0x21, 0x60,
	0xfe, 0xe3, 0x91, 0x8f, 0x69, 0x53, 0xd4, 0x97, 0x55, 0x9a, 0x8a, 0x78, 0xaa, 0x11, 0x73, 0x59,
	0xb0, 0xf0, 0xbd, 0x75, 0x52, 0xae, 0x6e, 0x01, 0xf2, 0x18, 0xca, 0x2b, 0x36, 0xb7, 0xcc, 0xa5,
	0x56, 0x15, 0xf3, 0x27, 0x12, 0x9a, 0x20, 0xf2, 0x63, 0x6b, 0x11, 0x98, 0xb6, 0x28, 0x0c, 0x14,
	0xba, 0x91, 0xd1, 0xf6, 0xa2, 0xcd, 0xad, 0x90, 0x31, 0x4f, 0xe4, 0x7e, 0x85, 0x66, 0x21, 0xf2,
	0x9b, 0x1c, 0x90, 0x2b, 0xc7, 0x66, 0xbe, 0x61, 0x5a, 0x16, 0x73, 0x59, 0x28, 0xdf, 0xc0, 0x35,
	0x51, 0xc2, 0xe8, 0x3f, 0x82, 0xdf, 0xcc, 0x90, 0xbc, 0x9d, 0xe1, 0xa6, 0x07, 0x57, 0xbb, 0x50,
	0x73, 0x09, 0x95, 0xc4, 0xbf, 0x44, 0x62, 0x6a, 0x53, 0x3a, 0xe8, 0xd3, 0x9d, 0xc4, 0x94, 0x80,
	0x6d, 0x1d, 0x63, 0x33, 0xd3, 0x4b, 0x3f, 0x1d, 0x75, 0x06, 0xc3, 0xbe, 0xcc, 0xd4, 0x29, 0x38,
	0xeb, 0xd3, 0xc1, 0x37, 0xa3, 0x33, 0x99, 0x1d, 0x52, 0x70, 0x32, 0xa6, 0x83, 0x33, 0x5d, 0x2d,
	0x36, 0xff, 0x92, 0x87, 0x83, 0x1b, 0xeb, 0x22, 0x6f, 0xc1, 0xb3, 0xd9, 0xa0, 0xd7, 0x1f, 0x19,
	0xed, 0x6e, 0xb7, 0x3f, 0xec, 0x53, 0x91, 0x33, 0x32, 0x8b, 0x78, 0x0e, 0x4f, 0x6e, 0xd1, 0x9f,
	0xb4, 0x3e, 0xfa, 0x40, 0xcd, 0x91, 0xb7, 0xe1, 0xf9, 0x2d, 0xca, 0xfe, 0x59, 0x57, 0x76, 0xc8,
	0x63, 0xae, 0xbf, 0xa5, 0xc3, 0x6c, 0xfc, 0xb1, 0x5a, 0xf8, 0x81, 0x99, 0x71, 0x30, 0xea, 0x8b,
	0x3f, 0x38, 0xf6, 0x13, 0xb5, 0xf4, 0x5f, 0xc7, 0x7e, 0xa2, 0x96, 0xc9, 0x0b, 0xd0, 0x6e, 0x1f,
	0x6b, 0xb4, 0xd4, 0x0a, 0x39, 0x84, 0x17, 0x3f, 0x3c, 0xda, 0x68, 0xa9, 0x4a, 0xf3, 0x5f, 0x25,
	0xa8, 0x65, 0x2a, 0x26, 0x7c, 0x9c, 0x9a, 0xb1, 0xed, 0xf8, 0x86, 0x7c, 0x55, 0x95, 0x65, 0x2c,
	0x08, 0xa8, 0x23, 0x9e, 0x56, 0xcf, 0xa1, 0x9a, 0x76, 0xf8, 0x3e, 0xc9, 0x4d, 0x4a, 0xa2, 0xfe,
	0x9e, 0xb4, 0xe0, 0x91, 0x54, 0xba, 0xbe, 0x1f, 0xcc, 0x4d, 0xeb, 0xd2, 0xb0, 0x7d, 0xef, 0xc2,
	0x65, 0x22, 0x70, 0x14, 0xfa, 0x40, 0x28, 0x87, 0x89, 0xae, 0x27, 0x54, 0x18, 0x16, 0xdb, 0x2f,
	0xb1, 0x25, 0x99, 0xec, 0x36, 0x80, 0x78, 0x48, 0xa4, 0x42, 0x5a, 0x1d, 0xbf, 0xc6, 0x43, 0x22,
	0xb3, 0xc5, 0xed, 0x87, 0x5b, 0x51, 0x7a, 0xd6, 0xad, 0xac, 0x88, 0xa9, 0xc0, 0xf2, 0x3d, 0x3b,
	0xb6, 0x22, 0xe7, 0x8a, 0x25, 0x9f, 0x54, 0x32, 0x08, 0x86, 0xe9, 0x22, 0xb6, 0x6d, 0x77, 0x9d,
	0x86, 0xa9, 0x94, 0x08, 0x81, 0xe2, 0xd2, 0x59, 0xfa, 0x49, 0x86, 0x11, 0x6d, 0x4c, 0x05, 0x41,
	0xf4, 0xeb, 0x20, 0xf4, 0x5b, 0x49, 0xee, 0x4c, 0x45, 0x4c, 0x1d, 0xe2, 0x53, 0xb4, 0x48, 0x03,
	0x0a, 0x95, 0x02, 0x72, 0xf3, 0x68, 0xed, 0xc6, 0x5c, 0x24, 0x42, 0x85, 0x26, 0x92, 0xb0, 0x90,
	0xb9, 0x64, 0xa1, 0x89, 0x26, 0xaf, 0x27, 0x16, 0x4a, 0x01, 0x4c, 0x10, 0x2b, 0xe7, 0xdc, 0xb1,
	0x98, 0xeb, 0x8a, 0x1c, 0xa9, 0xd0, 0x8d, 0xdc, 0xfc, 0x5d, 0x1e, 0xea, 0xd7, 0xb6, 0x8b, 0xbe,
	0xd6, 0x3d, 0x69, 0x9f, 0xf6, 0x87, 0xfd, 0xd1, 0xd9, 0xee, 0x3d, 0xfd, 0x14, 0x1e, 0xed, 0xe8,
	0x3a, 0xba, 0x71, 0x22, 0x6e, 0x6b, 0xac, 0xca, 0xae, 0xab, 0x7a, 0x63, 0xe9, 0xf5, 0x37, 0x60,
	0xe3, 0xa4, 0x77, 0x3a, 0x50, 0x0b, 0xa2, 0xc0, 0xbb, 0xae, 0x9b, 0x7d, 0xde, 0x56, 0x8b, 0x58,
	0x2e, 0xed, 0xe0, 0x62, 0x40, 0x89, 0xbc, 0x09, 0x4f, 0x6f, 0x4e, 0xdf, 0x19, 0xf6, 0xc5, 0x12,
	0xca, 0x18, 0x82, 0x37, 0xd5, 0xed, 0x56, 0x6f, 0x6c, 0x4c, 0x06, 0x67, 0xaf, 0xd4, 0xca, 0x2d,
	0x8b, 0xe9, 0xe8, 0xc6, 0xb8, 0xdf, 0xa7, 0xaa, 0xd2, 0xfc, 0x77, 0x11, 0x0e, 0x6e, 0x54, 0xb9,
	0xe8, 0xcb, 0xd6, 0xc2, 0xf4, 0xb9, 0x61, 0xc7, 0x51, 0xea, 0xcb, 0x02, 0xe8, 0xc5, 0x11, 0x79,
	0x09, 0x75, 0xa9, 0xf4, 0x9c, 0x8b, 0x45, 0xe4, 0xae, 0x13, 0xcb, 0xef, 0x09, 0xf0, 0x4c, 0x62,
	0xc2, 0x5d, 0x84, 0x03, 0x8a, 0xa2, 0x3e, 0x75, 0x97, 0x0d, 0x42, 0x16, 0x00, 0xf8, 0x6c, 0xe4,
	0x81, 0x19, 0x72, 0x8c, 0x02, 0x74, 0xdd, 0xc1, 0x3d, 0x8b, 0x73, 0x7c, 0x39, 0x4e, 0x04, 0x21,
	0xad, 0x5a, 0x11, 0x97, 0x4d, 0x0c, 0xdc, 0x85, 0xe9, 0x5d, 0xf8, 0x71, 0x64, 0x98, 0x41, 0x90,
	0x78, 0x27, 0x24, 0x50, 0x3b, 0x08, 0xf0, 0xfd, 0xb7, 0x64, 0x4c, 0x6a, 0xe5, 0x45, 0x52, 0x41,
	0x19, 0x55, 0x2f, 0xa1, 0x1e, 0x32, 0xf1, 0x90, 0x58, 0x1b, 0x58, 0xf8, 0x27, 0x5e, 0xbc, 0x97,
	0x82, 0xe2, 0x4f, 0x8b, 0x77, 0xa0, 0x21, 0x1e, 0x1c, 0x22, 0x86, 0xbf, 0x93, 0xdf, 0xd3, 0x44,
	0xfd, 0x8f, 0x68, 0x3b, 0x05, 0x37, 0xdd, 0x16, 0xf6, 0xd2, 0x11, 0x5d, 0x13, 0x1f, 0x17, 0xdd,
	0x4e, 0x52, 0x10, 0xa7, 0x14, 0xdd, 0x62, 0x3e, 0x97, 0xbd, 0xa4, 0xeb, 0xee, 0x21, 0x38, 0x4d,
	0x30, 0xbc, 0xc2, 0xd3, 0x4e, 0xa2, 0x94, 0xc0, 0x8b, 0x5e, 0x66, 0x88, 0xfd, 0xa4, 0x5f, 0x0a,
	0x63, 0x21, 0x11, 0xf3, 0xb9, 0x61, 0xb3, 0x88, 0x59, 0x51, 0x92, 0xb6, 0xaa, 0x31, 0x9f, 0xf7,
	0x04, 0x40, 0x9e, 0x40, 0x25, 0xe6, 0xcc, 0x70, 0x1d, 0x3b, 0x09, 0xc5, 0x72, 0xcc, 0xd9, 0xd0,
	0xb1, 0x9b, 0x5f, 0x43, 0x75, 0x63, 0x4e, 0xe1, 0xb2, 0xfa, 0xc4, 0x98, 0x8c, 0xdb, 0xf4, 0x5a,
	0xe5, 0xa8, 0xc2, 0x5e, 0x06, 0x6f, 0xc9, 0xea, 0x35, 0x83, 0xbc, 0xaf, 0xe6, 0x77, 0x90, 0x0f,
	0xd5, 0x42, 0xb3, 0x05, 0x4a, 0xfa, 0x7d, 0x1f, 0xdf, 0xd2, 0x97, 0x6c, 0x9d, 0x7c, 0xe5, 0xc2,
	0x26, 0xa6, 0x80, 0x2b, 0x54, 0xa5, 0x1f, 0xae, 0x84, 0xd0, 0xa9, 0x7d, 0x53, 0xdd, 0x9c, 0xfc,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xbd, 0x42, 0xee, 0xac, 0x1b, 0x00, 0x00,
}
