// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCrrevClient is a mock of CrrevClient interface.
type MockCrrevClient struct {
	ctrl     *gomock.Controller
	recorder *MockCrrevClientMockRecorder
}

// MockCrrevClientMockRecorder is the mock recorder for MockCrrevClient.
type MockCrrevClientMockRecorder struct {
	mock *MockCrrevClient
}

// NewMockCrrevClient creates a new mock instance.
func NewMockCrrevClient(ctrl *gomock.Controller) *MockCrrevClient {
	mock := &MockCrrevClient{ctrl: ctrl}
	mock.recorder = &MockCrrevClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrrevClient) EXPECT() *MockCrrevClientMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockCrrevClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Commit", varargs...)
	ret0, _ := ret[0].(*CommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockCrrevClientMockRecorder) Commit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCrrevClient)(nil).Commit), varargs...)
}

// Numbering mocks base method.
func (m *MockCrrevClient) Numbering(ctx context.Context, in *NumberingRequest, opts ...grpc.CallOption) (*NumberingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Numbering", varargs...)
	ret0, _ := ret[0].(*NumberingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Numbering indicates an expected call of Numbering.
func (mr *MockCrrevClientMockRecorder) Numbering(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Numbering", reflect.TypeOf((*MockCrrevClient)(nil).Numbering), varargs...)
}

// Redirect mocks base method.
func (m *MockCrrevClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Redirect", varargs...)
	ret0, _ := ret[0].(*RedirectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockCrrevClientMockRecorder) Redirect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockCrrevClient)(nil).Redirect), varargs...)
}

// MockCrrevServer is a mock of CrrevServer interface.
type MockCrrevServer struct {
	ctrl     *gomock.Controller
	recorder *MockCrrevServerMockRecorder
}

// MockCrrevServerMockRecorder is the mock recorder for MockCrrevServer.
type MockCrrevServerMockRecorder struct {
	mock *MockCrrevServer
}

// NewMockCrrevServer creates a new mock instance.
func NewMockCrrevServer(ctrl *gomock.Controller) *MockCrrevServer {
	mock := &MockCrrevServer{ctrl: ctrl}
	mock.recorder = &MockCrrevServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrrevServer) EXPECT() *MockCrrevServerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockCrrevServer) Commit(arg0 context.Context, arg1 *CommitRequest) (*CommitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(*CommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockCrrevServerMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCrrevServer)(nil).Commit), arg0, arg1)
}

// Numbering mocks base method.
func (m *MockCrrevServer) Numbering(arg0 context.Context, arg1 *NumberingRequest) (*NumberingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Numbering", arg0, arg1)
	ret0, _ := ret[0].(*NumberingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Numbering indicates an expected call of Numbering.
func (mr *MockCrrevServerMockRecorder) Numbering(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Numbering", reflect.TypeOf((*MockCrrevServer)(nil).Numbering), arg0, arg1)
}

// Redirect mocks base method.
func (m *MockCrrevServer) Redirect(arg0 context.Context, arg1 *RedirectRequest) (*RedirectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", arg0, arg1)
	ret0, _ := ret[0].(*RedirectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockCrrevServerMockRecorder) Redirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockCrrevServer)(nil).Redirect), arg0, arg1)
}
