// Code generated by protoc-gen-go.
// source: infra/tools/kitchen/proto/package.proto
// DO NOT EDIT!

package recipe_engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DepSpec_RepoType int32

const (
	// Do a full 'git clone' of this dependency.
	DepSpec_GIT DepSpec_RepoType = 0
	// Use GITILES to fetch the dependency data via the GITILES REST API.
	DepSpec_GITILES DepSpec_RepoType = 1
)

var DepSpec_RepoType_name = map[int32]string{
	0: "GIT",
	1: "GITILES",
}
var DepSpec_RepoType_value = map[string]int32{
	"GIT":     0,
	"GITILES": 1,
}

func (x DepSpec_RepoType) Enum() *DepSpec_RepoType {
	p := new(DepSpec_RepoType)
	*p = x
	return p
}
func (x DepSpec_RepoType) String() string {
	return proto.EnumName(DepSpec_RepoType_name, int32(x))
}
func (x *DepSpec_RepoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DepSpec_RepoType_value, data, "DepSpec_RepoType")
	if err != nil {
		return err
	}
	*x = DepSpec_RepoType(value)
	return nil
}
func (DepSpec_RepoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type DepSpec struct {
	// Same meaning as Package.project_id, but the id for this dependency. This
	// should always match the project_id of the repo that we're depending on.
	ProjectId *string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// The URL of where to fetch the package data. Must always be a git repo URL.
	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// The ref to git-fetch when syncing this dependency.
	Branch *string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	// The git commit that we depend on.
	Revision *string `protobuf:"bytes,4,opt,name=revision" json:"revision,omitempty"`
	// Treat a subtree of a repo as a whole repo unto itself. This must match
	// the value of `recipes_path` in the target repo.
	PathOverride *string `protobuf:"bytes,5,opt,name=path_override,json=pathOverride" json:"path_override,omitempty"`
	// How this dependency should be fetched.
	//
	// NOTE: this option may be removed in the future in preference for
	// automatically picking the repo fetch method.
	RepoType         *DepSpec_RepoType `protobuf:"varint,6,opt,name=repo_type,json=repoType,enum=recipe_engine.DepSpec_RepoType,def=0" json:"repo_type,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *DepSpec) Reset()                    { *m = DepSpec{} }
func (m *DepSpec) String() string            { return proto.CompactTextString(m) }
func (*DepSpec) ProtoMessage()               {}
func (*DepSpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_DepSpec_RepoType DepSpec_RepoType = DepSpec_GIT

func (m *DepSpec) GetProjectId() string {
	if m != nil && m.ProjectId != nil {
		return *m.ProjectId
	}
	return ""
}

func (m *DepSpec) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *DepSpec) GetBranch() string {
	if m != nil && m.Branch != nil {
		return *m.Branch
	}
	return ""
}

func (m *DepSpec) GetRevision() string {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return ""
}

func (m *DepSpec) GetPathOverride() string {
	if m != nil && m.PathOverride != nil {
		return *m.PathOverride
	}
	return ""
}

func (m *DepSpec) GetRepoType() DepSpec_RepoType {
	if m != nil && m.RepoType != nil {
		return *m.RepoType
	}
	return Default_DepSpec_RepoType
}

type Package struct {
	// The "API Version" of this proto. Should always equal 1, currently. This may
	// change if a backwards-incompatible update must be done for the proto. In
	// the event that a backwards incompatible change happens, however,
	// api_version will remain at tag 1.
	ApiVersion *int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	// The "id" of how this package is referred to within recipes. This becomes
	// the prefix in DEPS when something depends on one of this package's modules
	// (e.g.  DEPS=["recipe_engine/path"]). This should match the name of the repo
	// in the luci-config service associated with the repo, and should not contain
	// slashes.
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// The path (using forward slashes) to where the base of the recipes are found
	// in the repo (i.e. where the "recipes" and/or "recipe_modules" directories
	// live).
	RecipesPath *string `protobuf:"bytes,3,opt,name=recipes_path,json=recipesPath" json:"recipes_path,omitempty"`
	// The "source of truth" for this package's data, e.g.
	//   "https://github.com/luci/recipes-py"
	// This is used for documentation purposes, and does NOT need to match the
	// `url` field in any other package's deps (in order to allow for mirroring).
	//
	// The documentation generator will infer paths to files that are relative to
	// this URL, and knows about the following git host URL schemes:
	//   * GitHub
	//   * Gitiles
	CanonicalBaseUrl *string `protobuf:"bytes,4,opt,name=canonical_base_url,json=canonicalBaseUrl" json:"canonical_base_url,omitempty"`
	// Any package dependencies that this package has.
	Deps             []*DepSpec `protobuf:"bytes,5,rep,name=deps" json:"deps,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Package) GetApiVersion() int32 {
	if m != nil && m.ApiVersion != nil {
		return *m.ApiVersion
	}
	return 0
}

func (m *Package) GetProjectId() string {
	if m != nil && m.ProjectId != nil {
		return *m.ProjectId
	}
	return ""
}

func (m *Package) GetRecipesPath() string {
	if m != nil && m.RecipesPath != nil {
		return *m.RecipesPath
	}
	return ""
}

func (m *Package) GetCanonicalBaseUrl() string {
	if m != nil && m.CanonicalBaseUrl != nil {
		return *m.CanonicalBaseUrl
	}
	return ""
}

func (m *Package) GetDeps() []*DepSpec {
	if m != nil {
		return m.Deps
	}
	return nil
}

func init() {
	proto.RegisterType((*DepSpec)(nil), "recipe_engine.DepSpec")
	proto.RegisterType((*Package)(nil), "recipe_engine.Package")
	proto.RegisterEnum("recipe_engine.DepSpec_RepoType", DepSpec_RepoType_name, DepSpec_RepoType_value)
}

func init() { proto.RegisterFile("infra/tools/kitchen/proto/package.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x6b, 0xea, 0x40,
	0x14, 0xc5, 0x5f, 0x8c, 0x1a, 0xbd, 0xd1, 0x47, 0x98, 0x85, 0x84, 0x07, 0x0f, 0xf3, 0x7c, 0x8b,
	0x4a, 0x29, 0x09, 0xb8, 0xec, 0xae, 0xa5, 0x45, 0x02, 0x85, 0x4a, 0xb4, 0xdd, 0x0e, 0xe3, 0xe4,
	0xd6, 0x4c, 0x0d, 0x33, 0xc3, 0x24, 0x15, 0xfc, 0x82, 0xfd, 0x4c, 0x5d, 0x96, 0xfc, 0xa9, 0x50,
	0xe9, 0x6e, 0xce, 0xef, 0x5c, 0x98, 0x73, 0x0e, 0x5c, 0x08, 0xf9, 0x62, 0x58, 0x54, 0x2a, 0x95,
	0x17, 0xd1, 0x5e, 0x94, 0x3c, 0x43, 0x19, 0x69, 0xa3, 0x4a, 0x15, 0x69, 0xc6, 0xf7, 0x6c, 0x87,
	0x61, 0xad, 0xc8, 0xd8, 0x20, 0x17, 0x1a, 0x29, 0xca, 0x9d, 0x90, 0x38, 0xfb, 0xb0, 0xc0, 0xb9,
	0x43, 0xbd, 0xd6, 0xc8, 0xc9, 0x5f, 0x00, 0x6d, 0xd4, 0x2b, 0xf2, 0x92, 0x8a, 0xd4, 0xb7, 0x02,
	0x6b, 0x3e, 0x4c, 0x86, 0x2d, 0x89, 0x53, 0xe2, 0x81, 0xfd, 0x66, 0x72, 0xbf, 0x53, 0xf3, 0xea,
	0x49, 0x26, 0xd0, 0xdf, 0x1a, 0x26, 0x79, 0xe6, 0xdb, 0x35, 0x6c, 0x15, 0xf9, 0x03, 0x03, 0x83,
	0x07, 0x51, 0x08, 0x25, 0xfd, 0x6e, 0xed, 0x9c, 0x34, 0xf9, 0x0f, 0x63, 0xcd, 0xca, 0x8c, 0xaa,
	0x03, 0x1a, 0x23, 0x52, 0xf4, 0x7b, 0xf5, 0xc1, 0xa8, 0x82, 0x8f, 0x2d, 0x23, 0x37, 0x30, 0x34,
	0xa8, 0x15, 0x2d, 0x8f, 0x1a, 0xfd, 0x7e, 0x60, 0xcd, 0x7f, 0x2f, 0xa6, 0xe1, 0xb7, 0xe0, 0x61,
	0x1b, 0x3a, 0x4c, 0x50, 0xab, 0xcd, 0x51, 0xe3, 0xb5, 0xbd, 0x8c, 0x37, 0xd5, 0x3f, 0x8d, 0x9c,
	0x05, 0x30, 0xf8, 0xb2, 0x88, 0x03, 0x95, 0xe9, 0xfd, 0x22, 0x2e, 0x38, 0xcb, 0x78, 0x13, 0x3f,
	0xdc, 0xaf, 0x3d, 0x6b, 0xf6, 0x6e, 0x81, 0xb3, 0x6a, 0xb6, 0x21, 0x53, 0x70, 0x99, 0x16, 0xf4,
	0x80, 0xa6, 0x0e, 0x5d, 0x75, 0xef, 0x25, 0xc0, 0xb4, 0x78, 0x6e, 0xc8, 0xd9, 0x36, 0x9d, 0xf3,
	0x6d, 0xfe, 0xc1, 0xa8, 0x89, 0x57, 0xd0, 0xaa, 0x48, 0xbb, 0x87, 0xdb, 0xb2, 0x15, 0x2b, 0x33,
	0x72, 0x05, 0x84, 0x33, 0xa9, 0xa4, 0xe0, 0x2c, 0xa7, 0x5b, 0x56, 0x20, 0xad, 0xd6, 0x6c, 0xe6,
	0xf1, 0x4e, 0xce, 0x2d, 0x2b, 0xf0, 0xc9, 0xe4, 0xe4, 0x12, 0xba, 0x29, 0xea, 0xc2, 0xef, 0x05,
	0xf6, 0xdc, 0x5d, 0x4c, 0x7e, 0x2e, 0x9f, 0xd4, 0x37, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31,
	0xc7, 0x02, 0x86, 0xfc, 0x01, 0x00, 0x00,
}
