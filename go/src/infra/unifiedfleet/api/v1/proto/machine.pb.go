// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/proto/machine.proto

package ufspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ChromeOSDeviceType refers to the different types of
// device/machine in the Chrome OS lab
type ChromeOSDeviceType int32

const (
	ChromeOSDeviceType_CHROME_OS_DEVICE_TYPE_UNSPECIFIED ChromeOSDeviceType = 0
	ChromeOSDeviceType_DEVICE_CHROMEBOOK                 ChromeOSDeviceType = 1
	ChromeOSDeviceType_DEVICE_LABSTATION                 ChromeOSDeviceType = 2
	ChromeOSDeviceType_DEVICE_SERVO                      ChromeOSDeviceType = 3
)

var ChromeOSDeviceType_name = map[int32]string{
	0: "CHROME_OS_DEVICE_TYPE_UNSPECIFIED",
	1: "DEVICE_CHROMEBOOK",
	2: "DEVICE_LABSTATION",
	3: "DEVICE_SERVO",
}

var ChromeOSDeviceType_value = map[string]int32{
	"CHROME_OS_DEVICE_TYPE_UNSPECIFIED": 0,
	"DEVICE_CHROMEBOOK":                 1,
	"DEVICE_LABSTATION":                 2,
	"DEVICE_SERVO":                      3,
}

func (x ChromeOSDeviceType) String() string {
	return proto.EnumName(ChromeOSDeviceType_name, int32(x))
}

func (ChromeOSDeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73c68db80177c474, []int{0}
}

// Machine refers to the devices or bare metal servers
// which serves the tests directly.
type Machine struct {
	// A unique name for the machine.
	//   * AssetTag for ChromeOS machine (device)
	//   * Serial number for Chrome machine for now (server) (Ideally it should be assetTag once it’s ready)
	// The format will be machines/asset:XXX or machines/sn:XXX
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// serial_number of the machine.
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Location details of where the machine is placed
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are valid to be assigned to Device:
	//	*Machine_ChromeBrowserMachine
	//	*Machine_ChromeosMachine
	Device isMachine_Device `protobuf_oneof:"device"`
	// Record the last update timestamp of this machine (In UTC timezone)
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Record the ACL info of the machine
	Realm                string   `protobuf:"bytes,7,opt,name=realm,proto3" json:"realm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Machine) Reset()         { *m = Machine{} }
func (m *Machine) String() string { return proto.CompactTextString(m) }
func (*Machine) ProtoMessage()    {}
func (*Machine) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c68db80177c474, []int{0}
}

func (m *Machine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Machine.Unmarshal(m, b)
}
func (m *Machine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Machine.Marshal(b, m, deterministic)
}
func (m *Machine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Machine.Merge(m, src)
}
func (m *Machine) XXX_Size() int {
	return xxx_messageInfo_Machine.Size(m)
}
func (m *Machine) XXX_DiscardUnknown() {
	xxx_messageInfo_Machine.DiscardUnknown(m)
}

var xxx_messageInfo_Machine proto.InternalMessageInfo

func (m *Machine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Machine) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Machine) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type isMachine_Device interface {
	isMachine_Device()
}

type Machine_ChromeBrowserMachine struct {
	ChromeBrowserMachine *ChromeBrowserMachine `protobuf:"bytes,4,opt,name=chrome_browser_machine,json=chromeBrowserMachine,proto3,oneof"`
}

type Machine_ChromeosMachine struct {
	ChromeosMachine *ChromeOSMachine `protobuf:"bytes,5,opt,name=chromeos_machine,json=chromeosMachine,proto3,oneof"`
}

func (*Machine_ChromeBrowserMachine) isMachine_Device() {}

func (*Machine_ChromeosMachine) isMachine_Device() {}

func (m *Machine) GetDevice() isMachine_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Machine) GetChromeBrowserMachine() *ChromeBrowserMachine {
	if x, ok := m.GetDevice().(*Machine_ChromeBrowserMachine); ok {
		return x.ChromeBrowserMachine
	}
	return nil
}

func (m *Machine) GetChromeosMachine() *ChromeOSMachine {
	if x, ok := m.GetDevice().(*Machine_ChromeosMachine); ok {
		return x.ChromeosMachine
	}
	return nil
}

func (m *Machine) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Machine) GetRealm() string {
	if m != nil {
		return m.Realm
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Machine) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Machine_ChromeBrowserMachine)(nil),
		(*Machine_ChromeosMachine)(nil),
	}
}

// ChromeBrowserMachine refers to bare metal servers in Chrome Browser lab
type ChromeBrowserMachine struct {
	// Descriptive name of Chrome Machine
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Should match one of the predefined Chrome Platforms.
	Platform *ChromePlatform `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// Refers to Nic name
	Nic *Nic `protobuf:"bytes,3,opt,name=nic,proto3" json:"nic,omitempty"`
	// Interface of its connected devices.
	KvmInterface           *KVMInterface    `protobuf:"bytes,4,opt,name=kvm_interface,json=kvmInterface,proto3" json:"kvm_interface,omitempty"`
	RpmInterface           *RPMInterface    `protobuf:"bytes,5,opt,name=rpm_interface,json=rpmInterface,proto3" json:"rpm_interface,omitempty"`
	NetworkDeviceInterface *SwitchInterface `protobuf:"bytes,6,opt,name=network_device_interface,json=networkDeviceInterface,proto3" json:"network_device_interface,omitempty"`
	Drac                   *Drac            `protobuf:"bytes,7,opt,name=drac,proto3" json:"drac,omitempty"`
	// Usually it's a buganizer bug.
	DeploymentTicket string `protobuf:"bytes,8,opt,name=deployment_ticket,json=deploymentTicket,proto3" json:"deployment_ticket,omitempty"`
	// Can be covered by deployment_ticket
	Description          string   `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChromeBrowserMachine) Reset()         { *m = ChromeBrowserMachine{} }
func (m *ChromeBrowserMachine) String() string { return proto.CompactTextString(m) }
func (*ChromeBrowserMachine) ProtoMessage()    {}
func (*ChromeBrowserMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c68db80177c474, []int{1}
}

func (m *ChromeBrowserMachine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeBrowserMachine.Unmarshal(m, b)
}
func (m *ChromeBrowserMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeBrowserMachine.Marshal(b, m, deterministic)
}
func (m *ChromeBrowserMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeBrowserMachine.Merge(m, src)
}
func (m *ChromeBrowserMachine) XXX_Size() int {
	return xxx_messageInfo_ChromeBrowserMachine.Size(m)
}
func (m *ChromeBrowserMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeBrowserMachine.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeBrowserMachine proto.InternalMessageInfo

func (m *ChromeBrowserMachine) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ChromeBrowserMachine) GetPlatform() *ChromePlatform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *ChromeBrowserMachine) GetNic() *Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *ChromeBrowserMachine) GetKvmInterface() *KVMInterface {
	if m != nil {
		return m.KvmInterface
	}
	return nil
}

func (m *ChromeBrowserMachine) GetRpmInterface() *RPMInterface {
	if m != nil {
		return m.RpmInterface
	}
	return nil
}

func (m *ChromeBrowserMachine) GetNetworkDeviceInterface() *SwitchInterface {
	if m != nil {
		return m.NetworkDeviceInterface
	}
	return nil
}

func (m *ChromeBrowserMachine) GetDrac() *Drac {
	if m != nil {
		return m.Drac
	}
	return nil
}

func (m *ChromeBrowserMachine) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

func (m *ChromeBrowserMachine) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// ChromeOSMachine refers duts and servers in Chrome OS lab
type ChromeOSMachine struct {
	// All infos come from the HaRT system.
	// used by referencing device config.
	ReferenceBoard string `protobuf:"bytes,1,opt,name=reference_board,json=referenceBoard,proto3" json:"reference_board,omitempty"`
	// used by ChromeOS build system.
	BuildTarget string `protobuf:"bytes,2,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	Model       string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Chromebook, labstation, servo, …
	DeviceType ChromeOSDeviceType `protobuf:"varint,4,opt,name=device_type,json=deviceType,proto3,enum=unifiedfleet.api.v1.proto.ChromeOSDeviceType" json:"device_type,omitempty"`
	// Used internally, Different boards/models could share the same name.
	GoogleCodeName string `protobuf:"bytes,5,opt,name=google_code_name,json=googleCodeName,proto3" json:"google_code_name,omitempty"`
	// HaRT doesn't guarantee its existence.
	MacAddress           string   `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Sku                  string   `protobuf:"bytes,7,opt,name=sku,proto3" json:"sku,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChromeOSMachine) Reset()         { *m = ChromeOSMachine{} }
func (m *ChromeOSMachine) String() string { return proto.CompactTextString(m) }
func (*ChromeOSMachine) ProtoMessage()    {}
func (*ChromeOSMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_73c68db80177c474, []int{2}
}

func (m *ChromeOSMachine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSMachine.Unmarshal(m, b)
}
func (m *ChromeOSMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSMachine.Marshal(b, m, deterministic)
}
func (m *ChromeOSMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSMachine.Merge(m, src)
}
func (m *ChromeOSMachine) XXX_Size() int {
	return xxx_messageInfo_ChromeOSMachine.Size(m)
}
func (m *ChromeOSMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSMachine.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSMachine proto.InternalMessageInfo

func (m *ChromeOSMachine) GetReferenceBoard() string {
	if m != nil {
		return m.ReferenceBoard
	}
	return ""
}

func (m *ChromeOSMachine) GetBuildTarget() string {
	if m != nil {
		return m.BuildTarget
	}
	return ""
}

func (m *ChromeOSMachine) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ChromeOSMachine) GetDeviceType() ChromeOSDeviceType {
	if m != nil {
		return m.DeviceType
	}
	return ChromeOSDeviceType_CHROME_OS_DEVICE_TYPE_UNSPECIFIED
}

func (m *ChromeOSMachine) GetGoogleCodeName() string {
	if m != nil {
		return m.GoogleCodeName
	}
	return ""
}

func (m *ChromeOSMachine) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *ChromeOSMachine) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func init() {
	proto.RegisterEnum("unifiedfleet.api.v1.proto.ChromeOSDeviceType", ChromeOSDeviceType_name, ChromeOSDeviceType_value)
	proto.RegisterType((*Machine)(nil), "unifiedfleet.api.v1.proto.Machine")
	proto.RegisterType((*ChromeBrowserMachine)(nil), "unifiedfleet.api.v1.proto.ChromeBrowserMachine")
	proto.RegisterType((*ChromeOSMachine)(nil), "unifiedfleet.api.v1.proto.ChromeOSMachine")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/proto/machine.proto", fileDescriptor_73c68db80177c474)
}

var fileDescriptor_73c68db80177c474 = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x4e, 0x23, 0x37,
	0x14, 0x05, 0x02, 0x2c, 0x38, 0xec, 0x92, 0xb5, 0xe8, 0x2a, 0xe5, 0xa1, 0xb0, 0xac, 0x56, 0xd0,
	0xad, 0x98, 0x29, 0xac, 0xfa, 0xd0, 0x56, 0xea, 0x36, 0x09, 0xa9, 0x88, 0x16, 0x12, 0x34, 0x49,
	0x91, 0x5a, 0x55, 0x1a, 0x39, 0x9e, 0x3b, 0x89, 0x95, 0xf1, 0xd8, 0xf2, 0x78, 0x82, 0xa2, 0x55,
	0xff, 0xa5, 0x9f, 0xd1, 0xcf, 0xe9, 0x73, 0x5f, 0xfa, 0x0b, 0xd5, 0xd8, 0x4e, 0x88, 0x5a, 0xca,
	0x74, 0xdf, 0xec, 0xe3, 0x7b, 0xce, 0xbd, 0x73, 0xef, 0xb9, 0x83, 0x4e, 0x59, 0x1a, 0x2b, 0xe2,
	0xe7, 0x29, 0x8b, 0x19, 0x44, 0x71, 0x02, 0xa0, 0x7d, 0x22, 0x99, 0x3f, 0x3d, 0xf3, 0xa5, 0x12,
	0x5a, 0xf8, 0x9c, 0xd0, 0x31, 0x4b, 0xc1, 0x33, 0x37, 0xfc, 0xe9, 0x72, 0xa0, 0x47, 0x24, 0xf3,
	0xa6, 0x67, 0xf6, 0x69, 0xff, 0x60, 0x24, 0xc4, 0x28, 0x01, 0x4b, 0x1b, 0xe6, 0xb1, 0xaf, 0x19,
	0x87, 0x4c, 0x13, 0x2e, 0x5d, 0xc0, 0xd7, 0x23, 0xe1, 0xd1, 0xb1, 0x12, 0x9c, 0xe5, 0xdc, 0x13,
	0x6a, 0xe4, 0x27, 0x39, 0x65, 0xfe, 0x48, 0x49, 0xea, 0x52, 0x39, 0x81, 0x22, 0xbd, 0x82, 0x4c,
	0xe4, 0x8a, 0xba, 0xb4, 0xfb, 0xef, 0x3e, 0x82, 0x1a, 0x33, 0x48, 0xa2, 0x70, 0x08, 0x63, 0x32,
	0x65, 0x42, 0x39, 0x81, 0xaf, 0xca, 0x3e, 0xd3, 0xa8, 0x43, 0x28, 0x13, 0xa2, 0x63, 0xa1, 0xb8,
	0xa3, 0x79, 0x65, 0xb4, 0x44, 0x50, 0xa2, 0x99, 0x48, 0x5d, 0xfc, 0x59, 0x59, 0xbc, 0x04, 0xc5,
	0xe4, 0x18, 0x14, 0x49, 0x32, 0x47, 0x29, 0x1d, 0x40, 0x0a, 0xfa, 0x4e, 0xa8, 0x89, 0x0d, 0x3f,
	0xfa, 0xab, 0x82, 0x9e, 0x5c, 0xdb, 0x91, 0x60, 0x8c, 0xd6, 0x53, 0xc2, 0xa1, 0xbe, 0x7a, 0xb8,
	0x7a, 0xb2, 0x1d, 0x98, 0x33, 0x7e, 0x85, 0x9e, 0x66, 0xa0, 0x18, 0x49, 0xc2, 0x34, 0xe7, 0x43,
	0x50, 0xf5, 0x35, 0xf3, 0xb8, 0x63, 0xc1, 0xae, 0xc1, 0xf0, 0x3b, 0xb4, 0x35, 0x2f, 0xbc, 0x5e,
	0x39, 0x5c, 0x3d, 0xa9, 0x9e, 0xbf, 0xf2, 0xfe, 0x73, 0xb0, 0xde, 0x95, 0x0b, 0x0d, 0x16, 0x24,
	0x3c, 0x42, 0x2f, 0x5c, 0xc3, 0x86, 0x4a, 0xdc, 0x65, 0xa0, 0x42, 0x67, 0x93, 0xfa, 0xba, 0x91,
	0xf3, 0x1f, 0x91, 0x6b, 0x19, 0x62, 0xd3, 0xf2, 0xdc, 0xa7, 0x5c, 0xae, 0x04, 0x7b, 0xf4, 0x01,
	0x1c, 0xff, 0x82, 0x6a, 0x16, 0x17, 0xd9, 0x22, 0xc5, 0x86, 0x49, 0xf1, 0xa6, 0x34, 0x45, 0xaf,
	0xef, 0x54, 0x9a, 0x95, 0x3f, 0x1a, 0x95, 0xcb, 0x95, 0x60, 0x77, 0x2e, 0x35, 0x57, 0xff, 0x1e,
	0x55, 0x73, 0x19, 0x11, 0x0d, 0x61, 0xe1, 0xd5, 0xfa, 0xa6, 0x11, 0xde, 0xf7, 0xac, 0x99, 0xbc,
	0xb9, 0x91, 0xbd, 0xc1, 0xdc, 0xc8, 0x46, 0x28, 0x40, 0x96, 0x53, 0xa0, 0x78, 0x0f, 0x6d, 0x28,
	0x20, 0x09, 0xaf, 0x3f, 0x31, 0x6d, 0xb6, 0x97, 0x6f, 0x1a, 0x7f, 0x36, 0xbe, 0x43, 0x27, 0xae,
	0xbe, 0x53, 0x53, 0xe0, 0x69, 0x36, 0xcb, 0x34, 0x70, 0x8f, 0x48, 0x99, 0x49, 0xa1, 0x3d, 0x2a,
	0xb8, 0xbf, 0x98, 0xa3, 0xfb, 0xb2, 0xcc, 0xff, 0xe0, 0x4e, 0xbf, 0x36, 0xb7, 0xd0, 0x66, 0x04,
	0x53, 0x46, 0xe1, 0xe8, 0xf7, 0x75, 0xb4, 0xf7, 0x50, 0xcf, 0xf0, 0x4b, 0xb4, 0x13, 0xb1, 0x4c,
	0x26, 0x64, 0x16, 0x2e, 0xd9, 0xa0, 0xea, 0xb0, 0x6e, 0xe1, 0x86, 0x36, 0xda, 0x9a, 0x3b, 0xda,
	0x18, 0xa1, 0x7a, 0xfe, 0x79, 0x69, 0xdb, 0x6e, 0x1c, 0x21, 0x58, 0x50, 0xf1, 0x97, 0xa8, 0x92,
	0x32, 0xea, 0xac, 0xf2, 0xd9, 0x23, 0x0a, 0x5d, 0x46, 0x83, 0x22, 0x14, 0x5f, 0xa1, 0xa7, 0x93,
	0x29, 0x0f, 0x59, 0xaa, 0x41, 0xc5, 0x84, 0xce, 0x7d, 0x71, 0xfc, 0x08, 0xf7, 0xfd, 0xed, 0x75,
	0x67, 0x1e, 0x1e, 0xec, 0x4c, 0xa6, 0x7c, 0x71, 0x2b, 0xd4, 0x94, 0x5c, 0x56, 0xdb, 0x28, 0x55,
	0x0b, 0x6e, 0x96, 0xd5, 0x94, 0x5c, 0x52, 0x8b, 0x50, 0xdd, 0xed, 0x54, 0x68, 0x5b, 0xbc, 0x24,
	0xbc, 0x59, 0xea, 0xad, 0xfe, 0x1d, 0xd3, 0x74, 0x7c, 0xaf, 0xfd, 0xc2, 0x69, 0x5d, 0x18, 0xa9,
	0xfb, 0x2c, 0x6f, 0xd1, 0x7a, 0xa4, 0x08, 0x35, 0xc6, 0xa8, 0x9e, 0x1f, 0x3c, 0xa2, 0x78, 0xa1,
	0x08, 0x0d, 0x4c, 0x30, 0xfe, 0x02, 0x3d, 0x8f, 0x40, 0x26, 0x62, 0xc6, 0x21, 0xd5, 0xa1, 0x66,
	0x74, 0x02, 0xba, 0xbe, 0x65, 0xe6, 0x5a, 0xbb, 0x7f, 0x18, 0x18, 0x1c, 0x1f, 0xa2, 0x6a, 0x04,
	0x19, 0x55, 0x4c, 0x9a, 0x45, 0xde, 0x76, 0xe3, 0xbf, 0x87, 0x8e, 0x7e, 0x5b, 0x43, 0xbb, 0xff,
	0xd8, 0x05, 0x7c, 0x8c, 0x76, 0x15, 0xc4, 0xa0, 0x20, 0xa5, 0x10, 0x0e, 0x05, 0x51, 0x91, 0x33,
	0xce, 0xb3, 0x05, 0xdc, 0x2c, 0xd0, 0xc2, 0x5e, 0xc3, 0x9c, 0x25, 0x51, 0xa8, 0x89, 0x1a, 0x81,
	0x76, 0x3f, 0x92, 0xaa, 0xc1, 0x06, 0x06, 0x2a, 0xdc, 0xcf, 0x45, 0x04, 0x89, 0x71, 0xc6, 0x76,
	0x60, 0x2f, 0xb8, 0x5b, 0xd4, 0x65, 0xfa, 0xaa, 0x67, 0xd2, 0x4e, 0xfe, 0xd9, 0xf9, 0xe9, 0xff,
	0x58, 0x57, 0xdb, 0xc2, 0xc1, 0x4c, 0x42, 0x80, 0xa2, 0xc5, 0x19, 0x9f, 0xa0, 0x9a, 0xdd, 0xc8,
	0x90, 0x8a, 0x08, 0xac, 0xd7, 0x37, 0x6c, 0xc9, 0x16, 0x6f, 0x89, 0x08, 0x8c, 0xdd, 0x0f, 0x50,
	0x95, 0x13, 0x1a, 0x92, 0x28, 0x52, 0x90, 0x65, 0x66, 0x98, 0xdb, 0x01, 0xe2, 0x84, 0x36, 0x2c,
	0x82, 0x6b, 0xa8, 0x92, 0x4d, 0x72, 0xb7, 0xac, 0xc5, 0xf1, 0xcd, 0x07, 0x84, 0xff, 0x9d, 0x1e,
	0xbf, 0x46, 0x2f, 0x5b, 0x97, 0x41, 0xef, 0xba, 0x1d, 0xf6, 0xfa, 0xe1, 0x45, 0xfb, 0xb6, 0xd3,
	0x6a, 0x87, 0x83, 0x9f, 0x6e, 0xda, 0xe1, 0x8f, 0xdd, 0xfe, 0x4d, 0xbb, 0xd5, 0xf9, 0xa1, 0xd3,
	0xbe, 0xa8, 0xad, 0xe0, 0x4f, 0xd0, 0x73, 0xf7, 0x68, 0xa3, 0x9b, 0xbd, 0xde, 0xfb, 0xda, 0xea,
	0x12, 0x7c, 0xd5, 0x68, 0xf6, 0x07, 0x8d, 0x41, 0xa7, 0xd7, 0xad, 0xad, 0xe1, 0x1a, 0xda, 0x71,
	0x70, 0xbf, 0x1d, 0xdc, 0xf6, 0x6a, 0x95, 0xe6, 0xf1, 0xcf, 0xaf, 0x4b, 0xfe, 0xfe, 0xdf, 0xe6,
	0x71, 0x26, 0x87, 0xc3, 0x4d, 0x73, 0x79, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x5a,
	0x06, 0x63, 0xae, 0x07, 0x00, 0x00,
}
