// Code generated by protoc-gen-go.
// source: infra/tricium/api/admin/v1/launcher.proto
// DO NOT EDIT!

package admin

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LaunchRequest contains the details needed to launch a workflow for an analysis request.
type LaunchRequest struct {
	// The run ID created by a Tricium.Analyze call.
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// The name of the project as it is known to Tricium.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// The Git repo connected to the project in the Tricium config.
	GitRepo string `protobuf:"bytes,3,opt,name=git_repo,json=gitRepo" json:"git_repo,omitempty"`
	// TODO(emso): Specify Git ref requirements.
	GitRef string `protobuf:"bytes,4,opt,name=git_ref,json=gitRef" json:"git_ref,omitempty"`
	// File paths from the root of the Git repository.
	// TODO(emso): Specify file separators, or add listing of path segments.
	Paths []string `protobuf:"bytes,5,rep,name=paths" json:"paths,omitempty"`
}

func (m *LaunchRequest) Reset()                    { *m = LaunchRequest{} }
func (m *LaunchRequest) String() string            { return proto.CompactTextString(m) }
func (*LaunchRequest) ProtoMessage()               {}
func (*LaunchRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LaunchRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *LaunchRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LaunchRequest) GetGitRepo() string {
	if m != nil {
		return m.GitRepo
	}
	return ""
}

func (m *LaunchRequest) GetGitRef() string {
	if m != nil {
		return m.GitRef
	}
	return ""
}

func (m *LaunchRequest) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type LaunchResponse struct {
}

func (m *LaunchResponse) Reset()                    { *m = LaunchResponse{} }
func (m *LaunchResponse) String() string            { return proto.CompactTextString(m) }
func (*LaunchResponse) ProtoMessage()               {}
func (*LaunchResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func init() {
	proto.RegisterType((*LaunchRequest)(nil), "admin.LaunchRequest")
	proto.RegisterType((*LaunchResponse)(nil), "admin.LaunchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Launcher service

type LauncherClient interface {
	// Launch launches a workflow for provided request details.
	Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
}
type launcherPRPCClient struct {
	client *prpc.Client
}

func NewLauncherPRPCClient(client *prpc.Client) LauncherClient {
	return &launcherPRPCClient{client}
}

func (c *launcherPRPCClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.client.Call(ctx, "admin.Launcher", "Launch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type launcherClient struct {
	cc *grpc.ClientConn
}

func NewLauncherClient(cc *grpc.ClientConn) LauncherClient {
	return &launcherClient{cc}
}

func (c *launcherClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := grpc.Invoke(ctx, "/admin.Launcher/Launch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Launcher service

type LauncherServer interface {
	// Launch launches a workflow for provided request details.
	Launch(context.Context, *LaunchRequest) (*LaunchResponse, error)
}

func RegisterLauncherServer(s prpc.Registrar, srv LauncherServer) {
	s.RegisterService(&_Launcher_serviceDesc, srv)
}

func _Launcher_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Launcher/Launch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).Launch(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Launcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Launcher",
	HandlerType: (*LauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Launch",
			Handler:    _Launcher_Launch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/launcher.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/launcher.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0xcf, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x71, 0x6a, 0x6d, 0xb7, 0x1d, 0x50, 0xe4, 0xb0, 0x61, 0xf4, 0xaa, 0xec, 0xaa, 0xde,
	0x34, 0xa8, 0xf8, 0x00, 0x5e, 0x0a, 0xbb, 0xca, 0x0b, 0x8c, 0xd8, 0xa6, 0xdb, 0x11, 0x97, 0xc4,
	0xd3, 0xc4, 0x87, 0xf0, 0xa9, 0x85, 0xc4, 0x5e, 0xb8, 0xbb, 0x7c, 0xf9, 0x41, 0xf8, 0x07, 0x1e,
	0xc8, 0x8e, 0xac, 0x65, 0x60, 0xea, 0x29, 0x9e, 0xa4, 0xf6, 0x24, 0xf5, 0x70, 0x22, 0x2b, 0xbf,
	0x1f, 0xe5, 0xa7, 0x8e, 0xb6, 0x3f, 0x1a, 0xee, 0x3c, 0xbb, 0xe0, 0xb0, 0x4a, 0xb0, 0xfd, 0x29,
	0xe0, 0x6a, 0x97, 0x44, 0x99, 0xaf, 0x68, 0xa6, 0x80, 0x1b, 0xa8, 0x39, 0xda, 0x3d, 0x0d, 0xa2,
	0x68, 0x8a, 0xb6, 0x54, 0x15, 0x47, 0xfb, 0x36, 0xa0, 0x80, 0x85, 0x67, 0xf7, 0x61, 0xfa, 0x20,
	0x2e, 0x9a, 0xa2, 0x5d, 0xa9, 0x79, 0xe2, 0x1d, 0x2c, 0x0f, 0x14, 0xf6, 0x6c, 0xbc, 0x13, 0x65,
	0xa6, 0x03, 0x05, 0x65, 0xbc, 0xc3, 0x5b, 0x58, 0x64, 0x1a, 0xc5, 0x65, 0x92, 0x3a, 0xc9, 0x88,
	0x6b, 0xa8, 0xbc, 0x0e, 0xc7, 0x49, 0x54, 0x4d, 0xd9, 0xae, 0x54, 0x1e, 0xdb, 0x1b, 0xb8, 0x9e,
	0x5b, 0x26, 0xef, 0xec, 0x64, 0x9e, 0x5e, 0x61, 0xb9, 0xfb, 0xeb, 0xc6, 0x17, 0xa8, 0xf3, 0x19,
	0xd7, 0x5d, 0x8a, 0xef, 0xfe, 0x85, 0xdf, 0x6f, 0xce, 0x6e, 0xf3, 0x13, 0xef, 0x75, 0xfa, 0xef,
	0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x75, 0x04, 0x55, 0x1c, 0x01, 0x00, 0x00,
}
