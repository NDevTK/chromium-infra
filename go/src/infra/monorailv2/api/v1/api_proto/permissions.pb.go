// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/api_proto/permissions.proto

package monorail_v1

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for the GetPermissionSet emthod.
// Next available tag: 2
type GetPermissionSetRequest struct {
	// The resource name of the resource permissions to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionSetRequest) Reset()         { *m = GetPermissionSetRequest{} }
func (m *GetPermissionSetRequest) String() string { return proto.CompactTextString(m) }
func (*GetPermissionSetRequest) ProtoMessage()    {}
func (*GetPermissionSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cbaa61cdc217e80, []int{0}
}

func (m *GetPermissionSetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPermissionSetRequest.Unmarshal(m, b)
}
func (m *GetPermissionSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPermissionSetRequest.Marshal(b, m, deterministic)
}
func (m *GetPermissionSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionSetRequest.Merge(m, src)
}
func (m *GetPermissionSetRequest) XXX_Size() int {
	return xxx_messageInfo_GetPermissionSetRequest.Size(m)
}
func (m *GetPermissionSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionSetRequest proto.InternalMessageInfo

func (m *GetPermissionSetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for the BatchGetPermissionSets method.
// Next available tag: 2
type BatchGetPermissionSetsRequest struct {
	// The resource names of the resource permissions to retrieve.
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetPermissionSetsRequest) Reset()         { *m = BatchGetPermissionSetsRequest{} }
func (m *BatchGetPermissionSetsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetPermissionSetsRequest) ProtoMessage()    {}
func (*BatchGetPermissionSetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cbaa61cdc217e80, []int{1}
}

func (m *BatchGetPermissionSetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetPermissionSetsRequest.Unmarshal(m, b)
}
func (m *BatchGetPermissionSetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetPermissionSetsRequest.Marshal(b, m, deterministic)
}
func (m *BatchGetPermissionSetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetPermissionSetsRequest.Merge(m, src)
}
func (m *BatchGetPermissionSetsRequest) XXX_Size() int {
	return xxx_messageInfo_BatchGetPermissionSetsRequest.Size(m)
}
func (m *BatchGetPermissionSetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetPermissionSetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetPermissionSetsRequest proto.InternalMessageInfo

func (m *BatchGetPermissionSetsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// Response message for the BatchGetPermissionSets method.
// Next available tag: 2
type BatchGetPermissionSetsResponse struct {
	// The Permissions, one for each of the given resources.
	PermissionSets       []*PermissionSet `protobuf:"bytes,1,rep,name=permission_sets,json=permissionSets,proto3" json:"permission_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BatchGetPermissionSetsResponse) Reset()         { *m = BatchGetPermissionSetsResponse{} }
func (m *BatchGetPermissionSetsResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetPermissionSetsResponse) ProtoMessage()    {}
func (*BatchGetPermissionSetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cbaa61cdc217e80, []int{2}
}

func (m *BatchGetPermissionSetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetPermissionSetsResponse.Unmarshal(m, b)
}
func (m *BatchGetPermissionSetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetPermissionSetsResponse.Marshal(b, m, deterministic)
}
func (m *BatchGetPermissionSetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetPermissionSetsResponse.Merge(m, src)
}
func (m *BatchGetPermissionSetsResponse) XXX_Size() int {
	return xxx_messageInfo_BatchGetPermissionSetsResponse.Size(m)
}
func (m *BatchGetPermissionSetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetPermissionSetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetPermissionSetsResponse proto.InternalMessageInfo

func (m *BatchGetPermissionSetsResponse) GetPermissionSets() []*PermissionSet {
	if m != nil {
		return m.PermissionSets
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPermissionSetRequest)(nil), "monorail.v1.GetPermissionSetRequest")
	proto.RegisterType((*BatchGetPermissionSetsRequest)(nil), "monorail.v1.BatchGetPermissionSetsRequest")
	proto.RegisterType((*BatchGetPermissionSetsResponse)(nil), "monorail.v1.BatchGetPermissionSetsResponse")
}

func init() {
	proto.RegisterFile("api/v1/api_proto/permissions.proto", fileDescriptor_4cbaa61cdc217e80)
}

var fileDescriptor_4cbaa61cdc217e80 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x1b, 0xab, 0x82, 0x13, 0x50, 0xd9, 0x83, 0xad, 0x01, 0xa5, 0x2c, 0x1e, 0xfc, 0x47,
	0x42, 0xe3, 0xcd, 0x9b, 0xf5, 0xe0, 0x55, 0x2a, 0x78, 0x0d, 0x9b, 0x3a, 0xb6, 0x2b, 0x49, 0x66,
	0xcd, 0xac, 0xf9, 0xb0, 0x9e, 0xfc, 0x28, 0xd2, 0x6c, 0xab, 0x4d, 0xb1, 0xc1, 0xe3, 0xce, 0xbe,
	0xdf, 0x7b, 0xb3, 0x6f, 0x41, 0x2a, 0xa3, 0xa3, 0x6a, 0x18, 0x29, 0xa3, 0x13, 0x53, 0x92, 0xa5,
	0xc8, 0x60, 0x99, 0x6b, 0x66, 0x4d, 0x05, 0x87, 0xf5, 0x44, 0xf8, 0x39, 0x15, 0x54, 0x2a, 0x9d,
	0x85, 0xd5, 0x30, 0xb8, 0x9e, 0x12, 0x4d, 0x33, 0x5c, 0x88, 0xdd, 0x61, 0x4e, 0x47, 0xaf, 0x1a,
	0xb3, 0x97, 0x24, 0xc5, 0x99, 0xaa, 0x34, 0x95, 0x0e, 0x0d, 0x2e, 0x5a, 0xec, 0x13, 0x4a, 0xdf,
	0x70, 0x62, 0x17, 0x29, 0x32, 0x86, 0xde, 0x03, 0xda, 0xc7, 0x9f, 0xeb, 0x27, 0xb4, 0x63, 0x7c,
	0xff, 0x40, 0xb6, 0xa2, 0x07, 0xdb, 0x85, 0xca, 0xb1, 0xef, 0x0d, 0xbc, 0xf3, 0xbd, 0x51, 0xf7,
	0xeb, 0x6e, 0x6b, 0x5c, 0x0f, 0xe4, 0x2d, 0x9c, 0x8c, 0x94, 0x9d, 0xcc, 0xd6, 0x41, 0x5e, 0x92,
	0xc7, 0xb0, 0x33, 0x17, 0x72, 0xdf, 0x1b, 0x74, 0x97, 0xa8, 0x9b, 0x48, 0x84, 0xd3, 0x4d, 0x2c,
	0x1b, 0x2a, 0x18, 0xc5, 0x3d, 0x1c, 0xac, 0x6c, 0xcb, 0x68, 0x9d, 0x8d, 0x1f, 0x07, 0xe1, 0x4a,
	0x23, 0x61, 0x73, 0xe5, 0x7d, 0xd3, 0x30, 0x8b, 0x3f, 0x3d, 0xf0, 0x7f, 0x15, 0x2c, 0x9e, 0xe1,
	0x70, 0x3d, 0x51, 0x9c, 0x35, 0xfc, 0x36, 0xb4, 0x10, 0xb4, 0xa4, 0xca, 0x8e, 0x60, 0x38, 0xfa,
	0xfb, 0x39, 0xe2, 0xb2, 0xc1, 0xb5, 0xf6, 0x15, 0x5c, 0xfd, 0x4b, 0xeb, 0xfa, 0x91, 0x9d, 0x74,
	0xb7, 0xfe, 0xba, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xb2, 0xd0, 0x3a, 0x46, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PermissionsClient is the client API for Permissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermissionsClient interface {
	// Returns the requester's permissions for the given resource.
	//
	// Raises:
	//  PERMISSION_DENIED if the given resource does not exist and/or the
	//      requester does not have permission to view the resource's name space.
	//  NOT_FOUND if the given resource does not exist.
	GetPermissionSet(ctx context.Context, in *GetPermissionSetRequest, opts ...grpc.CallOption) (*PermissionSet, error)
	// Returns the requester's permissions for all the given resources.
	//
	// Raises:
	//  PERMISSION_DENIED if any of the given resources do not exist and/or the
	//      requester does not have permission to view one of the resource's
	//      name space.
	// NOT_FOUND if one of the given resources do not exist.
	BatchGetPermissionSets(ctx context.Context, in *BatchGetPermissionSetsRequest, opts ...grpc.CallOption) (*BatchGetPermissionSetsResponse, error)
}
type permissionsPRPCClient struct {
	client *prpc.Client
}

func NewPermissionsPRPCClient(client *prpc.Client) PermissionsClient {
	return &permissionsPRPCClient{client}
}

func (c *permissionsPRPCClient) GetPermissionSet(ctx context.Context, in *GetPermissionSetRequest, opts ...grpc.CallOption) (*PermissionSet, error) {
	out := new(PermissionSet)
	err := c.client.Call(ctx, "monorail.v1.Permissions", "GetPermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsPRPCClient) BatchGetPermissionSets(ctx context.Context, in *BatchGetPermissionSetsRequest, opts ...grpc.CallOption) (*BatchGetPermissionSetsResponse, error) {
	out := new(BatchGetPermissionSetsResponse)
	err := c.client.Call(ctx, "monorail.v1.Permissions", "BatchGetPermissionSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type permissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsClient(cc grpc.ClientConnInterface) PermissionsClient {
	return &permissionsClient{cc}
}

func (c *permissionsClient) GetPermissionSet(ctx context.Context, in *GetPermissionSetRequest, opts ...grpc.CallOption) (*PermissionSet, error) {
	out := new(PermissionSet)
	err := c.cc.Invoke(ctx, "/monorail.v1.Permissions/GetPermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) BatchGetPermissionSets(ctx context.Context, in *BatchGetPermissionSetsRequest, opts ...grpc.CallOption) (*BatchGetPermissionSetsResponse, error) {
	out := new(BatchGetPermissionSetsResponse)
	err := c.cc.Invoke(ctx, "/monorail.v1.Permissions/BatchGetPermissionSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsServer is the server API for Permissions service.
type PermissionsServer interface {
	// Returns the requester's permissions for the given resource.
	//
	// Raises:
	//  PERMISSION_DENIED if the given resource does not exist and/or the
	//      requester does not have permission to view the resource's name space.
	//  NOT_FOUND if the given resource does not exist.
	GetPermissionSet(context.Context, *GetPermissionSetRequest) (*PermissionSet, error)
	// Returns the requester's permissions for all the given resources.
	//
	// Raises:
	//  PERMISSION_DENIED if any of the given resources do not exist and/or the
	//      requester does not have permission to view one of the resource's
	//      name space.
	// NOT_FOUND if one of the given resources do not exist.
	BatchGetPermissionSets(context.Context, *BatchGetPermissionSetsRequest) (*BatchGetPermissionSetsResponse, error)
}

// UnimplementedPermissionsServer can be embedded to have forward compatible implementations.
type UnimplementedPermissionsServer struct {
}

func (*UnimplementedPermissionsServer) GetPermissionSet(ctx context.Context, req *GetPermissionSetRequest) (*PermissionSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionSet not implemented")
}
func (*UnimplementedPermissionsServer) BatchGetPermissionSets(ctx context.Context, req *BatchGetPermissionSetsRequest) (*BatchGetPermissionSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetPermissionSets not implemented")
}

func RegisterPermissionsServer(s prpc.Registrar, srv PermissionsServer) {
	s.RegisterService(&_Permissions_serviceDesc, srv)
}

func _Permissions_GetPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).GetPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Permissions/GetPermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).GetPermissionSet(ctx, req.(*GetPermissionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_BatchGetPermissionSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetPermissionSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).BatchGetPermissionSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Permissions/BatchGetPermissionSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).BatchGetPermissionSets(ctx, req.(*BatchGetPermissionSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Permissions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.v1.Permissions",
	HandlerType: (*PermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermissionSet",
			Handler:    _Permissions_GetPermissionSet_Handler,
		},
		{
			MethodName: "BatchGetPermissionSets",
			Handler:    _Permissions_BatchGetPermissionSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api_proto/permissions.proto",
}
