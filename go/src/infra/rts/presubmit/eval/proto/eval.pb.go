// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/rts/presubmit/eval/proto/eval.proto

package evalpb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A rejection of a code change due to test failures.
type Rejection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rejected patchsets.
	Patchsets []*GerritPatchset `protobuf:"bytes,1,rep,name=patchsets,proto3" json:"patchsets,omitempty"`
	// When the code change was rejected.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// List of tests that caused the rejection.
	FailedTests []*Test `protobuf:"bytes,3,rep,name=failed_tests,json=failedTests,proto3" json:"failed_tests,omitempty"`
}

func (x *Rejection) Reset() {
	*x = Rejection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rejection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rejection) ProtoMessage() {}

func (x *Rejection) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rejection.ProtoReflect.Descriptor instead.
func (*Rejection) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescGZIP(), []int{0}
}

func (x *Rejection) GetPatchsets() []*GerritPatchset {
	if x != nil {
		return x.Patchsets
	}
	return nil
}

func (x *Rejection) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Rejection) GetFailedTests() []*Test {
	if x != nil {
		return x.FailedTests
	}
	return nil
}

// A Gerrit CL.
type GerritChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gerrit host, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project, e.g. "chromium/src".
	// It is required.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Change number,
	// e.g. 123 for https://chromium.googlesource.com/c/123
	Number int64 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *GerritChange) Reset() {
	*x = GerritChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritChange) ProtoMessage() {}

func (x *GerritChange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritChange.ProtoReflect.Descriptor instead.
func (*GerritChange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescGZIP(), []int{1}
}

func (x *GerritChange) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritChange) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritChange) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

// A Gerrit patchset.
type GerritPatchset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CL.
	Change *GerritChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	// The patchset number.
	Patchset int64 `protobuf:"varint,2,opt,name=patchset,proto3" json:"patchset,omitempty"`
}

func (x *GerritPatchset) Reset() {
	*x = GerritPatchset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritPatchset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritPatchset) ProtoMessage() {}

func (x *GerritPatchset) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritPatchset.ProtoReflect.Descriptor instead.
func (*GerritPatchset) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescGZIP(), []int{2}
}

func (x *GerritPatchset) GetChange() *GerritChange {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *GerritPatchset) GetPatchset() int64 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

// A single test, typically a test case.
type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test identifier.
	// For Chromium, a ResultDB TestID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Path of the file where the test is defined.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescGZIP(), []int{3}
}

func (x *Test) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Test) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// One historical record.
// Used for streaming messages above.
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Record_Rejection
	Data isRecord_Data `protobuf_oneof:"data"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescGZIP(), []int{4}
}

func (m *Record) GetData() isRecord_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Record) GetRejection() *Rejection {
	if x, ok := x.GetData().(*Record_Rejection); ok {
		return x.Rejection
	}
	return nil
}

type isRecord_Data interface {
	isRecord_Data()
}

type Record_Rejection struct {
	// A code change rejection due to test failures.
	Rejection *Rejection `protobuf:"bytes,1,opt,name=rejection,proto3,oneof"`
}

func (*Record_Rejection) isRecord_Data() {}

var File_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x2e, 0x65, 0x76, 0x61, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65,
	0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x73,
	0x65, 0x74, 0x52, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0c, 0x47,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e,
	0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74,
	0x22, 0x33, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x44, 0x0a, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x65,
	0x76, 0x61, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescData = file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDesc
)

func file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescData)
	})
	return file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDescData
}

var file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_goTypes = []interface{}{
	(*Rejection)(nil),           // 0: chrome.rts.presubmit.eval.Rejection
	(*GerritChange)(nil),        // 1: chrome.rts.presubmit.eval.GerritChange
	(*GerritPatchset)(nil),      // 2: chrome.rts.presubmit.eval.GerritPatchset
	(*Test)(nil),                // 3: chrome.rts.presubmit.eval.Test
	(*Record)(nil),              // 4: chrome.rts.presubmit.eval.Record
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_depIdxs = []int32{
	2, // 0: chrome.rts.presubmit.eval.Rejection.patchsets:type_name -> chrome.rts.presubmit.eval.GerritPatchset
	5, // 1: chrome.rts.presubmit.eval.Rejection.timestamp:type_name -> google.protobuf.Timestamp
	3, // 2: chrome.rts.presubmit.eval.Rejection.failed_tests:type_name -> chrome.rts.presubmit.eval.Test
	1, // 3: chrome.rts.presubmit.eval.GerritPatchset.change:type_name -> chrome.rts.presubmit.eval.GerritChange
	0, // 4: chrome.rts.presubmit.eval.Record.rejection:type_name -> chrome.rts.presubmit.eval.Rejection
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_init() }
func file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_init() {
	if File_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rejection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritPatchset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Record_Rejection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto = out.File
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_rawDesc = nil
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_goTypes = nil
	file_go_chromium_org_luci_rts_presubmit_eval_proto_eval_proto_depIdxs = nil
}
