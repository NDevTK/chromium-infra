# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

# Default output path of generated Markdown document.
DEFAULT_PATH = os.path.join(
    os.path.abspath(os.path.dirname(__file__)), 'wheels.md')


class Generator(object):
  _HEADER = """\
# dockerbuild-generated wheel packages

## Wheel List

This list is automatically generated by `dockerbuild`s `wheel-dump`
subcommand. This list represents the current set of configured
`dockerbuild` wheels in [wheel.py](wheel.py).

"""

  _WHEEL_TEMPLATE = """\
* **%(name)s** %(version)s
    ```protobuf
    wheel: <
      name: %(package_name)s
      version: %(package_tag)s
    >
    ```
%(supported)s

"""

  _FOOTER = """\

## Contact

If a wheel is needed, but is not in this list, please
contact Chrome Operations:

* `luci-eng@google.com`
* [File a Bug](https://bugs.chromium.org/p/chromium/issues/entry?\
template=Build%20Infrastructure)
"""

  def __init__(self):
    self._packages = {}

  def add_package(self, whl, plat):
    key = (whl.spec.name, whl.spec.version)
    _, v = self._packages.setdefault(key, (whl, set()))
    if plat:
      v.add(plat)

  def write(self, fd):
    fd.write(self._HEADER)


    for (name, version), (whl, plats) in sorted(self._packages.items()):
      package = whl.cipd_package(templated=True)

      # Build an itelic list of supported platforms.
      supported = ''
      if plats:
        supported = '\n'.join([''] + [
          '    * *%s*' % (plat_name,)
          for plat_name in sorted(plat.name for plat in plats)])

      fd.write(self._WHEEL_TEMPLATE % dict(
          name=name,
          version=version,
          supported=supported,
          package_name=package.name,
          package_tag=package.tags[0],
      ))

    fd.write(self._FOOTER)
