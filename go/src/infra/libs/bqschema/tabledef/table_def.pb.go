// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/libs/bqschema/tabledef/table_def.proto

/*
Package tabledef is a generated protocol buffer package.

It is generated from these files:
	infra/libs/bqschema/tabledef/table_def.proto

It has these top-level messages:
	TableDef
	FieldSchema
*/
package tabledef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_STRING    Type = 0
	Type_BYTES     Type = 1
	Type_INTEGER   Type = 2
	Type_FLOAT     Type = 3
	Type_BOOLEAN   Type = 4
	Type_TIMESTAMP Type = 5
	Type_RECORD    Type = 6
	Type_DATE      Type = 7
	Type_TIME      Type = 8
	Type_DATETIME  Type = 9
)

var Type_name = map[int32]string{
	0: "STRING",
	1: "BYTES",
	2: "INTEGER",
	3: "FLOAT",
	4: "BOOLEAN",
	5: "TIMESTAMP",
	6: "RECORD",
	7: "DATE",
	8: "TIME",
	9: "DATETIME",
}
var Type_value = map[string]int32{
	"STRING":    0,
	"BYTES":     1,
	"INTEGER":   2,
	"FLOAT":     3,
	"BOOLEAN":   4,
	"TIMESTAMP": 5,
	"RECORD":    6,
	"DATE":      7,
	"TIME":      8,
	"DATETIME":  9,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// DataSet is the set of BigQuery event monitoring data sets supported by
// Chrome Infrastructure.
type TableDef_DataSet int32

const (
	// Events sent directly from code.
	TableDef_RAW_EVENTS TableDef_DataSet = 0
	// Events aggregated by Cloud Dataflow.
	TableDef_AGGREGATED TableDef_DataSet = 1
	// Test data.
	TableDef_TEST_DATA TableDef_DataSet = 3
)

var TableDef_DataSet_name = map[int32]string{
	0: "RAW_EVENTS",
	1: "AGGREGATED",
	3: "TEST_DATA",
}
var TableDef_DataSet_value = map[string]int32{
	"RAW_EVENTS": 0,
	"AGGREGATED": 1,
	"TEST_DATA":  3,
}

func (x TableDef_DataSet) String() string {
	return proto.EnumName(TableDef_DataSet_name, int32(x))
}
func (TableDef_DataSet) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type TableDef struct {
	Dataset TableDef_DataSet `protobuf:"varint,1,opt,name=dataset,enum=tabledef.TableDef_DataSet" json:"dataset,omitempty"`
	// Name of the table.
	TableId string `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Human-readable name of the table. (optional)
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Human-readable description of the table. (optional)
	Description string         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Fields      []*FieldSchema `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
	// Whether to partition the table by day.
	PartitionTable bool `protobuf:"varint,6,opt,name=partition_table,json=partitionTable" json:"partition_table,omitempty"`
	// The lifetime for each partition. If zero, partitions do not expire.
	// Ignored if partition_table is false. (optional)
	PartitionExpirationSeconds int64 `protobuf:"varint,7,opt,name=partition_expiration_seconds,json=partitionExpirationSeconds" json:"partition_expiration_seconds,omitempty"`
}

func (m *TableDef) Reset()                    { *m = TableDef{} }
func (m *TableDef) String() string            { return proto.CompactTextString(m) }
func (*TableDef) ProtoMessage()               {}
func (*TableDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TableDef) GetDataset() TableDef_DataSet {
	if m != nil {
		return m.Dataset
	}
	return TableDef_RAW_EVENTS
}

func (m *TableDef) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

func (m *TableDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TableDef) GetFields() []*FieldSchema {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *TableDef) GetPartitionTable() bool {
	if m != nil {
		return m.PartitionTable
	}
	return false
}

func (m *TableDef) GetPartitionExpirationSeconds() int64 {
	if m != nil {
		return m.PartitionExpirationSeconds
	}
	return 0
}

type FieldSchema struct {
	// Name of the field/column.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Human-readable description of the field. (optional)
	Description string         `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	IsRepeated  bool           `protobuf:"varint,3,opt,name=is_repeated,json=isRepeated" json:"is_repeated,omitempty"`
	IsRequired  bool           `protobuf:"varint,4,opt,name=is_required,json=isRequired" json:"is_required,omitempty"`
	Type        Type           `protobuf:"varint,5,opt,name=type,enum=tabledef.Type" json:"type,omitempty"`
	Schema      []*FieldSchema `protobuf:"bytes,6,rep,name=schema" json:"schema,omitempty"`
}

func (m *FieldSchema) Reset()                    { *m = FieldSchema{} }
func (m *FieldSchema) String() string            { return proto.CompactTextString(m) }
func (*FieldSchema) ProtoMessage()               {}
func (*FieldSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FieldSchema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldSchema) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FieldSchema) GetIsRepeated() bool {
	if m != nil {
		return m.IsRepeated
	}
	return false
}

func (m *FieldSchema) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *FieldSchema) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_STRING
}

func (m *FieldSchema) GetSchema() []*FieldSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func init() {
	proto.RegisterType((*TableDef)(nil), "tabledef.TableDef")
	proto.RegisterType((*FieldSchema)(nil), "tabledef.FieldSchema")
	proto.RegisterEnum("tabledef.Type", Type_name, Type_value)
	proto.RegisterEnum("tabledef.TableDef_DataSet", TableDef_DataSet_name, TableDef_DataSet_value)
}

func init() { proto.RegisterFile("infra/libs/bqschema/tabledef/table_def.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x61, 0x8b, 0xd3, 0x30,
	0x18, 0xc7, 0xaf, 0x5b, 0xd7, 0x76, 0x4f, 0x75, 0x86, 0x80, 0x50, 0x0f, 0xc1, 0xb2, 0x37, 0x16,
	0xd1, 0x0d, 0x4e, 0x5f, 0xf8, 0xd2, 0x9e, 0xcd, 0x95, 0xc1, 0xdd, 0x26, 0x69, 0x50, 0x7c, 0x55,
	0xb2, 0x25, 0xc5, 0xc0, 0x6e, 0xeb, 0xb5, 0x11, 0xbc, 0x57, 0x7e, 0x4d, 0xbf, 0x80, 0xdf, 0x43,
	0x92, 0x6e, 0xbd, 0x81, 0xe8, 0xbb, 0xe7, 0xf9, 0xe5, 0x97, 0xf0, 0xe4, 0x9f, 0xc0, 0x6b, 0xb5,
	0xab, 0x1a, 0x3e, 0xdf, 0xaa, 0x75, 0x3b, 0x5f, 0xdf, 0xb5, 0x9b, 0x6f, 0xf2, 0x96, 0xcf, 0x35,
	0x5f, 0x6f, 0xa5, 0x90, 0x55, 0x57, 0x94, 0x42, 0x56, 0xb3, 0xba, 0xd9, 0xeb, 0x3d, 0x0e, 0x8e,
	0x2b, 0xd3, 0xdf, 0x03, 0x08, 0x98, 0x69, 0x32, 0x59, 0xe1, 0x77, 0xe0, 0x0b, 0xae, 0x79, 0x2b,
	0x75, 0xe4, 0xc4, 0x4e, 0x32, 0xb9, 0x38, 0x9f, 0x1d, 0xc5, 0xd9, 0x51, 0x9a, 0x65, 0x5c, 0xf3,
	0x42, 0x6a, 0x7a, 0x54, 0xf1, 0x33, 0xe8, 0x8e, 0x2b, 0x95, 0x88, 0x06, 0xb1, 0x93, 0x8c, 0xa9,
	0x6f, 0xfb, 0x85, 0xc0, 0x18, 0xdc, 0x1d, 0xbf, 0x95, 0xd1, 0xd0, 0x62, 0x5b, 0xe3, 0x18, 0x42,
	0x21, 0xdb, 0x4d, 0xa3, 0x6a, 0xad, 0xf6, 0xbb, 0xc8, 0xb5, 0x4b, 0xa7, 0x08, 0xbf, 0x01, 0xaf,
	0x52, 0x72, 0x2b, 0xda, 0x68, 0x14, 0x0f, 0x93, 0xf0, 0xe2, 0xe9, 0xc3, 0x14, 0x57, 0x86, 0x17,
	0xf6, 0x76, 0xf4, 0x20, 0xe1, 0x97, 0xf0, 0xa4, 0xe6, 0x8d, 0x56, 0x66, 0x6f, 0x69, 0xcd, 0xc8,
	0x8b, 0x9d, 0x24, 0xa0, 0x93, 0x1e, 0xdb, 0xe1, 0xf1, 0x07, 0x78, 0xfe, 0x20, 0xca, 0x1f, 0xb5,
	0x6a, 0xb8, 0x2d, 0x5b, 0xb9, 0xd9, 0xef, 0x44, 0x1b, 0xf9, 0xb1, 0x93, 0x0c, 0xe9, 0x79, 0xef,
	0x90, 0x5e, 0x29, 0x3a, 0x63, 0xfa, 0x1e, 0xfc, 0xc3, 0xf5, 0xf1, 0x04, 0x80, 0xa6, 0x5f, 0x4a,
	0xf2, 0x99, 0x2c, 0x59, 0x81, 0xce, 0x4c, 0x9f, 0xe6, 0x39, 0x25, 0x79, 0xca, 0x48, 0x86, 0x1c,
	0xfc, 0x18, 0xc6, 0x8c, 0x14, 0xac, 0xcc, 0x52, 0x96, 0xa2, 0xe1, 0xf4, 0x97, 0x03, 0xe1, 0xc9,
	0xf0, 0x7d, 0x32, 0xce, 0xbf, 0x93, 0x19, 0xfc, 0x9d, 0xcc, 0x0b, 0x08, 0x55, 0x5b, 0x36, 0xb2,
	0x96, 0x5c, 0x4b, 0x61, 0x63, 0x0d, 0x28, 0xa8, 0x96, 0x1e, 0x48, 0x2f, 0xdc, 0x7d, 0x57, 0x8d,
	0x14, 0x36, 0xdc, 0x83, 0xd0, 0x11, 0x3c, 0x05, 0x57, 0xdf, 0xd7, 0x32, 0x1a, 0xd9, 0xf7, 0x9d,
	0x9c, 0xbc, 0xef, 0x7d, 0x2d, 0xa9, 0x5d, 0x33, 0xf9, 0x77, 0x1f, 0x28, 0xf2, 0xfe, 0x9b, 0x7f,
	0x27, 0xbd, 0xfa, 0x09, 0xae, 0xd9, 0x8c, 0x01, 0xbc, 0x82, 0xd1, 0xc5, 0x32, 0x47, 0x67, 0x78,
	0x0c, 0xa3, 0xcb, 0xaf, 0x8c, 0x14, 0xc8, 0xc1, 0x21, 0xf8, 0x8b, 0x25, 0x23, 0x39, 0xa1, 0x68,
	0x60, 0xf8, 0xd5, 0xf5, 0x2a, 0x65, 0x68, 0x68, 0xf8, 0xe5, 0x6a, 0x75, 0x4d, 0xd2, 0x25, 0x72,
	0x6d, 0x5a, 0x8b, 0x1b, 0x52, 0xb0, 0xf4, 0xe6, 0x13, 0x1a, 0x99, 0xa3, 0x28, 0xf9, 0xb8, 0xa2,
	0x19, 0xf2, 0x70, 0x00, 0x6e, 0x96, 0x32, 0x82, 0x7c, 0x53, 0x19, 0x09, 0x05, 0xf8, 0x11, 0x04,
	0x86, 0xd9, 0x6e, 0xbc, 0xf6, 0xec, 0xa7, 0x7e, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x65, 0xc9,
	0xc4, 0x8e, 0x04, 0x03, 0x00, 0x00,
}
