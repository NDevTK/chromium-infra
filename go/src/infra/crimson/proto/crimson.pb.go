// Code generated by protoc-gen-go.
// source: crimson.proto
// DO NOT EDIT!

/*
Package crimson is a generated protocol buffer package.

It is generated from these files:
	crimson.proto

It has these top-level messages:
	IPRanges
	IPRange
	IPRangeStatus
	IPRangeQuery
*/
package crimson

import prpccommon "github.com/luci/luci-go/common/prpc"
import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IPRanges struct {
	Ranges []*IPRange `protobuf:"bytes,1,rep,name=ranges" json:"ranges,omitempty"`
}

func (m *IPRanges) Reset()                    { *m = IPRanges{} }
func (m *IPRanges) String() string            { return proto.CompactTextString(m) }
func (*IPRanges) ProtoMessage()               {}
func (*IPRanges) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IPRanges) GetRanges() []*IPRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type IPRange struct {
	Site    string `protobuf:"bytes,1,opt,name=site" json:"site,omitempty"`
	Vlan    string `protobuf:"bytes,2,opt,name=vlan" json:"vlan,omitempty"`
	StartIp string `protobuf:"bytes,3,opt,name=start_ip,json=startIp" json:"start_ip,omitempty"`
	EndIp   string `protobuf:"bytes,4,opt,name=end_ip,json=endIp" json:"end_ip,omitempty"`
}

func (m *IPRange) Reset()                    { *m = IPRange{} }
func (m *IPRange) String() string            { return proto.CompactTextString(m) }
func (*IPRange) ProtoMessage()               {}
func (*IPRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type IPRangeStatus struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *IPRangeStatus) Reset()                    { *m = IPRangeStatus{} }
func (m *IPRangeStatus) String() string            { return proto.CompactTextString(m) }
func (*IPRangeStatus) ProtoMessage()               {}
func (*IPRangeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type IPRangeQuery struct {
	Site  string `protobuf:"bytes,1,opt,name=site" json:"site,omitempty"`
	Vlan  string `protobuf:"bytes,2,opt,name=vlan" json:"vlan,omitempty"`
	Limit uint32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *IPRangeQuery) Reset()                    { *m = IPRangeQuery{} }
func (m *IPRangeQuery) String() string            { return proto.CompactTextString(m) }
func (*IPRangeQuery) ProtoMessage()               {}
func (*IPRangeQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*IPRanges)(nil), "crimson.IPRanges")
	proto.RegisterType((*IPRange)(nil), "crimson.IPRange")
	proto.RegisterType((*IPRangeStatus)(nil), "crimson.IPRangeStatus")
	proto.RegisterType((*IPRangeQuery)(nil), "crimson.IPRangeQuery")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Crimson service

type CrimsonClient interface {
	CreateIPRange(ctx context.Context, in *IPRange, opts ...grpc.CallOption) (*IPRangeStatus, error)
	ReadIPRange(ctx context.Context, in *IPRangeQuery, opts ...grpc.CallOption) (*IPRanges, error)
}
type crimsonPRPCClient struct {
	client *prpccommon.Client
}

func NewCrimsonPRPCClient(client *prpccommon.Client) CrimsonClient {
	return &crimsonPRPCClient{client}
}

func (c *crimsonPRPCClient) CreateIPRange(ctx context.Context, in *IPRange, opts ...grpc.CallOption) (*IPRangeStatus, error) {
	out := new(IPRangeStatus)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateIPRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ReadIPRange(ctx context.Context, in *IPRangeQuery, opts ...grpc.CallOption) (*IPRanges, error) {
	out := new(IPRanges)
	err := c.client.Call(ctx, "crimson.Crimson", "ReadIPRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type crimsonClient struct {
	cc *grpc.ClientConn
}

func NewCrimsonClient(cc *grpc.ClientConn) CrimsonClient {
	return &crimsonClient{cc}
}

func (c *crimsonClient) CreateIPRange(ctx context.Context, in *IPRange, opts ...grpc.CallOption) (*IPRangeStatus, error) {
	out := new(IPRangeStatus)
	err := grpc.Invoke(ctx, "/crimson.Crimson/CreateIPRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ReadIPRange(ctx context.Context, in *IPRangeQuery, opts ...grpc.CallOption) (*IPRanges, error) {
	out := new(IPRanges)
	err := grpc.Invoke(ctx, "/crimson.Crimson/ReadIPRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crimson service

type CrimsonServer interface {
	CreateIPRange(context.Context, *IPRange) (*IPRangeStatus, error)
	ReadIPRange(context.Context, *IPRangeQuery) (*IPRanges, error)
}

func RegisterCrimsonServer(s prpc.Registrar, srv CrimsonServer) {
	s.RegisterService(&_Crimson_serviceDesc, srv)
}

func _Crimson_CreateIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateIPRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateIPRange(ctx, req.(*IPRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ReadIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRangeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ReadIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ReadIPRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ReadIPRange(ctx, req.(*IPRangeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crimson_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crimson.Crimson",
	HandlerType: (*CrimsonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIPRange",
			Handler:    _Crimson_CreateIPRange_Handler,
		},
		{
			MethodName: "ReadIPRange",
			Handler:    _Crimson_ReadIPRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("crimson.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x09, 0x6d, 0x93, 0x72, 0x25, 0x12, 0x9c, 0x28, 0x0a, 0x9d, 0x90, 0x25, 0xa4, 0x4c,
	0x1d, 0x0a, 0x0b, 0x62, 0xec, 0x14, 0x89, 0x01, 0xcc, 0x0f, 0x40, 0xa6, 0xb5, 0x90, 0xa5, 0x36,
	0x89, 0xce, 0x0e, 0x12, 0x23, 0xff, 0x1c, 0xe7, 0xec, 0x2c, 0x61, 0x61, 0xbb, 0xf7, 0xdd, 0xbd,
	0xdc, 0xbb, 0x18, 0xf2, 0x1d, 0x99, 0xa3, 0x6d, 0xea, 0x75, 0x4b, 0x8d, 0x6b, 0x30, 0x8b, 0x52,
	0x3c, 0xc0, 0xbc, 0x7a, 0x91, 0xaa, 0xfe, 0xd4, 0x16, 0x4b, 0x48, 0x89, 0xab, 0x22, 0xb9, 0x9d,
	0x94, 0x8b, 0xcd, 0xc5, 0x7a, 0x30, 0xc5, 0x11, 0x19, 0xfb, 0x62, 0x07, 0x59, 0x44, 0x88, 0x30,
	0xb5, 0xc6, 0x69, 0x6f, 0x49, 0xca, 0x33, 0xc9, 0x75, 0xcf, 0xbe, 0x0e, 0xaa, 0x2e, 0x4e, 0x03,
	0xeb, 0x6b, 0xbc, 0x81, 0xb9, 0x75, 0x8a, 0xdc, 0xbb, 0x69, 0x8b, 0x09, 0xf3, 0x8c, 0x75, 0xd5,
	0xe2, 0x12, 0x52, 0x5d, 0xef, 0xfb, 0xc6, 0x94, 0x1b, 0x33, 0xaf, 0xaa, 0x56, 0xdc, 0x41, 0x1e,
	0x97, 0xbc, 0x39, 0xe5, 0x3a, 0x8b, 0x57, 0x30, 0xd3, 0x44, 0x0d, 0xc5, 0x5d, 0x41, 0x88, 0x67,
	0x38, 0x8f, 0x63, 0xaf, 0x9d, 0xa6, 0xef, 0x7f, 0x07, 0xf2, 0x5f, 0x3b, 0x98, 0xa3, 0x71, 0x9c,
	0x26, 0x97, 0x41, 0x6c, 0x7e, 0x12, 0xc8, 0xb6, 0xe1, 0x6a, 0x7c, 0x82, 0x7c, 0x4b, 0x5a, 0x39,
	0x3d, 0xdc, 0xfa, 0xe7, 0x87, 0xac, 0xae, 0xc7, 0x24, 0x44, 0x15, 0x27, 0xf8, 0x08, 0x0b, 0xa9,
	0xd5, 0x7e, 0xb0, 0x2e, 0xc7, 0x83, 0x1c, 0x76, 0x75, 0x39, 0xc6, 0xde, 0xfa, 0x91, 0xf2, 0x1b,
	0xdd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x72, 0x36, 0x7f, 0xde, 0xb4, 0x01, 0x00, 0x00,
}
