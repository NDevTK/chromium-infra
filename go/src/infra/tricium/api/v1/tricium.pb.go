// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/v1/tricium.proto

package tricium

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type State int32

const (
	// Pending is for when an analysis request has been received but the corresponding
	// workflow, function, or workers are not running yet.
	State_PENDING State = 0
	// Running is for when the workflow, function, or workers of a request have been launched
	// but have not finished.
	State_RUNNING State = 1
	// Success is for a workflow, function, or worker that successfully completed.
	//
	// Success of workflows and functions, is aggregated from underlying functions and workers,
	// where full success means success is aggregated.
	State_SUCCESS State = 2
	// Failure is for a workflow, function, or worker that completed with failure.
	//
	// Failure of workflows and functions, is aggregated from underlying functions and workers,
	// where any occurrence of failure means failure is aggregated.
	State_FAILURE State = 3
	// Canceled is for user canceled workflows, functions, and workers.
	// NB! Not supported yet.
	State_CANCELED State = 4
	// Timed out is for workers where the triggered swarming task timed out.
	// NB! Not supported yet.
	State_TIMED_OUT State = 5
	// Aborted is for workers aborted due to a failing worker dependency.
	//
	// For instance, the worker providing the data needed by a worker may have failed.
	State_ABORTED State = 6
)

var State_name = map[int32]string{
	0: "PENDING",
	1: "RUNNING",
	2: "SUCCESS",
	3: "FAILURE",
	4: "CANCELED",
	5: "TIMED_OUT",
	6: "ABORTED",
}
var State_value = map[string]int32{
	"PENDING":   0,
	"RUNNING":   1,
	"SUCCESS":   2,
	"FAILURE":   3,
	"CANCELED":  4,
	"TIMED_OUT": 5,
	"ABORTED":   6,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type Consumer int32

const (
	// No consumer means progress and results can be pulled from the Tricium service API.
	//
	// This is the default value used when no consumer is configured for a project.
	Consumer_NONE Consumer = 0
	// A Gerrit consumer means the Tricium service polls Gerrit for changes and reports
	// progress updates and results to Gerrit.
	//
	// Gerrit details need to be configured for a project before the Gerrit consumer
	// option is enabled.
	//
	// Gerrit consumer details must be provided with this option.
	Consumer_GERRIT Consumer = 1
)

var Consumer_name = map[int32]string{
	0: "NONE",
	1: "GERRIT",
}
var Consumer_value = map[string]int32{
	"NONE":   0,
	"GERRIT": 1,
}

func (x Consumer) String() string {
	return proto.EnumName(Consumer_name, int32(x))
}
func (Consumer) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// AnalyzeRequest contains the details needed for an analysis request.
type AnalyzeRequest struct {
	// Name of the project hosting the paths listed in the request. The name
	// should map to the project name as it is connected to Tricium.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	GitRef  string `protobuf:"bytes,2,opt,name=git_ref,json=gitRef" json:"git_ref,omitempty"`
	// Paths to analyze in the project. Listed from the root of the Git
	// repository.
	// TODO(emso): document path separators or add listing of path segments.
	Paths []string `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
	// Consumer to send progress updates and results to.
	//
	// This field is optional. If included it will push progress and result
	// updates to the provided consumer. The selected consumer must be
	// configured for the project of the request.
	//
	// Note that progress and results can be accessed via the Tricium
	// API regardless of whether a consumer has been included in the request.
	Consumer Consumer `protobuf:"varint,4,opt,name=consumer,enum=tricium.Consumer" json:"consumer,omitempty"`
	// Gerrit details for a Gerrit consumer.
	GerritDetails *GerritConsumerDetails `protobuf:"bytes,5,opt,name=gerrit_details,json=gerritDetails" json:"gerrit_details,omitempty"`
}

func (m *AnalyzeRequest) Reset()                    { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()               {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AnalyzeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *AnalyzeRequest) GetGitRef() string {
	if m != nil {
		return m.GitRef
	}
	return ""
}

func (m *AnalyzeRequest) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *AnalyzeRequest) GetConsumer() Consumer {
	if m != nil {
		return m.Consumer
	}
	return Consumer_NONE
}

func (m *AnalyzeRequest) GetGerritDetails() *GerritConsumerDetails {
	if m != nil {
		return m.GerritDetails
	}
	return nil
}

type AnalyzeResponse struct {
	// ID of the run started for this request.
	//
	// This ID can be used to track progress and request results.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *AnalyzeResponse) Reset()                    { *m = AnalyzeResponse{} }
func (m *AnalyzeResponse) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResponse) ProtoMessage()               {}
func (*AnalyzeResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *AnalyzeResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type ProgressRequest struct {
	// Run ID returned by an analyze request.
	//
	// This field must be provided, unless a consumer is provided below.
	// If nothing else is provided, then all known progress for the run is returned.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// An optional function name.
	//
	// If provided, only progress for the provided function will be returned.
	// The function name should match the name of the function in the Tricium
	// configuration.
	//
	// NB! Currently not supported.
	Function string `protobuf:"bytes,2,opt,name=function" json:"function,omitempty"`
	// Optional platform that may be provided together with an function name.
	//
	// If provided, only progress for the provided function and platform will be provided.
	//
	// NB! Currently not supported.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform" json:"platform,omitempty"`
	// Consumer of the progress information.
	//
	// This field is optional. If included, consumer-specific fields will be considered
	// when looking up progress information and the run ID can be excluded.
	//
	// Note that if a run ID is listed and a consumer. Then the run ID will be used.
	Consumer Consumer `protobuf:"varint,4,opt,name=consumer,enum=tricium.Consumer" json:"consumer,omitempty"`
	// Gerrit details for the Gerrit consumer.
	GerritDetails *GerritConsumerDetails `protobuf:"bytes,5,opt,name=gerrit_details,json=gerritDetails" json:"gerrit_details,omitempty"`
}

func (m *ProgressRequest) Reset()                    { *m = ProgressRequest{} }
func (m *ProgressRequest) String() string            { return proto.CompactTextString(m) }
func (*ProgressRequest) ProtoMessage()               {}
func (*ProgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *ProgressRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ProgressRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ProgressRequest) GetPlatform() *Platform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *ProgressRequest) GetConsumer() Consumer {
	if m != nil {
		return m.Consumer
	}
	return Consumer_NONE
}

func (m *ProgressRequest) GetGerritDetails() *GerritConsumerDetails {
	if m != nil {
		return m.GerritDetails
	}
	return nil
}

type ProgressResponse struct {
	// ID of the run progress is reported for.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// Overall state for the run provided in the progress request.
	State State `protobuf:"varint,2,opt,name=state,enum=tricium.State" json:"state,omitempty"`
	// Function progress matching the requested progress report.
	//
	// For a provided run ID this corresponds to all functions and platforms, and
	// for any selection of these, a subset is returned.
	//
	// NB! Selection of a subset is currently not supported.
	FunctionProgress []*FunctionProgress `protobuf:"bytes,3,rep,name=function_progress,json=functionProgress" json:"function_progress,omitempty"`
}

func (m *ProgressResponse) Reset()                    { *m = ProgressResponse{} }
func (m *ProgressResponse) String() string            { return proto.CompactTextString(m) }
func (*ProgressResponse) ProtoMessage()               {}
func (*ProgressResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ProgressResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ProgressResponse) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *ProgressResponse) GetFunctionProgress() []*FunctionProgress {
	if m != nil {
		return m.FunctionProgress
	}
	return nil
}

type FunctionProgress struct {
	// The function name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The platform for which the function progress is reported.
	Platform Platform_Name `protobuf:"varint,2,opt,name=platform,enum=tricium.Platform_Name" json:"platform,omitempty"`
	// The state of the function.
	//
	// For an function on a specific platform this state corresponds to the state
	// of the worker, else it is the aggregated state of all workers for the function.
	State State `protobuf:"varint,3,opt,name=state,enum=tricium.State" json:"state,omitempty"`
	// URL to the swarming server running tasks for the workers of the function.
	SwarmingUrl string `protobuf:"bytes,4,opt,name=swarming_url,json=swarmingUrl" json:"swarming_url,omitempty"`
	// The ID of the swarming task triggered for the function worker.
	SwarmingTaskId string `protobuf:"bytes,5,opt,name=swarming_task_id,json=swarmingTaskId" json:"swarming_task_id,omitempty"`
	// Number of comments.
	//
	// For analyzers that are done and produce comments.
	NumComments int32 `protobuf:"varint,6,opt,name=num_comments,json=numComments" json:"num_comments,omitempty"`
}

func (m *FunctionProgress) Reset()                    { *m = FunctionProgress{} }
func (m *FunctionProgress) String() string            { return proto.CompactTextString(m) }
func (*FunctionProgress) ProtoMessage()               {}
func (*FunctionProgress) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *FunctionProgress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FunctionProgress) GetPlatform() Platform_Name {
	if m != nil {
		return m.Platform
	}
	return Platform_ANY
}

func (m *FunctionProgress) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *FunctionProgress) GetSwarmingUrl() string {
	if m != nil {
		return m.SwarmingUrl
	}
	return ""
}

func (m *FunctionProgress) GetSwarmingTaskId() string {
	if m != nil {
		return m.SwarmingTaskId
	}
	return ""
}

func (m *FunctionProgress) GetNumComments() int32 {
	if m != nil {
		return m.NumComments
	}
	return 0
}

type ResultsRequest struct {
	// Run ID returned by an analyze request.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// An optional function name.
	//
	// If provided, only results for the provided function are returned.
	// If a function is being run on more than one platform then the merged
	// results of the function can be returned by exclusion of a specific platform.
	//
	// NB! Currently not supported.
	Function string `protobuf:"bytes,2,opt,name=function" json:"function,omitempty"`
	// Optional platform that can be provided together with an function name.
	//
	// If provided, only results for the provided platform and function are returned.
	//
	// NB! Currently not supported.
	Platform Platform_Name `protobuf:"varint,3,opt,name=platform,enum=tricium.Platform_Name" json:"platform,omitempty"`
}

func (m *ResultsRequest) Reset()                    { *m = ResultsRequest{} }
func (m *ResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*ResultsRequest) ProtoMessage()               {}
func (*ResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *ResultsRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ResultsRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ResultsRequest) GetPlatform() Platform_Name {
	if m != nil {
		return m.Platform
	}
	return Platform_ANY
}

type ResultsResponse struct {
	// TODO(emso): Support paging of results to deal with large number of results.
	Results *Data_Results `protobuf:"bytes,1,opt,name=results" json:"results,omitempty"`
	// Whether the returned results are merged.
	//
	// Results may be merged if a result request for an function running on multiple
	// platforms was made and the request did not include a specific platform.
	// Results for a run with no specific function selected will be marked as merged
	// if any included analyzer results were merged.
	IsMerged bool `protobuf:"varint,2,opt,name=is_merged,json=isMerged" json:"is_merged,omitempty"`
}

func (m *ResultsResponse) Reset()                    { *m = ResultsResponse{} }
func (m *ResultsResponse) String() string            { return proto.CompactTextString(m) }
func (*ResultsResponse) ProtoMessage()               {}
func (*ResultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *ResultsResponse) GetResults() *Data_Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ResultsResponse) GetIsMerged() bool {
	if m != nil {
		return m.IsMerged
	}
	return false
}

type FeedbackRequest struct {
	// Analyzer category to provide aggregated feedback for.
	//
	// This includes the analyzer name along with optional subcategories
	// separated with slash, e.g., "ClangTidy" or "ClangTidy/llvm-header-guard".
	//
	// Required field. Must include at least the analyzer name and should not
	// end with a slash.
	Category string `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	// Start of time period to report feedback for.
	//
	// Feedback for comments created from this time will be included.
	// Must be on the form "2006-01-02T08:04:05Z" (RFC 3339) and before end_time.
	//
	// Optional field. Defaults to epoch start of time (Jan 1, 1970).
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End of time period to report feedback for.
	//
	// Feedback from comments created before this time will be included.
	// Must be on the form "2006-01-02T08:04:05Z" (RFC 3339) and after start_time.
	//
	// Optional field. Defaults to now.
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *FeedbackRequest) Reset()                    { *m = FeedbackRequest{} }
func (m *FeedbackRequest) String() string            { return proto.CompactTextString(m) }
func (*FeedbackRequest) ProtoMessage()               {}
func (*FeedbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *FeedbackRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *FeedbackRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *FeedbackRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type FeedbackResponse struct {
	// Number of returned comments.
	//
	// In any case where an analyzer was run on multiple platforms and the resulting
	// comments were merged, only merged comments are returned in this count. Note that
	// only merged comments are ever returned from the Tricium service.
	Comments int32 `protobuf:"varint,1,opt,name=comments" json:"comments,omitempty"`
	// Number of collected ‘not useful’ reports.
	NotUsefulReports int32 `protobuf:"varint,2,opt,name=not_useful_reports,json=notUsefulReports" json:"not_useful_reports,omitempty"`
	// List of URLs to ‘not useful’ bug reports.
	Issues []string `protobuf:"bytes,3,rep,name=issues" json:"issues,omitempty"`
}

func (m *FeedbackResponse) Reset()                    { *m = FeedbackResponse{} }
func (m *FeedbackResponse) String() string            { return proto.CompactTextString(m) }
func (*FeedbackResponse) ProtoMessage()               {}
func (*FeedbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *FeedbackResponse) GetComments() int32 {
	if m != nil {
		return m.Comments
	}
	return 0
}

func (m *FeedbackResponse) GetNotUsefulReports() int32 {
	if m != nil {
		return m.NotUsefulReports
	}
	return 0
}

func (m *FeedbackResponse) GetIssues() []string {
	if m != nil {
		return m.Issues
	}
	return nil
}

type ReportNotUsefulRequest struct {
	// ID of comment as returned by the Results end point.
	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	// More feedback information.
	//
	// Optional field.
	MoreDetails string `protobuf:"bytes,2,opt,name=more_details,json=moreDetails" json:"more_details,omitempty"`
}

func (m *ReportNotUsefulRequest) Reset()                    { *m = ReportNotUsefulRequest{} }
func (m *ReportNotUsefulRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportNotUsefulRequest) ProtoMessage()               {}
func (*ReportNotUsefulRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *ReportNotUsefulRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *ReportNotUsefulRequest) GetMoreDetails() string {
	if m != nil {
		return m.MoreDetails
	}
	return ""
}

type ReportNotUsefulResponse struct {
	// URL to issue if created.
	//
	// Only created if there were feedback details.
	Issue string `protobuf:"bytes,1,opt,name=issue" json:"issue,omitempty"`
}

func (m *ReportNotUsefulResponse) Reset()                    { *m = ReportNotUsefulResponse{} }
func (m *ReportNotUsefulResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportNotUsefulResponse) ProtoMessage()               {}
func (*ReportNotUsefulResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *ReportNotUsefulResponse) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

// Gerrit consumer details to be provided if a Gerrit consumer is specified.
type GerritConsumerDetails struct {
	// Gerrit host.
	//
	// This value must not include protocol and is assumed to not include '##'.
	//
	// This field is required.
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// Gerrit project name.
	//
	// This value is assumed to not include '##'.
	//
	// This field is required.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// Gerrit change ID.
	//
	// This value should be a fully qualified ID on the form "<project>~<branch>~<Change-Id>",
	// where <Change-Id> is a SHA and not a lecacy change ID number.
	// Note that refs/heads can be omitted from the branch.
	//
	// Example: "myProject~master~I8473b95934b5732ac55d26311a706c9c2bde9940"
	//
	// This field is required.
	Change string `protobuf:"bytes,3,opt,name=change" json:"change,omitempty"`
	// Gerrit change revision.
	//
	// This value should be the fetch URL for a revision of a change. Note that
	// the last number of a change revision ref maps to the corresponding patch set
	// number.
	//
	// Example: "refs/changes/97/97/1"
	//
	// This field is required.
	Revision string `protobuf:"bytes,4,opt,name=revision" json:"revision,omitempty"`
}

func (m *GerritConsumerDetails) Reset()                    { *m = GerritConsumerDetails{} }
func (m *GerritConsumerDetails) String() string            { return proto.CompactTextString(m) }
func (*GerritConsumerDetails) ProtoMessage()               {}
func (*GerritConsumerDetails) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *GerritConsumerDetails) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GerritConsumerDetails) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GerritConsumerDetails) GetChange() string {
	if m != nil {
		return m.Change
	}
	return ""
}

func (m *GerritConsumerDetails) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func init() {
	proto.RegisterType((*AnalyzeRequest)(nil), "tricium.AnalyzeRequest")
	proto.RegisterType((*AnalyzeResponse)(nil), "tricium.AnalyzeResponse")
	proto.RegisterType((*ProgressRequest)(nil), "tricium.ProgressRequest")
	proto.RegisterType((*ProgressResponse)(nil), "tricium.ProgressResponse")
	proto.RegisterType((*FunctionProgress)(nil), "tricium.FunctionProgress")
	proto.RegisterType((*ResultsRequest)(nil), "tricium.ResultsRequest")
	proto.RegisterType((*ResultsResponse)(nil), "tricium.ResultsResponse")
	proto.RegisterType((*FeedbackRequest)(nil), "tricium.FeedbackRequest")
	proto.RegisterType((*FeedbackResponse)(nil), "tricium.FeedbackResponse")
	proto.RegisterType((*ReportNotUsefulRequest)(nil), "tricium.ReportNotUsefulRequest")
	proto.RegisterType((*ReportNotUsefulResponse)(nil), "tricium.ReportNotUsefulResponse")
	proto.RegisterType((*GerritConsumerDetails)(nil), "tricium.GerritConsumerDetails")
	proto.RegisterEnum("tricium.State", State_name, State_value)
	proto.RegisterEnum("tricium.Consumer", Consumer_name, Consumer_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tricium service

type TriciumClient interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	// Progress requests progress information for a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
	// Results requests analysis results from a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
	// Feedback requests feedback for an analyzer category.
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	// ReportNotUseful reports not useful feedback for a robot comment.
	//
	// NB! Issue reporting is currently not supported.
	ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error)
}
type triciumPRPCClient struct {
	client *prpc.Client
}

func NewTriciumPRPCClient(client *prpc.Client) TriciumClient {
	return &triciumPRPCClient{client}
}

func (c *triciumPRPCClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Feedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error) {
	out := new(ReportNotUsefulResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "ReportNotUseful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type triciumClient struct {
	cc *grpc.ClientConn
}

func NewTriciumClient(cc *grpc.ClientConn) TriciumClient {
	return &triciumClient{cc}
}

func (c *triciumClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := grpc.Invoke(ctx, "/tricium.Tricium/Analyze", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := grpc.Invoke(ctx, "/tricium.Tricium/Progress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := grpc.Invoke(ctx, "/tricium.Tricium/Results", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := grpc.Invoke(ctx, "/tricium.Tricium/Feedback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error) {
	out := new(ReportNotUsefulResponse)
	err := grpc.Invoke(ctx, "/tricium.Tricium/ReportNotUseful", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tricium service

type TriciumServer interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	// Progress requests progress information for a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Progress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	// Results requests analysis results from a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
	// Feedback requests feedback for an analyzer category.
	Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	// ReportNotUseful reports not useful feedback for a robot comment.
	//
	// NB! Issue reporting is currently not supported.
	ReportNotUseful(context.Context, *ReportNotUsefulRequest) (*ReportNotUsefulResponse, error)
}

func RegisterTriciumServer(s prpc.Registrar, srv TriciumServer) {
	s.RegisterService(&_Tricium_serviceDesc, srv)
}

func _Tricium_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Progress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Progress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Feedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_ReportNotUseful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNotUsefulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).ReportNotUseful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/ReportNotUseful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).ReportNotUseful(ctx, req.(*ReportNotUsefulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tricium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tricium.Tricium",
	HandlerType: (*TriciumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Tricium_Analyze_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _Tricium_Progress_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _Tricium_Results_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _Tricium_Feedback_Handler,
		},
		{
			MethodName: "ReportNotUseful",
			Handler:    _Tricium_ReportNotUseful_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/v1/tricium.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/v1/tricium.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x51, 0x6f, 0xdb, 0x36,
	0x10, 0xae, 0xe2, 0xc8, 0x96, 0xcf, 0xad, 0xa3, 0x12, 0x4d, 0xe2, 0x78, 0xe8, 0xea, 0x69, 0x7b,
	0x30, 0x8a, 0x2d, 0xc1, 0xbc, 0xd7, 0x02, 0x45, 0x66, 0x2b, 0x81, 0x81, 0xd6, 0x09, 0x18, 0xfb,
	0x65, 0x2f, 0x02, 0x6b, 0xd1, 0x8a, 0x16, 0x8b, 0xf2, 0x48, 0xaa, 0x45, 0xf6, 0x47, 0xf6, 0xb3,
	0xf6, 0x0b, 0xf6, 0x03, 0xf6, 0xb6, 0x9f, 0x30, 0x88, 0x22, 0x69, 0xc7, 0xf1, 0x8a, 0x01, 0x7b,
	0xd8, 0x9b, 0xbf, 0xbb, 0x8f, 0x77, 0xfc, 0x8e, 0x77, 0x27, 0x43, 0x90, 0xb2, 0x05, 0x27, 0x67,
	0x92, 0xa7, 0xf3, 0xb4, 0xc8, 0xce, 0xc8, 0x2a, 0x3d, 0xfb, 0xf8, 0xbd, 0x81, 0xa7, 0x2b, 0x9e,
	0xcb, 0x1c, 0x35, 0x34, 0xec, 0xbe, 0xda, 0x49, 0x8e, 0x89, 0x24, 0x15, 0xb3, 0xfb, 0xf5, 0x4e,
	0xc2, 0x6a, 0x49, 0xe4, 0x22, 0xe7, 0x3a, 0x5c, 0xf0, 0xbb, 0x03, 0xed, 0x73, 0x46, 0x96, 0xf7,
	0xbf, 0x52, 0x4c, 0x7f, 0x29, 0xa8, 0x90, 0xa8, 0x03, 0x8d, 0x15, 0xcf, 0x7f, 0xa6, 0x73, 0xd9,
	0x71, 0x7a, 0x4e, 0xbf, 0x89, 0x0d, 0x44, 0xc7, 0xd0, 0x48, 0x52, 0x19, 0x71, 0xba, 0xe8, 0xec,
	0x29, 0x4f, 0x3d, 0x49, 0x25, 0xa6, 0x0b, 0xf4, 0x02, 0xdc, 0x15, 0x91, 0xb7, 0xa2, 0x53, 0xeb,
	0xd5, 0xfa, 0x4d, 0x5c, 0x01, 0xf4, 0x1d, 0x78, 0xf3, 0x9c, 0x89, 0x22, 0xa3, 0xbc, 0xb3, 0xdf,
	0x73, 0xfa, 0xed, 0xc1, 0xf3, 0x53, 0x23, 0x66, 0xa8, 0x1d, 0xd8, 0x52, 0x50, 0x08, 0xed, 0x84,
	0x72, 0x9e, 0xca, 0x28, 0xa6, 0x92, 0xa4, 0x4b, 0xd1, 0x71, 0x7b, 0x4e, 0xbf, 0x35, 0xf8, 0xd2,
	0x1e, 0xba, 0x54, 0x6e, 0x73, 0x74, 0x54, 0xb1, 0xf0, 0xb3, 0xea, 0x94, 0x86, 0x41, 0x1f, 0x0e,
	0xac, 0x20, 0xb1, 0xca, 0x99, 0xa0, 0xe8, 0x10, 0xea, 0xbc, 0x60, 0x51, 0x1a, 0x6b, 0x41, 0x2e,
	0x2f, 0xd8, 0x38, 0x0e, 0xfe, 0x74, 0xe0, 0xe0, 0x9a, 0xe7, 0x09, 0xa7, 0x42, 0x18, 0xf1, 0xbb,
	0xa9, 0xa8, 0x0b, 0xde, 0xa2, 0x60, 0x73, 0x99, 0xe6, 0x4c, 0x4b, 0xb7, 0xb8, 0x94, 0x69, 0x8a,
	0xda, 0xa9, 0xa9, 0x1b, 0xaf, 0x65, 0x5e, 0x6b, 0x07, 0xb6, 0x94, 0xff, 0xa9, 0x2a, 0xbf, 0x39,
	0xe0, 0xaf, 0xb5, 0x7e, 0xb6, 0x2e, 0xe8, 0x1b, 0x70, 0x85, 0x24, 0x92, 0x2a, 0xa5, 0xed, 0x41,
	0xdb, 0x66, 0xba, 0x29, 0xad, 0xb8, 0x72, 0xa2, 0x0b, 0x78, 0x6e, 0x4a, 0x10, 0xad, 0x74, 0x64,
	0xf5, 0xfe, 0xad, 0xc1, 0x89, 0x3d, 0x71, 0xa1, 0x19, 0x36, 0xb5, 0xbf, 0xd8, 0xb2, 0x04, 0x7f,
	0x39, 0xe0, 0x6f, 0xd3, 0x10, 0x82, 0x7d, 0x46, 0x32, 0xaa, 0xef, 0xa5, 0x7e, 0xa3, 0xc1, 0x46,
	0x9d, 0xab, 0x9b, 0x1d, 0x3d, 0xaa, 0xf3, 0xe9, 0x84, 0x64, 0x74, 0xa3, 0xd8, 0x56, 0x4a, 0xed,
	0x73, 0x52, 0xbe, 0x82, 0xa7, 0xe2, 0x13, 0xe1, 0x59, 0xca, 0x92, 0xa8, 0xe0, 0x4b, 0xf5, 0x2c,
	0x4d, 0xdc, 0x32, 0xb6, 0x19, 0x5f, 0xa2, 0x3e, 0xf8, 0x96, 0x22, 0x89, 0xb8, 0x2b, 0x8b, 0xe6,
	0x2a, 0x5a, 0xdb, 0xd8, 0xa7, 0x44, 0xdc, 0x8d, 0xe3, 0x32, 0x18, 0x2b, 0xb2, 0x68, 0x9e, 0x67,
	0x19, 0x65, 0x52, 0x74, 0xea, 0x3d, 0xa7, 0xef, 0xe2, 0x16, 0x2b, 0xb2, 0xa1, 0x36, 0x05, 0x9f,
	0xa0, 0x8d, 0xa9, 0x28, 0x96, 0xf2, 0xbf, 0xb4, 0xdd, 0x60, 0xab, 0xed, 0xfe, 0x45, 0x39, 0x82,
	0x08, 0x0e, 0x6c, 0x62, 0xdd, 0x03, 0x67, 0xd0, 0xe0, 0x95, 0x49, 0xa5, 0x6e, 0x0d, 0x0e, 0x6d,
	0x94, 0x51, 0xb9, 0x4b, 0x0c, 0xdf, 0xb0, 0xd0, 0x17, 0xd0, 0x4c, 0x45, 0x94, 0x51, 0x9e, 0xd0,
	0x58, 0x5d, 0xca, 0xc3, 0x5e, 0x2a, 0xde, 0x2b, 0x1c, 0x24, 0x70, 0x70, 0x41, 0x69, 0xfc, 0x81,
	0xcc, 0xef, 0x8c, 0xb4, 0x2e, 0x78, 0x73, 0x22, 0x69, 0x92, 0xf3, 0x7b, 0x2d, 0xce, 0x62, 0xf4,
	0x12, 0x40, 0x48, 0xc2, 0x65, 0x24, 0xd3, 0x8c, 0x6a, 0x85, 0x4d, 0x65, 0x99, 0xa6, 0x19, 0x45,
	0x27, 0xe0, 0x51, 0x16, 0x57, 0xce, 0x5a, 0xb5, 0x8a, 0x28, 0x8b, 0x4b, 0x57, 0x20, 0xc1, 0x5f,
	0x27, 0xd2, 0x52, 0xca, 0x4c, 0xa6, 0xea, 0x8e, 0xaa, 0xba, 0xc5, 0xe8, 0x5b, 0x40, 0x2c, 0x97,
	0x51, 0x21, 0xe8, 0xa2, 0x58, 0x46, 0x9c, 0xae, 0x72, 0x2e, 0x85, 0xca, 0xe8, 0x62, 0x9f, 0xe5,
	0x72, 0xa6, 0x1c, 0xb8, 0xb2, 0xa3, 0x23, 0xa8, 0xa7, 0x42, 0x14, 0xd4, 0x2c, 0x34, 0x8d, 0x82,
	0x9f, 0xe0, 0xa8, 0xa2, 0x4c, 0xd6, 0x27, 0x2a, 0x95, 0x2f, 0x01, 0x74, 0xae, 0xf5, 0x23, 0x36,
	0xb5, 0xa5, 0x6a, 0x8a, 0x2c, 0xe7, 0xd4, 0xce, 0x70, 0x25, 0xb5, 0x55, 0xda, 0xcc, 0x84, 0x9e,
	0xc1, 0xf1, 0xa3, 0xd8, 0x5a, 0xd8, 0x0b, 0x70, 0xd5, 0x05, 0x4c, 0x73, 0x28, 0x10, 0xdc, 0xc3,
	0xe1, 0xce, 0xd1, 0x2f, 0x87, 0xe7, 0x36, 0x17, 0x66, 0x7b, 0xab, 0xdf, 0x9b, 0x4b, 0x7d, 0xef,
	0xe1, 0x52, 0x3f, 0x82, 0xfa, 0xfc, 0x96, 0xb0, 0xc4, 0x94, 0x58, 0xa3, 0xb2, 0x9a, 0x9c, 0x7e,
	0x4c, 0x45, 0xd9, 0x7b, 0xd5, 0x40, 0x58, 0xfc, 0x9a, 0x82, 0xab, 0x06, 0x08, 0xb5, 0xa0, 0x71,
	0x1d, 0x4e, 0x46, 0xe3, 0xc9, 0xa5, 0xff, 0xa4, 0x04, 0x78, 0x36, 0x99, 0x94, 0xc0, 0x29, 0xc1,
	0xcd, 0x6c, 0x38, 0x0c, 0x6f, 0x6e, 0xfc, 0xbd, 0x12, 0x5c, 0x9c, 0x8f, 0xdf, 0xcd, 0x70, 0xe8,
	0xd7, 0xd0, 0x53, 0xf0, 0x86, 0xe7, 0x93, 0x61, 0xf8, 0x2e, 0x1c, 0xf9, 0xfb, 0xe8, 0x19, 0x34,
	0xa7, 0xe3, 0xf7, 0xe1, 0x28, 0xba, 0x9a, 0x4d, 0x7d, 0xb7, 0x64, 0x9e, 0xff, 0x78, 0x85, 0xa7,
	0xe1, 0xc8, 0xaf, 0xbf, 0xee, 0x81, 0x67, 0xb4, 0x21, 0x0f, 0xf6, 0x27, 0x57, 0x93, 0xd0, 0x7f,
	0x82, 0x00, 0xea, 0x97, 0x21, 0xc6, 0xe3, 0xa9, 0xef, 0x0c, 0xfe, 0xd8, 0x83, 0xc6, 0xb4, 0x6a,
	0x57, 0xf4, 0x06, 0x1a, 0x7a, 0xf1, 0xa3, 0x63, 0xdb, 0xc3, 0x0f, 0xbf, 0x6d, 0xdd, 0xce, 0x63,
	0x87, 0xae, 0xf1, 0x5b, 0xf0, 0xec, 0xf6, 0x59, 0xb3, 0xb6, 0x3e, 0x0f, 0xdd, 0x93, 0x1d, 0x1e,
	0x1d, 0xe0, 0x0d, 0x34, 0xf4, 0xac, 0x6c, 0xa4, 0x7f, 0x38, 0xe6, 0x1b, 0xe9, 0xb7, 0xc7, 0xf0,
	0x2d, 0x78, 0xa6, 0x9f, 0x37, 0xd2, 0x6f, 0xcd, 0xd2, 0x46, 0xfa, 0x47, 0xcd, 0x3f, 0x2d, 0x47,
	0xfb, 0x41, 0xfb, 0xa0, 0x57, 0x1b, 0xd9, 0x76, 0x35, 0x6d, 0xb7, 0xf7, 0xcf, 0x84, 0x2a, 0xea,
	0x87, 0xba, 0xfa, 0x97, 0xf0, 0xc3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x17, 0x4b, 0xbd,
	0x9a, 0x08, 0x00, 0x00,
}
