// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

package swarming

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TaskSpec describes a task request and its state, for the purposes of the
// external scheduler API.
//
// It intentionally elides aspects of a task request that are irrelevant
// to scheduling decisions, to keep this proto small for performance reasons.
//
// This message format is in its early stages, and may be subject to frequent
// or even breaking changes as the external scheduler API is rolled out.
type TaskSpec struct {
	// ID is the swarming task request it.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tags is the list of tags applied to this task request.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// Slices is the set of task slices for this spec. A TaskSpec must contain
	// at least 1 slice.
	Slices []*SliceSpec `protobuf:"bytes,3,rep,name=slices,proto3" json:"slices,omitempty"`
	// State is the current state of this task.
	State TaskState `protobuf:"varint,4,opt,name=state,proto3,enum=swarming.TaskState" json:"state,omitempty"`
	// BotID is the id of the bot that this task is running on. It is only
	// valid if state=RUNNING.
	BotId string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// EnqueuedTime is the time at which a task was enqueued. It is only valid
	// if state=PENDING.
	EnqueuedTime         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=enqueued_time,json=enqueuedTime,proto3" json:"enqueued_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TaskSpec) Reset()         { *m = TaskSpec{} }
func (m *TaskSpec) String() string { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()    {}
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{0}
}

func (m *TaskSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSpec.Unmarshal(m, b)
}
func (m *TaskSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSpec.Marshal(b, m, deterministic)
}
func (m *TaskSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSpec.Merge(m, src)
}
func (m *TaskSpec) XXX_Size() int {
	return xxx_messageInfo_TaskSpec.Size(m)
}
func (m *TaskSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSpec proto.InternalMessageInfo

func (m *TaskSpec) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskSpec) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TaskSpec) GetSlices() []*SliceSpec {
	if m != nil {
		return m.Slices
	}
	return nil
}

func (m *TaskSpec) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_INVALID
}

func (m *TaskSpec) GetBotId() string {
	if m != nil {
		return m.BotId
	}
	return ""
}

func (m *TaskSpec) GetEnqueuedTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueuedTime
	}
	return nil
}

// SliceSpec describes a task request slice, for the purposes of TaskSpec.
type SliceSpec struct {
	// Dimensions is set dimension strings for this slice.
	Dimensions           []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SliceSpec) Reset()         { *m = SliceSpec{} }
func (m *SliceSpec) String() string { return proto.CompactTextString(m) }
func (*SliceSpec) ProtoMessage()    {}
func (*SliceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{1}
}

func (m *SliceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SliceSpec.Unmarshal(m, b)
}
func (m *SliceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SliceSpec.Marshal(b, m, deterministic)
}
func (m *SliceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceSpec.Merge(m, src)
}
func (m *SliceSpec) XXX_Size() int {
	return xxx_messageInfo_SliceSpec.Size(m)
}
func (m *SliceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SliceSpec proto.InternalMessageInfo

func (m *SliceSpec) GetDimensions() []string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type IdleBot struct {
	// BotId is the id of the bot that is idle.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Dimensions is the dimension set of the idle bot.
	Dimensions           []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdleBot) Reset()         { *m = IdleBot{} }
func (m *IdleBot) String() string { return proto.CompactTextString(m) }
func (*IdleBot) ProtoMessage()    {}
func (*IdleBot) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{2}
}

func (m *IdleBot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdleBot.Unmarshal(m, b)
}
func (m *IdleBot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdleBot.Marshal(b, m, deterministic)
}
func (m *IdleBot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdleBot.Merge(m, src)
}
func (m *IdleBot) XXX_Size() int {
	return xxx_messageInfo_IdleBot.Size(m)
}
func (m *IdleBot) XXX_DiscardUnknown() {
	xxx_messageInfo_IdleBot.DiscardUnknown(m)
}

var xxx_messageInfo_IdleBot proto.InternalMessageInfo

func (m *IdleBot) GetBotId() string {
	if m != nil {
		return m.BotId
	}
	return ""
}

func (m *IdleBot) GetDimensions() []string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type AssignTasksRequest struct {
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	// IdleBots is the set of idle bots that are trying to get tasks assigned.
	IdleBots []*IdleBot `protobuf:"bytes,2,rep,name=idle_bots,json=idleBots,proto3" json:"idle_bots,omitempty"`
	// Time is the current time (according to swarming) at which these bots
	// are attempting to have tasks assigned to them.
	Time                 *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AssignTasksRequest) Reset()         { *m = AssignTasksRequest{} }
func (m *AssignTasksRequest) String() string { return proto.CompactTextString(m) }
func (*AssignTasksRequest) ProtoMessage()    {}
func (*AssignTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{3}
}

func (m *AssignTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignTasksRequest.Unmarshal(m, b)
}
func (m *AssignTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignTasksRequest.Marshal(b, m, deterministic)
}
func (m *AssignTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignTasksRequest.Merge(m, src)
}
func (m *AssignTasksRequest) XXX_Size() int {
	return xxx_messageInfo_AssignTasksRequest.Size(m)
}
func (m *AssignTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignTasksRequest proto.InternalMessageInfo

func (m *AssignTasksRequest) GetSchedulerId() string {
	if m != nil {
		return m.SchedulerId
	}
	return ""
}

func (m *AssignTasksRequest) GetIdleBots() []*IdleBot {
	if m != nil {
		return m.IdleBots
	}
	return nil
}

func (m *AssignTasksRequest) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type AssignTasksResponse struct {
	// Assignments is the set of (bot, task) assignments that the scheduler
	// determined should be made.
	Assignments          []*TaskAssignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AssignTasksResponse) Reset()         { *m = AssignTasksResponse{} }
func (m *AssignTasksResponse) String() string { return proto.CompactTextString(m) }
func (*AssignTasksResponse) ProtoMessage()    {}
func (*AssignTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{4}
}

func (m *AssignTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignTasksResponse.Unmarshal(m, b)
}
func (m *AssignTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignTasksResponse.Marshal(b, m, deterministic)
}
func (m *AssignTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignTasksResponse.Merge(m, src)
}
func (m *AssignTasksResponse) XXX_Size() int {
	return xxx_messageInfo_AssignTasksResponse.Size(m)
}
func (m *AssignTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignTasksResponse proto.InternalMessageInfo

func (m *AssignTasksResponse) GetAssignments() []*TaskAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type TaskAssignment struct {
	// BotID is the bot that should be assigned a task.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// TaskID is the task that should be assigned to the bot.
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskAssignment) Reset()         { *m = TaskAssignment{} }
func (m *TaskAssignment) String() string { return proto.CompactTextString(m) }
func (*TaskAssignment) ProtoMessage()    {}
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{5}
}

func (m *TaskAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskAssignment.Unmarshal(m, b)
}
func (m *TaskAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskAssignment.Marshal(b, m, deterministic)
}
func (m *TaskAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskAssignment.Merge(m, src)
}
func (m *TaskAssignment) XXX_Size() int {
	return xxx_messageInfo_TaskAssignment.Size(m)
}
func (m *TaskAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_TaskAssignment proto.InternalMessageInfo

func (m *TaskAssignment) GetBotId() string {
	if m != nil {
		return m.BotId
	}
	return ""
}

func (m *TaskAssignment) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type GetCancellationsRequest struct {
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId          string   `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCancellationsRequest) Reset()         { *m = GetCancellationsRequest{} }
func (m *GetCancellationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCancellationsRequest) ProtoMessage()    {}
func (*GetCancellationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{6}
}

func (m *GetCancellationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCancellationsRequest.Unmarshal(m, b)
}
func (m *GetCancellationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCancellationsRequest.Marshal(b, m, deterministic)
}
func (m *GetCancellationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCancellationsRequest.Merge(m, src)
}
func (m *GetCancellationsRequest) XXX_Size() int {
	return xxx_messageInfo_GetCancellationsRequest.Size(m)
}
func (m *GetCancellationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCancellationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCancellationsRequest proto.InternalMessageInfo

func (m *GetCancellationsRequest) GetSchedulerId() string {
	if m != nil {
		return m.SchedulerId
	}
	return ""
}

type GetCancellationsResponse struct {
	// Cancellations is the set of (bot, task) pairs for tasks that should be
	// cancelled on bots.
	Cancellations        []*GetCancellationsResponse_Cancellation `protobuf:"bytes,1,rep,name=cancellations,proto3" json:"cancellations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *GetCancellationsResponse) Reset()         { *m = GetCancellationsResponse{} }
func (m *GetCancellationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCancellationsResponse) ProtoMessage()    {}
func (*GetCancellationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{7}
}

func (m *GetCancellationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCancellationsResponse.Unmarshal(m, b)
}
func (m *GetCancellationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCancellationsResponse.Marshal(b, m, deterministic)
}
func (m *GetCancellationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCancellationsResponse.Merge(m, src)
}
func (m *GetCancellationsResponse) XXX_Size() int {
	return xxx_messageInfo_GetCancellationsResponse.Size(m)
}
func (m *GetCancellationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCancellationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCancellationsResponse proto.InternalMessageInfo

func (m *GetCancellationsResponse) GetCancellations() []*GetCancellationsResponse_Cancellation {
	if m != nil {
		return m.Cancellations
	}
	return nil
}

type GetCancellationsResponse_Cancellation struct {
	// BotID is the bot that a task should be cancelled on.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// TaskID is the task that should be cancelled on the bot.
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCancellationsResponse_Cancellation) Reset()         { *m = GetCancellationsResponse_Cancellation{} }
func (m *GetCancellationsResponse_Cancellation) String() string { return proto.CompactTextString(m) }
func (*GetCancellationsResponse_Cancellation) ProtoMessage()    {}
func (*GetCancellationsResponse_Cancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{7, 0}
}

func (m *GetCancellationsResponse_Cancellation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCancellationsResponse_Cancellation.Unmarshal(m, b)
}
func (m *GetCancellationsResponse_Cancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCancellationsResponse_Cancellation.Marshal(b, m, deterministic)
}
func (m *GetCancellationsResponse_Cancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCancellationsResponse_Cancellation.Merge(m, src)
}
func (m *GetCancellationsResponse_Cancellation) XXX_Size() int {
	return xxx_messageInfo_GetCancellationsResponse_Cancellation.Size(m)
}
func (m *GetCancellationsResponse_Cancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCancellationsResponse_Cancellation.DiscardUnknown(m)
}

var xxx_messageInfo_GetCancellationsResponse_Cancellation proto.InternalMessageInfo

func (m *GetCancellationsResponse_Cancellation) GetBotId() string {
	if m != nil {
		return m.BotId
	}
	return ""
}

func (m *GetCancellationsResponse_Cancellation) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type NotifyTasksItem struct {
	// Time is the time at which the given task was in the given state.
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Task describes a task request and its current state.
	Task                 *TaskSpec `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NotifyTasksItem) Reset()         { *m = NotifyTasksItem{} }
func (m *NotifyTasksItem) String() string { return proto.CompactTextString(m) }
func (*NotifyTasksItem) ProtoMessage()    {}
func (*NotifyTasksItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{8}
}

func (m *NotifyTasksItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyTasksItem.Unmarshal(m, b)
}
func (m *NotifyTasksItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyTasksItem.Marshal(b, m, deterministic)
}
func (m *NotifyTasksItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTasksItem.Merge(m, src)
}
func (m *NotifyTasksItem) XXX_Size() int {
	return xxx_messageInfo_NotifyTasksItem.Size(m)
}
func (m *NotifyTasksItem) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTasksItem.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTasksItem proto.InternalMessageInfo

func (m *NotifyTasksItem) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *NotifyTasksItem) GetTask() *TaskSpec {
	if m != nil {
		return m.Task
	}
	return nil
}

type NotifyTasksRequest struct {
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	// Notifications is the set of task notifications to send to the scheduler.
	Notifications        []*NotifyTasksItem `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NotifyTasksRequest) Reset()         { *m = NotifyTasksRequest{} }
func (m *NotifyTasksRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyTasksRequest) ProtoMessage()    {}
func (*NotifyTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{9}
}

func (m *NotifyTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyTasksRequest.Unmarshal(m, b)
}
func (m *NotifyTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyTasksRequest.Marshal(b, m, deterministic)
}
func (m *NotifyTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTasksRequest.Merge(m, src)
}
func (m *NotifyTasksRequest) XXX_Size() int {
	return xxx_messageInfo_NotifyTasksRequest.Size(m)
}
func (m *NotifyTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTasksRequest proto.InternalMessageInfo

func (m *NotifyTasksRequest) GetSchedulerId() string {
	if m != nil {
		return m.SchedulerId
	}
	return ""
}

func (m *NotifyTasksRequest) GetNotifications() []*NotifyTasksItem {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type NotifyTasksResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyTasksResponse) Reset()         { *m = NotifyTasksResponse{} }
func (m *NotifyTasksResponse) String() string { return proto.CompactTextString(m) }
func (*NotifyTasksResponse) ProtoMessage()    {}
func (*NotifyTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{10}
}

func (m *NotifyTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyTasksResponse.Unmarshal(m, b)
}
func (m *NotifyTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyTasksResponse.Marshal(b, m, deterministic)
}
func (m *NotifyTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTasksResponse.Merge(m, src)
}
func (m *NotifyTasksResponse) XXX_Size() int {
	return xxx_messageInfo_NotifyTasksResponse.Size(m)
}
func (m *NotifyTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTasksResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TaskSpec)(nil), "swarming.TaskSpec")
	proto.RegisterType((*SliceSpec)(nil), "swarming.SliceSpec")
	proto.RegisterType((*IdleBot)(nil), "swarming.IdleBot")
	proto.RegisterType((*AssignTasksRequest)(nil), "swarming.AssignTasksRequest")
	proto.RegisterType((*AssignTasksResponse)(nil), "swarming.AssignTasksResponse")
	proto.RegisterType((*TaskAssignment)(nil), "swarming.TaskAssignment")
	proto.RegisterType((*GetCancellationsRequest)(nil), "swarming.GetCancellationsRequest")
	proto.RegisterType((*GetCancellationsResponse)(nil), "swarming.GetCancellationsResponse")
	proto.RegisterType((*GetCancellationsResponse_Cancellation)(nil), "swarming.GetCancellationsResponse.Cancellation")
	proto.RegisterType((*NotifyTasksItem)(nil), "swarming.NotifyTasksItem")
	proto.RegisterType((*NotifyTasksRequest)(nil), "swarming.NotifyTasksRequest")
	proto.RegisterType((*NotifyTasksResponse)(nil), "swarming.NotifyTasksResponse")
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor_22a625af4bc1cc87) }

var fileDescriptor_22a625af4bc1cc87 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x9d, 0x36, 0x4d, 0xc6, 0x49, 0xa0, 0x1b, 0x55, 0x35, 0x11, 0x3f, 0xa9, 0x0f, 0x28,
	0xa8, 0x92, 0x23, 0x99, 0x1b, 0x42, 0xb4, 0x05, 0x21, 0x14, 0x0e, 0x48, 0x38, 0xe5, 0xc0, 0x29,
	0x72, 0xbc, 0x5b, 0xb3, 0x8a, 0xbd, 0x9b, 0x66, 0xd7, 0xa2, 0xbc, 0x00, 0xaf, 0xc0, 0x73, 0xf0,
	0x42, 0x3c, 0x0b, 0xda, 0xb5, 0x93, 0xac, 0x13, 0x42, 0xdb, 0x9b, 0xfd, 0xcd, 0xec, 0xcc, 0x7c,
	0xdf, 0x37, 0x03, 0xad, 0x79, 0x9a, 0x27, 0x94, 0xf9, 0xf3, 0x05, 0x97, 0x1c, 0x35, 0xc4, 0xf7,
	0x68, 0x91, 0x51, 0x96, 0xf4, 0x9e, 0x25, 0x9c, 0x27, 0x29, 0x19, 0x6a, 0x7c, 0x9a, 0x5f, 0x0d,
	0x25, 0xcd, 0x88, 0x90, 0x51, 0x36, 0x2f, 0x52, 0x7b, 0x8e, 0x8c, 0xc4, 0x4c, 0x14, 0x3f, 0xde,
	0x1f, 0x0b, 0x1a, 0x97, 0x91, 0x98, 0x8d, 0xe7, 0x24, 0x46, 0x1d, 0xb0, 0x29, 0x76, 0xad, 0xbe,
	0x35, 0x68, 0x86, 0x36, 0xc5, 0x08, 0xc1, 0x9e, 0x8c, 0x12, 0xe1, 0xda, 0xfd, 0xda, 0xa0, 0x19,
	0xea, 0x6f, 0x74, 0x0a, 0x75, 0x91, 0xd2, 0x98, 0x08, 0xb7, 0xd6, 0xaf, 0x0d, 0x9c, 0xa0, 0xeb,
	0x2f, 0x3b, 0xfb, 0x63, 0x85, 0xab, 0x42, 0x61, 0x99, 0x82, 0x5e, 0xc0, 0xbe, 0x90, 0x91, 0x24,
	0xee, 0x5e, 0xdf, 0x1a, 0x74, 0xcc, 0x5c, 0xdd, 0x53, 0x85, 0xc2, 0x22, 0x03, 0x1d, 0x41, 0x7d,
	0xca, 0xe5, 0x84, 0x62, 0x77, 0x5f, 0xf7, 0xdf, 0x9f, 0x72, 0x39, 0xc2, 0xe8, 0x0c, 0xda, 0x84,
	0x5d, 0xe7, 0x24, 0x27, 0x78, 0xa2, 0x88, 0xb8, 0xf5, 0xbe, 0x35, 0x70, 0x82, 0x9e, 0x5f, 0xb0,
	0xf4, 0x97, 0x2c, 0xfd, 0xcb, 0x25, 0xcb, 0xb0, 0xb5, 0x7c, 0xa0, 0x20, 0xef, 0x14, 0x9a, 0xab,
	0xb9, 0xd0, 0x53, 0x00, 0x4c, 0x33, 0xc2, 0x04, 0xe5, 0x4c, 0xb8, 0x96, 0xa6, 0x65, 0x20, 0xde,
	0x39, 0x1c, 0x8c, 0x70, 0x4a, 0xde, 0x72, 0x69, 0xcc, 0x63, 0x99, 0xf3, 0x54, 0x2b, 0xd8, 0x5b,
	0x15, 0x7e, 0x59, 0x80, 0x2e, 0x84, 0xa0, 0x09, 0x53, 0x0c, 0x45, 0x48, 0xae, 0x73, 0x22, 0x24,
	0x3a, 0x81, 0x96, 0x88, 0xbf, 0x11, 0x9c, 0xa7, 0x64, 0xb1, 0xae, 0xe9, 0xac, 0xb0, 0x11, 0x46,
	0x3e, 0x34, 0x29, 0x4e, 0xc9, 0x64, 0xca, 0x65, 0x51, 0xd8, 0x09, 0x0e, 0xd7, 0x7a, 0x95, 0x63,
	0x85, 0x0d, 0x5a, 0x7c, 0x08, 0xe4, 0xc3, 0x9e, 0x16, 0xa4, 0x76, 0xab, 0x20, 0x3a, 0xcf, 0xfb,
	0x0c, 0xdd, 0xca, 0x60, 0x62, 0xce, 0x99, 0x20, 0xe8, 0x15, 0x38, 0x91, 0x86, 0x33, 0xc2, 0x64,
	0xa1, 0x89, 0x13, 0xb8, 0x55, 0xa3, 0x2e, 0x56, 0x09, 0xa1, 0x99, 0xec, 0x9d, 0x43, 0xa7, 0x1a,
	0xde, 0xa5, 0xda, 0x31, 0x1c, 0xa8, 0xa5, 0x53, 0xb8, 0xad, 0xf1, 0xba, 0xfa, 0x1d, 0x61, 0xef,
	0x35, 0x1c, 0x7f, 0x20, 0xf2, 0x5d, 0xc4, 0x62, 0x92, 0xa6, 0x91, 0x54, 0x12, 0xde, 0x5d, 0x32,
	0xef, 0xb7, 0x05, 0xee, 0xf6, 0xf3, 0x92, 0xd8, 0x17, 0x68, 0xc7, 0x66, 0xa0, 0xa4, 0x36, 0x5c,
	0x53, 0xdb, 0xf5, 0xd4, 0x37, 0xd1, 0xb0, 0x5a, 0xa5, 0xf7, 0x06, 0x5a, 0x66, 0xf8, 0xde, 0x8c,
	0x29, 0x3c, 0xf8, 0xc4, 0x25, 0xbd, 0xfa, 0xa1, 0x6d, 0x18, 0x49, 0x92, 0xad, 0x9c, 0xb4, 0xee,
	0xe6, 0x24, 0x7a, 0xae, 0xce, 0x52, 0xcc, 0x74, 0x61, 0x27, 0x40, 0x1b, 0x47, 0xa5, 0xee, 0x4f,
	0xc7, 0xbd, 0x1b, 0x40, 0x46, 0xab, 0x7b, 0xac, 0xe2, 0x19, 0xb4, 0x99, 0x7a, 0x48, 0xe3, 0x52,
	0xba, 0x62, 0x1d, 0x1f, 0xad, 0x3b, 0x6d, 0x50, 0x08, 0xab, 0xf9, 0xde, 0x11, 0x74, 0x2b, 0x9d,
	0x0b, 0x5d, 0x83, 0x9f, 0x36, 0x1c, 0xbe, 0xbf, 0x91, 0x64, 0xc1, 0xa2, 0x74, 0xbc, 0xec, 0x87,
	0x3e, 0x82, 0x63, 0x2c, 0x26, 0x7a, 0xbc, 0xee, 0xb2, 0x7d, 0x48, 0xbd, 0x27, 0x3b, 0xa2, 0xa5,
	0xe9, 0x5f, 0xe1, 0xe1, 0xa6, 0xab, 0xe8, 0xe4, 0x7f, 0x8e, 0x17, 0x55, 0xbd, 0xdb, 0x97, 0x42,
	0x8d, 0x69, 0x70, 0x32, 0xc7, 0xdc, 0x16, 0xd9, 0x1c, 0xf3, 0x1f, 0x42, 0x4c, 0xeb, 0xda, 0xdb,
	0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x18, 0xb5, 0xe3, 0xc4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExternalSchedulerClient is the client API for ExternalScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExternalSchedulerClient interface {
	// AssignTasks determines which tasks should be run on which of the supplied
	// idle bots.
	AssignTasks(ctx context.Context, in *AssignTasksRequest, opts ...grpc.CallOption) (*AssignTasksResponse, error)
	// GetCancellations determines which tasks should be cancelled on which bots.
	GetCancellations(ctx context.Context, in *GetCancellationsRequest, opts ...grpc.CallOption) (*GetCancellationsResponse, error)
	// NotifyTasks informs the scheduler about the state of tasks (either new
	// tasks, or states of existing tasks).
	NotifyTasks(ctx context.Context, in *NotifyTasksRequest, opts ...grpc.CallOption) (*NotifyTasksResponse, error)
}
type externalSchedulerPRPCClient struct {
	client *prpc.Client
}

func NewExternalSchedulerPRPCClient(client *prpc.Client) ExternalSchedulerClient {
	return &externalSchedulerPRPCClient{client}
}

func (c *externalSchedulerPRPCClient) AssignTasks(ctx context.Context, in *AssignTasksRequest, opts ...grpc.CallOption) (*AssignTasksResponse, error) {
	out := new(AssignTasksResponse)
	err := c.client.Call(ctx, "swarming.ExternalScheduler", "AssignTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerPRPCClient) GetCancellations(ctx context.Context, in *GetCancellationsRequest, opts ...grpc.CallOption) (*GetCancellationsResponse, error) {
	out := new(GetCancellationsResponse)
	err := c.client.Call(ctx, "swarming.ExternalScheduler", "GetCancellations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerPRPCClient) NotifyTasks(ctx context.Context, in *NotifyTasksRequest, opts ...grpc.CallOption) (*NotifyTasksResponse, error) {
	out := new(NotifyTasksResponse)
	err := c.client.Call(ctx, "swarming.ExternalScheduler", "NotifyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type externalSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewExternalSchedulerClient(cc *grpc.ClientConn) ExternalSchedulerClient {
	return &externalSchedulerClient{cc}
}

func (c *externalSchedulerClient) AssignTasks(ctx context.Context, in *AssignTasksRequest, opts ...grpc.CallOption) (*AssignTasksResponse, error) {
	out := new(AssignTasksResponse)
	err := c.cc.Invoke(ctx, "/swarming.ExternalScheduler/AssignTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerClient) GetCancellations(ctx context.Context, in *GetCancellationsRequest, opts ...grpc.CallOption) (*GetCancellationsResponse, error) {
	out := new(GetCancellationsResponse)
	err := c.cc.Invoke(ctx, "/swarming.ExternalScheduler/GetCancellations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerClient) NotifyTasks(ctx context.Context, in *NotifyTasksRequest, opts ...grpc.CallOption) (*NotifyTasksResponse, error) {
	out := new(NotifyTasksResponse)
	err := c.cc.Invoke(ctx, "/swarming.ExternalScheduler/NotifyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalSchedulerServer is the server API for ExternalScheduler service.
type ExternalSchedulerServer interface {
	// AssignTasks determines which tasks should be run on which of the supplied
	// idle bots.
	AssignTasks(context.Context, *AssignTasksRequest) (*AssignTasksResponse, error)
	// GetCancellations determines which tasks should be cancelled on which bots.
	GetCancellations(context.Context, *GetCancellationsRequest) (*GetCancellationsResponse, error)
	// NotifyTasks informs the scheduler about the state of tasks (either new
	// tasks, or states of existing tasks).
	NotifyTasks(context.Context, *NotifyTasksRequest) (*NotifyTasksResponse, error)
}

func RegisterExternalSchedulerServer(s prpc.Registrar, srv ExternalSchedulerServer) {
	s.RegisterService(&_ExternalScheduler_serviceDesc, srv)
}

func _ExternalScheduler_AssignTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).AssignTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.ExternalScheduler/AssignTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).AssignTasks(ctx, req.(*AssignTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalScheduler_GetCancellations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCancellationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).GetCancellations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.ExternalScheduler/GetCancellations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).GetCancellations(ctx, req.(*GetCancellationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalScheduler_NotifyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).NotifyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.ExternalScheduler/NotifyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).NotifyTasks(ctx, req.(*NotifyTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExternalScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swarming.ExternalScheduler",
	HandlerType: (*ExternalSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignTasks",
			Handler:    _ExternalScheduler_AssignTasks_Handler,
		},
		{
			MethodName: "GetCancellations",
			Handler:    _ExternalScheduler_GetCancellations_Handler,
		},
		{
			MethodName: "NotifyTasks",
			Handler:    _ExternalScheduler_NotifyTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
