// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v3/api_proto/issue_objects.proto

package monorail_v3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Many values on an issue can be set either explicitly or by a rule.
// Next available tag: 3
type Derivation int32

const (
	// The default derivation. This value is used if the derivation is omitted.
	Derivation_DERIVATION_UNSPECIFIED Derivation = 0
	// The value was explicitly set on the issue.
	Derivation_EXPLICIT Derivation = 1
	// Value was auto-applied to the issue based on a project's rule. See
	// monorail/doc/userguide/project-owners.md#how-to-configure-filter-rules
	Derivation_RULE Derivation = 2
)

var Derivation_name = map[int32]string{
	0: "DERIVATION_UNSPECIFIED",
	1: "EXPLICIT",
	2: "RULE",
}

var Derivation_value = map[string]int32{
	"DERIVATION_UNSPECIFIED": 0,
	"EXPLICIT":               1,
	"RULE":                   2,
}

func (x Derivation) String() string {
	return proto.EnumName(Derivation_name, int32(x))
}

func (Derivation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{0}
}

// States that an issue or its comments can be in (aip.dev/216).
// Next available tag: 4
type IssueContentState int32

const (
	// The default value. This value is used if the state is omitted.
	IssueContentState_STATE_UNSPECIFIED IssueContentState = 0
	// The Issue or Comment is available.
	IssueContentState_ACTIVE IssueContentState = 1
	// The Issue or Comment has been deleted.
	IssueContentState_DELETED IssueContentState = 2
	// The Issue or Comment has been flagged as spam.
	// Takes precedent over DELETED.
	IssueContentState_SPAM IssueContentState = 3
)

var IssueContentState_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "ACTIVE",
	2: "DELETED",
	3: "SPAM",
}

var IssueContentState_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"ACTIVE":            1,
	"DELETED":           2,
	"SPAM":              3,
}

func (x IssueContentState) String() string {
	return proto.EnumName(IssueContentState_name, int32(x))
}

func (IssueContentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{1}
}

// The type of comment.
// Next available tag: 9
type Comment_Type int32

const (
	// The default comment type. Used if type is omitted.
	Comment_UNSPECIFIED Comment_Type = 0
	// A standard comment on an issue.
	Comment_COMMENT Comment_Type = 1
	// A comment representing a new description for the issue.
	Comment_DESCRIPTION Comment_Type = 2
)

var Comment_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "COMMENT",
	2: "DESCRIPTION",
}

var Comment_Type_value = map[string]int32{
	"UNSPECIFIED": 0,
	"COMMENT":     1,
	"DESCRIPTION": 2,
}

func (x Comment_Type) String() string {
	return proto.EnumName(Comment_Type_name, int32(x))
}

func (Comment_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{0, 0}
}

// Potential states for an approval.
// Next available tag: 8
type ApprovalValue_ApprovalStatus int32

const (
	// The default approval status. This value is used if the status is omitted.
	ApprovalValue_APPROVAL_STATUS_UNSPECIFIED ApprovalValue_ApprovalStatus = 0
	ApprovalValue_NEEDS_REVIEW                ApprovalValue_ApprovalStatus = 1
	ApprovalValue_NA                          ApprovalValue_ApprovalStatus = 2
	ApprovalValue_REVIEW_REQUESTED            ApprovalValue_ApprovalStatus = 3
	ApprovalValue_REVIEW_STARTED              ApprovalValue_ApprovalStatus = 4
	ApprovalValue_NEED_INFO                   ApprovalValue_ApprovalStatus = 5
	ApprovalValue_APPROVED                    ApprovalValue_ApprovalStatus = 6
	ApprovalValue_NOT_APPROVED                ApprovalValue_ApprovalStatus = 7
)

var ApprovalValue_ApprovalStatus_name = map[int32]string{
	0: "APPROVAL_STATUS_UNSPECIFIED",
	1: "NEEDS_REVIEW",
	2: "NA",
	3: "REVIEW_REQUESTED",
	4: "REVIEW_STARTED",
	5: "NEED_INFO",
	6: "APPROVED",
	7: "NOT_APPROVED",
}

var ApprovalValue_ApprovalStatus_value = map[string]int32{
	"APPROVAL_STATUS_UNSPECIFIED": 0,
	"NEEDS_REVIEW":                1,
	"NA":                          2,
	"REVIEW_REQUESTED":            3,
	"REVIEW_STARTED":              4,
	"NEED_INFO":                   5,
	"APPROVED":                    6,
	"NOT_APPROVED":                7,
}

func (x ApprovalValue_ApprovalStatus) String() string {
	return proto.EnumName(ApprovalValue_ApprovalStatus_name, int32(x))
}

func (ApprovalValue_ApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{5, 0}
}

// Represents a comment and any associated changes to an Issue.
//
// Comments cannot be Created or Updated through standard methods. The
// OUTPUT_ONLY annotations here indicate fields that would never be provided
// by the user even if these methods were made available.
// Next available tag: 11.
type Comment struct {
	// Resource name of the comment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the comment.
	State IssueContentState `protobuf:"varint,2,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
	// The type of comment.
	Type Comment_Type `protobuf:"varint,3,opt,name=type,proto3,enum=monorail.v3.Comment_Type" json:"type,omitempty"`
	// The text of the comment.
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// Resource name of the author of the comment.
	Commenter string `protobuf:"bytes,5,opt,name=commenter,proto3" json:"commenter,omitempty"`
	// The time this comment was added to the Issue.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional string full text of an email that caused this comment to be added.
	InboundMessage string `protobuf:"bytes,7,opt,name=inbound_message,json=inboundMessage,proto3" json:"inbound_message,omitempty"`
	// The approval this comment is associated with, if applicable.
	Approval string `protobuf:"bytes,8,opt,name=approval,proto3" json:"approval,omitempty"`
	// Any changes made to the issue in association with this comment.
	Amendments []*Comment_Amendment `protobuf:"bytes,9,rep,name=amendments,proto3" json:"amendments,omitempty"`
	// Any attachments uploaded in association with this comment.
	Attachments          []*Comment_Attachment `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{0}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Comment) GetState() IssueContentState {
	if m != nil {
		return m.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (m *Comment) GetType() Comment_Type {
	if m != nil {
		return m.Type
	}
	return Comment_UNSPECIFIED
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCommenter() string {
	if m != nil {
		return m.Commenter
	}
	return ""
}

func (m *Comment) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Comment) GetInboundMessage() string {
	if m != nil {
		return m.InboundMessage
	}
	return ""
}

func (m *Comment) GetApproval() string {
	if m != nil {
		return m.Approval
	}
	return ""
}

func (m *Comment) GetAmendments() []*Comment_Amendment {
	if m != nil {
		return m.Amendments
	}
	return nil
}

func (m *Comment) GetAttachments() []*Comment_Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// A file attached to a comment.
// Next available tag: 8
type Comment_Attachment struct {
	// The name of the attached file.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// It is possible for attachments to be deleted (and undeleted) by the
	// uploader. The name of deleted attachments are still shown, but the
	// content is not available.
	State IssueContentState `protobuf:"varint,2,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
	// Size of the attached file in bytes.
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The type of content contained in the file, using the IANA's media type
	// https://www.iana.org/assignments/media-types/media-types.xhtml.
	MediaType string `protobuf:"bytes,4,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// The URI used for a preview of the attachment (when relelvant).
	ThumbnailUri string `protobuf:"bytes,5,opt,name=thumbnail_uri,json=thumbnailUri,proto3" json:"thumbnail_uri,omitempty"`
	// The URI used to view the content of the attachment.
	ViewUri string `protobuf:"bytes,6,opt,name=view_uri,json=viewUri,proto3" json:"view_uri,omitempty"`
	// The URI used to download the content of the attachment.
	DownloadUri          string   `protobuf:"bytes,7,opt,name=download_uri,json=downloadUri,proto3" json:"download_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment_Attachment) Reset()         { *m = Comment_Attachment{} }
func (m *Comment_Attachment) String() string { return proto.CompactTextString(m) }
func (*Comment_Attachment) ProtoMessage()    {}
func (*Comment_Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{0, 0}
}

func (m *Comment_Attachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment_Attachment.Unmarshal(m, b)
}
func (m *Comment_Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment_Attachment.Marshal(b, m, deterministic)
}
func (m *Comment_Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment_Attachment.Merge(m, src)
}
func (m *Comment_Attachment) XXX_Size() int {
	return xxx_messageInfo_Comment_Attachment.Size(m)
}
func (m *Comment_Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment_Attachment proto.InternalMessageInfo

func (m *Comment_Attachment) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Comment_Attachment) GetState() IssueContentState {
	if m != nil {
		return m.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (m *Comment_Attachment) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Comment_Attachment) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

func (m *Comment_Attachment) GetThumbnailUri() string {
	if m != nil {
		return m.ThumbnailUri
	}
	return ""
}

func (m *Comment_Attachment) GetViewUri() string {
	if m != nil {
		return m.ViewUri
	}
	return ""
}

func (m *Comment_Attachment) GetDownloadUri() string {
	if m != nil {
		return m.DownloadUri
	}
	return ""
}

// This message is only suitable for displaying the amendment to users.
// We don't currently offer structured amendments that client code can
// reason about, field names can be ambiguous, and we don't have
// old_value for most changes.
// Next available tag: 4
type Comment_Amendment struct {
	// This may be the name of a built-in or custom field, or relative to
	// an approval field name.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// This may be a new value that overwrote the old value, e.g., "Assigned",
	// or it may be a space-separated list of changes, e.g., "Size-L -Size-S".
	NewOrDeltaValue string `protobuf:"bytes,2,opt,name=new_or_delta_value,json=newOrDeltaValue,proto3" json:"new_or_delta_value,omitempty"`
	// old_value is only used when the user changes the summary.
	OldValue             string   `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment_Amendment) Reset()         { *m = Comment_Amendment{} }
func (m *Comment_Amendment) String() string { return proto.CompactTextString(m) }
func (*Comment_Amendment) ProtoMessage()    {}
func (*Comment_Amendment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{0, 1}
}

func (m *Comment_Amendment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment_Amendment.Unmarshal(m, b)
}
func (m *Comment_Amendment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment_Amendment.Marshal(b, m, deterministic)
}
func (m *Comment_Amendment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment_Amendment.Merge(m, src)
}
func (m *Comment_Amendment) XXX_Size() int {
	return xxx_messageInfo_Comment_Amendment.Size(m)
}
func (m *Comment_Amendment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment_Amendment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment_Amendment proto.InternalMessageInfo

func (m *Comment_Amendment) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *Comment_Amendment) GetNewOrDeltaValue() string {
	if m != nil {
		return m.NewOrDeltaValue
	}
	return ""
}

func (m *Comment_Amendment) GetOldValue() string {
	if m != nil {
		return m.OldValue
	}
	return ""
}

// A value of a custom field for an issue.
// Next available tag: 5
type FieldValue struct {
	// The project-defined field associated with this value
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// The value associated with the field.
	// Mapping of field types to string value:
	// ENUM_TYPE(int) => str(value)
	// INT_TYPE(int) => str(value)
	// STR_TYPE(str) => value
	// USER_TYPE(int) => the user's resource name
	// DATE_TYPE(int) => str(int) representing time in seconds since epoch
	// URL_TYPE(str) => value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// How the value was derived.
	Derivation Derivation `protobuf:"varint,3,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
	// Issues with phase-specific fields can have values for each phase.
	Phase                string   `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldValue) Reset()         { *m = FieldValue{} }
func (m *FieldValue) String() string { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()    {}
func (*FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{1}
}

func (m *FieldValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldValue.Unmarshal(m, b)
}
func (m *FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldValue.Marshal(b, m, deterministic)
}
func (m *FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValue.Merge(m, src)
}
func (m *FieldValue) XXX_Size() int {
	return xxx_messageInfo_FieldValue.Size(m)
}
func (m *FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValue proto.InternalMessageInfo

func (m *FieldValue) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *FieldValue) GetDerivation() Derivation {
	if m != nil {
		return m.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

func (m *FieldValue) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

// Documents and tracks a bug, task, or feature request within a Project.
// Next available tag: 23
type Issue struct {
	// Resource name of the issue.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A brief summary of the issue. Generally displayed as a user-facing title.
	// TODO(monorail:6988): The UI limits summary length while the backend does
	// not. Resolve this discrepancy.
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// The state of the issue.
	State IssueContentState `protobuf:"varint,3,opt,name=state,proto3,enum=monorail.v3.IssueContentState" json:"state,omitempty"`
	// The current status of the issue.
	Status *Issue_StatusValue `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The user who created the issue.
	Reporter string `protobuf:"bytes,5,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// The user currently responsible for the issue.
	Owner *Issue_UserValue `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// Additional users receiving notifications on the issue.
	CcUsers []*Issue_UserValue `protobuf:"bytes,7,rep,name=cc_users,json=ccUsers,proto3" json:"cc_users,omitempty"`
	// Labels applied to the issue
	Labels []*Issue_LabelValue `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
	// Components the issue is associated with.
	Components []*Issue_ComponentValue `protobuf:"bytes,9,rep,name=components,proto3" json:"components,omitempty"`
	// Values for custom fields on the issue.
	FieldValues []*FieldValue `protobuf:"bytes,10,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
	// An issue can be merged into another. If this value is set, the issue
	// to referred should be considered the primary source for further updates.
	MergedIntoIssueRef *IssueRef `protobuf:"bytes,11,opt,name=merged_into_issue_ref,json=mergedIntoIssueRef,proto3" json:"merged_into_issue_ref,omitempty"`
	// Issues preventing the completion of this issue.
	BlockedOnIssueRefs []*IssueRef `protobuf:"bytes,12,rep,name=blocked_on_issue_refs,json=blockedOnIssueRefs,proto3" json:"blocked_on_issue_refs,omitempty"`
	// Issues for which this issue is blocking completion.
	BlockingIssueRefs []*IssueRef `protobuf:"bytes,13,rep,name=blocking_issue_refs,json=blockingIssueRefs,proto3" json:"blocking_issue_refs,omitempty"`
	// The time the issue was reported.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The most recent time the issue was closed.
	CloseTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// The most recent time the issue was modified.
	ModifyTime *timestamp.Timestamp `protobuf:"bytes,16,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	// The most recent time a component value was modified.
	ComponentModifyTime *timestamp.Timestamp `protobuf:"bytes,17,opt,name=component_modify_time,json=componentModifyTime,proto3" json:"component_modify_time,omitempty"`
	// The most recent time the status value was modified.
	StatusModifyTime *timestamp.Timestamp `protobuf:"bytes,18,opt,name=status_modify_time,json=statusModifyTime,proto3" json:"status_modify_time,omitempty"`
	// The most recent time the owner made a modification to the issue.
	OwnerModifyTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=owner_modify_time,json=ownerModifyTime,proto3" json:"owner_modify_time,omitempty"`
	// The number of attachments associated with the issue.
	AttachmentCount uint32 `protobuf:"varint,20,opt,name=attachment_count,json=attachmentCount,proto3" json:"attachment_count,omitempty"`
	// The number of users who have starred the issue.
	StarCount uint32 `protobuf:"varint,21,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	// Phases of a process the issue is tracking (if applicable).
	// See monorail/doc/userguide/concepts.md#issue-approvals-and-gates
	Phases               []string `protobuf:"bytes,22,rep,name=phases,proto3" json:"phases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{2}
}

func (m *Issue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue.Unmarshal(m, b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
}
func (m *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(m, src)
}
func (m *Issue) XXX_Size() int {
	return xxx_messageInfo_Issue.Size(m)
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issue) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Issue) GetState() IssueContentState {
	if m != nil {
		return m.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (m *Issue) GetStatus() *Issue_StatusValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Issue) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *Issue) GetOwner() *Issue_UserValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Issue) GetCcUsers() []*Issue_UserValue {
	if m != nil {
		return m.CcUsers
	}
	return nil
}

func (m *Issue) GetLabels() []*Issue_LabelValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Issue) GetComponents() []*Issue_ComponentValue {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *Issue) GetFieldValues() []*FieldValue {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

func (m *Issue) GetMergedIntoIssueRef() *IssueRef {
	if m != nil {
		return m.MergedIntoIssueRef
	}
	return nil
}

func (m *Issue) GetBlockedOnIssueRefs() []*IssueRef {
	if m != nil {
		return m.BlockedOnIssueRefs
	}
	return nil
}

func (m *Issue) GetBlockingIssueRefs() []*IssueRef {
	if m != nil {
		return m.BlockingIssueRefs
	}
	return nil
}

func (m *Issue) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Issue) GetCloseTime() *timestamp.Timestamp {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

func (m *Issue) GetModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifyTime
	}
	return nil
}

func (m *Issue) GetComponentModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.ComponentModifyTime
	}
	return nil
}

func (m *Issue) GetStatusModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusModifyTime
	}
	return nil
}

func (m *Issue) GetOwnerModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.OwnerModifyTime
	}
	return nil
}

func (m *Issue) GetAttachmentCount() uint32 {
	if m != nil {
		return m.AttachmentCount
	}
	return 0
}

func (m *Issue) GetStarCount() uint32 {
	if m != nil {
		return m.StarCount
	}
	return 0
}

func (m *Issue) GetPhases() []string {
	if m != nil {
		return m.Phases
	}
	return nil
}

// A possibly rule-derived component for the issue.
// Next available tag: 3
type Issue_ComponentValue struct {
	// The component.
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// How the component was derived.
	Derivation           Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Issue_ComponentValue) Reset()         { *m = Issue_ComponentValue{} }
func (m *Issue_ComponentValue) String() string { return proto.CompactTextString(m) }
func (*Issue_ComponentValue) ProtoMessage()    {}
func (*Issue_ComponentValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{2, 0}
}

func (m *Issue_ComponentValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_ComponentValue.Unmarshal(m, b)
}
func (m *Issue_ComponentValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_ComponentValue.Marshal(b, m, deterministic)
}
func (m *Issue_ComponentValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_ComponentValue.Merge(m, src)
}
func (m *Issue_ComponentValue) XXX_Size() int {
	return xxx_messageInfo_Issue_ComponentValue.Size(m)
}
func (m *Issue_ComponentValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_ComponentValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_ComponentValue proto.InternalMessageInfo

func (m *Issue_ComponentValue) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *Issue_ComponentValue) GetDerivation() Derivation {
	if m != nil {
		return m.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived label for an issue.
// Next available tag: 3
type Issue_LabelValue struct {
	// The label.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// How the label was derived.
	Derivation           Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Issue_LabelValue) Reset()         { *m = Issue_LabelValue{} }
func (m *Issue_LabelValue) String() string { return proto.CompactTextString(m) }
func (*Issue_LabelValue) ProtoMessage()    {}
func (*Issue_LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{2, 1}
}

func (m *Issue_LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_LabelValue.Unmarshal(m, b)
}
func (m *Issue_LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_LabelValue.Marshal(b, m, deterministic)
}
func (m *Issue_LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_LabelValue.Merge(m, src)
}
func (m *Issue_LabelValue) XXX_Size() int {
	return xxx_messageInfo_Issue_LabelValue.Size(m)
}
func (m *Issue_LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_LabelValue proto.InternalMessageInfo

func (m *Issue_LabelValue) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Issue_LabelValue) GetDerivation() Derivation {
	if m != nil {
		return m.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived status for an issue.
// Next available tag: 3
type Issue_StatusValue struct {
	// The status of the issue. Note that in rare cases this can be a
	// value not defined in the project's StatusDefs (e.g. if the issue
	// was moved from another project)
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// How the status was derived.
	Derivation           Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Issue_StatusValue) Reset()         { *m = Issue_StatusValue{} }
func (m *Issue_StatusValue) String() string { return proto.CompactTextString(m) }
func (*Issue_StatusValue) ProtoMessage()    {}
func (*Issue_StatusValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{2, 2}
}

func (m *Issue_StatusValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_StatusValue.Unmarshal(m, b)
}
func (m *Issue_StatusValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_StatusValue.Marshal(b, m, deterministic)
}
func (m *Issue_StatusValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_StatusValue.Merge(m, src)
}
func (m *Issue_StatusValue) XXX_Size() int {
	return xxx_messageInfo_Issue_StatusValue.Size(m)
}
func (m *Issue_StatusValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_StatusValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_StatusValue proto.InternalMessageInfo

func (m *Issue_StatusValue) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Issue_StatusValue) GetDerivation() Derivation {
	if m != nil {
		return m.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived user value on an issue.
// Next available tag: 3
type Issue_UserValue struct {
	// The user.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// How the user value was derived.
	Derivation           Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v3.Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Issue_UserValue) Reset()         { *m = Issue_UserValue{} }
func (m *Issue_UserValue) String() string { return proto.CompactTextString(m) }
func (*Issue_UserValue) ProtoMessage()    {}
func (*Issue_UserValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{2, 3}
}

func (m *Issue_UserValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_UserValue.Unmarshal(m, b)
}
func (m *Issue_UserValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_UserValue.Marshal(b, m, deterministic)
}
func (m *Issue_UserValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_UserValue.Merge(m, src)
}
func (m *Issue_UserValue) XXX_Size() int {
	return xxx_messageInfo_Issue_UserValue.Size(m)
}
func (m *Issue_UserValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_UserValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_UserValue proto.InternalMessageInfo

func (m *Issue_UserValue) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Issue_UserValue) GetDerivation() Derivation {
	if m != nil {
		return m.Derivation
	}
	return Derivation_DERIVATION_UNSPECIFIED
}

// Specifies a column in an issues list view.
// Next available tag: 2
type IssuesListColumn struct {
	// Column name shown in the column header.
	Column               string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuesListColumn) Reset()         { *m = IssuesListColumn{} }
func (m *IssuesListColumn) String() string { return proto.CompactTextString(m) }
func (*IssuesListColumn) ProtoMessage()    {}
func (*IssuesListColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{3}
}

func (m *IssuesListColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuesListColumn.Unmarshal(m, b)
}
func (m *IssuesListColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuesListColumn.Marshal(b, m, deterministic)
}
func (m *IssuesListColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuesListColumn.Merge(m, src)
}
func (m *IssuesListColumn) XXX_Size() int {
	return xxx_messageInfo_IssuesListColumn.Size(m)
}
func (m *IssuesListColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuesListColumn.DiscardUnknown(m)
}

var xxx_messageInfo_IssuesListColumn proto.InternalMessageInfo

func (m *IssuesListColumn) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

// Refers to an issue that may or may not be tracked in Monorail.
// Only one of `issue` and `ext_identifier` should be set.
// Next available tag: 3
type IssueRef struct {
	// Resource name of an issue tracked in Monorail
	Issue string `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	// For referencing external issues, e.g. b/1234, or a dangling reference
	// to an old 'codesite' issue.
	// TODO(monorail:7208): add more documentation on dangling references.
	ExtIdentifier        string   `protobuf:"bytes,2,opt,name=ext_identifier,json=extIdentifier,proto3" json:"ext_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueRef) Reset()         { *m = IssueRef{} }
func (m *IssueRef) String() string { return proto.CompactTextString(m) }
func (*IssueRef) ProtoMessage()    {}
func (*IssueRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{4}
}

func (m *IssueRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueRef.Unmarshal(m, b)
}
func (m *IssueRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueRef.Marshal(b, m, deterministic)
}
func (m *IssueRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueRef.Merge(m, src)
}
func (m *IssueRef) XXX_Size() int {
	return xxx_messageInfo_IssueRef.Size(m)
}
func (m *IssueRef) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueRef.DiscardUnknown(m)
}

var xxx_messageInfo_IssueRef proto.InternalMessageInfo

func (m *IssueRef) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *IssueRef) GetExtIdentifier() string {
	if m != nil {
		return m.ExtIdentifier
	}
	return ""
}

// Documents and tracks an approval process.
// See monorail/doc/userguide/concepts.md#issue-approvals-and-gates
// Next available tag: 9
type ApprovalValue struct {
	// The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The resource name of the approvalDef.
	ApprovalDef string `protobuf:"bytes,2,opt,name=approval_def,json=approvalDef,proto3" json:"approval_def,omitempty"`
	// The users able to approve the issue.
	Approvers []string `protobuf:"bytes,3,rep,name=approvers,proto3" json:"approvers,omitempty"`
	// The current status of the approval.
	Status ApprovalValue_ApprovalStatus `protobuf:"varint,4,opt,name=status,proto3,enum=monorail.v3.ApprovalValue_ApprovalStatus" json:"status,omitempty"`
	// The time the approval value was last set.
	SetTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=set_time,json=setTime,proto3" json:"set_time,omitempty"`
	// The user who most recently set the issue
	Setter string `protobuf:"bytes,6,opt,name=setter,proto3" json:"setter,omitempty"`
	// The phase the approval is associated with (if applicable).
	Phase                string        `protobuf:"bytes,7,opt,name=phase,proto3" json:"phase,omitempty"`
	FieldValues          []*FieldValue `protobuf:"bytes,8,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ApprovalValue) Reset()         { *m = ApprovalValue{} }
func (m *ApprovalValue) String() string { return proto.CompactTextString(m) }
func (*ApprovalValue) ProtoMessage()    {}
func (*ApprovalValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6207b3f6c9f327b, []int{5}
}

func (m *ApprovalValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApprovalValue.Unmarshal(m, b)
}
func (m *ApprovalValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApprovalValue.Marshal(b, m, deterministic)
}
func (m *ApprovalValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovalValue.Merge(m, src)
}
func (m *ApprovalValue) XXX_Size() int {
	return xxx_messageInfo_ApprovalValue.Size(m)
}
func (m *ApprovalValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovalValue.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovalValue proto.InternalMessageInfo

func (m *ApprovalValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApprovalValue) GetApprovalDef() string {
	if m != nil {
		return m.ApprovalDef
	}
	return ""
}

func (m *ApprovalValue) GetApprovers() []string {
	if m != nil {
		return m.Approvers
	}
	return nil
}

func (m *ApprovalValue) GetStatus() ApprovalValue_ApprovalStatus {
	if m != nil {
		return m.Status
	}
	return ApprovalValue_APPROVAL_STATUS_UNSPECIFIED
}

func (m *ApprovalValue) GetSetTime() *timestamp.Timestamp {
	if m != nil {
		return m.SetTime
	}
	return nil
}

func (m *ApprovalValue) GetSetter() string {
	if m != nil {
		return m.Setter
	}
	return ""
}

func (m *ApprovalValue) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *ApprovalValue) GetFieldValues() []*FieldValue {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

func init() {
	proto.RegisterEnum("monorail.v3.Derivation", Derivation_name, Derivation_value)
	proto.RegisterEnum("monorail.v3.IssueContentState", IssueContentState_name, IssueContentState_value)
	proto.RegisterEnum("monorail.v3.Comment_Type", Comment_Type_name, Comment_Type_value)
	proto.RegisterEnum("monorail.v3.ApprovalValue_ApprovalStatus", ApprovalValue_ApprovalStatus_name, ApprovalValue_ApprovalStatus_value)
	proto.RegisterType((*Comment)(nil), "monorail.v3.Comment")
	proto.RegisterType((*Comment_Attachment)(nil), "monorail.v3.Comment.Attachment")
	proto.RegisterType((*Comment_Amendment)(nil), "monorail.v3.Comment.Amendment")
	proto.RegisterType((*FieldValue)(nil), "monorail.v3.FieldValue")
	proto.RegisterType((*Issue)(nil), "monorail.v3.Issue")
	proto.RegisterType((*Issue_ComponentValue)(nil), "monorail.v3.Issue.ComponentValue")
	proto.RegisterType((*Issue_LabelValue)(nil), "monorail.v3.Issue.LabelValue")
	proto.RegisterType((*Issue_StatusValue)(nil), "monorail.v3.Issue.StatusValue")
	proto.RegisterType((*Issue_UserValue)(nil), "monorail.v3.Issue.UserValue")
	proto.RegisterType((*IssuesListColumn)(nil), "monorail.v3.IssuesListColumn")
	proto.RegisterType((*IssueRef)(nil), "monorail.v3.IssueRef")
	proto.RegisterType((*ApprovalValue)(nil), "monorail.v3.ApprovalValue")
}

func init() {
	proto.RegisterFile("api/v3/api_proto/issue_objects.proto", fileDescriptor_c6207b3f6c9f327b)
}

var fileDescriptor_c6207b3f6c9f327b = []byte{
	// 1592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4b, 0x73, 0xdb, 0x46,
	0x12, 0x5e, 0x8a, 0xef, 0x26, 0x45, 0x41, 0xa3, 0x87, 0x21, 0xca, 0x5e, 0xd1, 0xdc, 0x47, 0x69,
	0x6d, 0x2f, 0x59, 0x2b, 0xbf, 0xd6, 0xaa, 0xdd, 0x94, 0x21, 0x12, 0xaa, 0xb0, 0xa2, 0x57, 0x40,
	0x52, 0x71, 0x95, 0xab, 0x82, 0x02, 0xc1, 0xa1, 0x84, 0x04, 0xc0, 0x30, 0x00, 0x28, 0x59, 0x51,
	0xe9, 0x9e, 0x6b, 0xfe, 0x43, 0x6e, 0xf9, 0x53, 0x3e, 0xfb, 0x9c, 0xca, 0x41, 0xa7, 0xd4, 0x3c,
	0x00, 0x90, 0x32, 0xa5, 0xd0, 0x3e, 0x11, 0xdd, 0xf3, 0x7d, 0x1f, 0x7a, 0x1a, 0x3d, 0xdd, 0x43,
	0xf8, 0xbb, 0x31, 0xb4, 0xea, 0x67, 0x4f, 0xeb, 0xc6, 0xd0, 0xd2, 0x87, 0x1e, 0x09, 0x48, 0xdd,
	0xf2, 0xfd, 0x11, 0xd6, 0x49, 0xef, 0x3b, 0x6c, 0x06, 0x7e, 0x8d, 0xf9, 0x50, 0xc1, 0x21, 0x2e,
	0xf1, 0x0c, 0xcb, 0xae, 0x9d, 0x3d, 0x2d, 0x3f, 0x39, 0x21, 0xe4, 0xc4, 0xc6, 0x02, 0xce, 0x0d,
	0xca, 0xaf, 0x0f, 0x2c, 0x6c, 0xf7, 0xf5, 0x1e, 0x3e, 0x35, 0xce, 0x2c, 0xe2, 0x71, 0x6a, 0xf9,
	0x9f, 0xb7, 0xa1, 0x3d, 0xec, 0x93, 0x91, 0x67, 0x62, 0x81, 0xdb, 0x10, 0x4b, 0xcc, 0xea, 0x8d,
	0x06, 0xf5, 0xc0, 0x72, 0xb0, 0x1f, 0x18, 0xce, 0x90, 0x03, 0xaa, 0x3f, 0xe7, 0x20, 0xdb, 0x20,
	0x8e, 0x83, 0xdd, 0x00, 0x21, 0x48, 0xb9, 0x86, 0x83, 0xe5, 0x44, 0x25, 0xb1, 0x99, 0xd7, 0xd8,
	0x33, 0x7a, 0x05, 0x69, 0x3f, 0x30, 0x02, 0x2c, 0xcf, 0x55, 0x12, 0x9b, 0xa5, 0xad, 0xbf, 0xd6,
	0xc6, 0x62, 0xae, 0xb5, 0xe8, 0xa6, 0x1a, 0xc4, 0x0d, 0xb0, 0x1b, 0xb4, 0x29, 0x6a, 0x27, 0xf9,
	0x5e, 0x49, 0x6a, 0x9c, 0x81, 0xfe, 0x0d, 0xa9, 0xe0, 0x62, 0x88, 0xe5, 0x24, 0x63, 0xae, 0x4d,
	0x30, 0xc5, 0x2b, 0x6b, 0x9d, 0x8b, 0x21, 0xd6, 0x18, 0x0c, 0xc9, 0x90, 0x35, 0xb9, 0x94, 0x9c,
	0x62, 0x01, 0x84, 0x26, 0xfa, 0x2f, 0xe4, 0x4d, 0x8e, 0xc7, 0x9e, 0x9c, 0xa6, 0x6b, 0x3b, 0xe5,
	0xf7, 0x4a, 0xf2, 0x5a, 0x59, 0x06, 0x64, 0x0c, 0xad, 0x9a, 0xe9, 0xf5, 0x46, 0x27, 0x35, 0x93,
	0x38, 0xf5, 0xae, 0x8f, 0x3d, 0x2d, 0x06, 0xa3, 0xd7, 0x50, 0x30, 0x3d, 0x6c, 0x04, 0x58, 0xa7,
	0xfb, 0x96, 0x33, 0x95, 0xc4, 0x66, 0x61, 0xab, 0x5c, 0xe3, 0x49, 0xa9, 0x85, 0x49, 0xa9, 0x75,
	0xc2, 0xa4, 0xf0, 0xf8, 0x81, 0x73, 0xa8, 0x17, 0x3d, 0x81, 0x05, 0xcb, 0xed, 0x91, 0x91, 0xdb,
	0xd7, 0x1d, 0xec, 0xfb, 0xc6, 0x09, 0x96, 0xb3, 0x2c, 0x02, 0x86, 0x2c, 0x89, 0xb5, 0x7d, 0xbe,
	0x84, 0xfe, 0x07, 0x39, 0x63, 0x38, 0xf4, 0xc8, 0x99, 0x61, 0xcb, 0x39, 0x06, 0xab, 0x5c, 0x2b,
	0x0f, 0x60, 0x7d, 0x32, 0x4a, 0x45, 0x40, 0x8e, 0x0d, 0x7b, 0x84, 0xb5, 0x88, 0x81, 0x1a, 0x00,
	0x86, 0x83, 0xdd, 0x3e, 0x0d, 0xde, 0x97, 0xf3, 0x95, 0xe4, 0x66, 0xe1, 0x46, 0xc2, 0xc3, 0xb4,
	0x29, 0x21, 0x4c, 0x04, 0x1c, 0xd3, 0xd0, 0x2e, 0x14, 0x8c, 0x20, 0x30, 0xcc, 0x53, 0xae, 0x02,
	0x4c, 0x65, 0x63, 0xba, 0x4a, 0x84, 0xe3, 0x32, 0xe3, 0xc4, 0xf2, 0x6f, 0x09, 0x80, 0x18, 0x80,
	0xca, 0x90, 0x1b, 0x58, 0x36, 0x1e, 0xab, 0x8f, 0xc8, 0x46, 0xcf, 0x3e, 0xa9, 0x46, 0xc2, 0xf2,
	0x40, 0x90, 0xf2, 0xad, 0x1f, 0x79, 0x79, 0xa4, 0x34, 0xf6, 0x8c, 0x1e, 0x00, 0x38, 0xb8, 0x6f,
	0x19, 0x3a, 0x2b, 0x1c, 0x5e, 0x06, 0x79, 0xe6, 0xa1, 0x85, 0x82, 0xfe, 0x06, 0xf3, 0xc1, 0xe9,
	0xc8, 0xe9, 0xb9, 0x86, 0x65, 0xeb, 0x23, 0xcf, 0xe2, 0xc5, 0xa0, 0x15, 0x23, 0x67, 0xd7, 0xb3,
	0xd0, 0x1a, 0xe4, 0xce, 0x2c, 0x7c, 0xce, 0xd6, 0x33, 0xbc, 0x90, 0xa8, 0x4d, 0x97, 0x1e, 0x42,
	0xb1, 0x4f, 0xce, 0x5d, 0x9b, 0x18, 0x7d, 0xb6, 0xcc, 0xbe, 0xa4, 0x56, 0x08, 0x7d, 0x5d, 0xcf,
	0x2a, 0x07, 0x90, 0x8f, 0x92, 0x4b, 0xc3, 0xe1, 0xa7, 0x6f, 0x6c, 0xdb, 0x79, 0xe6, 0x39, 0xa0,
	0xfb, 0x7e, 0x0c, 0xc8, 0xc5, 0xe7, 0x3a, 0xf1, 0xf4, 0x3e, 0xb6, 0x03, 0x43, 0x3f, 0xa3, 0xdf,
	0x93, 0x25, 0x21, 0xaf, 0x2d, 0xb8, 0xf8, 0xfc, 0xd0, 0x6b, 0x52, 0x3f, 0xfb, 0xcc, 0x68, 0x1d,
	0xf2, 0xc4, 0xee, 0x0b, 0x4c, 0x92, 0x67, 0x90, 0xd8, 0x7d, 0xb6, 0x58, 0x7d, 0x0e, 0x29, 0xb6,
	0xc1, 0x05, 0x28, 0x74, 0x0f, 0xda, 0x47, 0x6a, 0xa3, 0xb5, 0xdb, 0x52, 0x9b, 0xd2, 0x5f, 0x50,
	0x01, 0xb2, 0x8d, 0xc3, 0xfd, 0x7d, 0xf5, 0xa0, 0x23, 0x25, 0xe8, 0x6a, 0x53, 0x6d, 0x37, 0xb4,
	0xd6, 0x51, 0xa7, 0x75, 0x78, 0x20, 0xcd, 0x6d, 0x77, 0x3f, 0x28, 0x1a, 0x94, 0x27, 0x8b, 0x4b,
	0xe4, 0x9b, 0x9f, 0xe8, 0x67, 0x43, 0x8f, 0xb0, 0x8e, 0x53, 0xbf, 0x14, 0x4f, 0x57, 0xbc, 0x13,
	0xf9, 0xf5, 0x4b, 0xf6, 0x7b, 0x55, 0x17, 0x87, 0xc5, 0xaf, 0x5f, 0x8a, 0xa7, 0xab, 0xea, 0x2f,
	0x09, 0x80, 0x5d, 0xba, 0x4b, 0x1e, 0xf9, 0x7f, 0x20, 0xcd, 0xf6, 0xcc, 0x13, 0xb0, 0xb3, 0x7e,
	0xad, 0xc8, 0xb0, 0x3a, 0xf9, 0x52, 0x86, 0x6e, 0xe2, 0x81, 0xc6, 0x91, 0x68, 0x19, 0xd2, 0xe3,
	0xc9, 0xe0, 0x06, 0x7a, 0x09, 0xd0, 0xc7, 0x9e, 0x75, 0x66, 0x04, 0x16, 0x71, 0x45, 0x5b, 0xb8,
	0x37, 0x51, 0x2c, 0xcd, 0x68, 0x59, 0x1b, 0x83, 0x52, 0xb9, 0xe1, 0xa9, 0xe1, 0x87, 0x15, 0xc1,
	0x8d, 0xea, 0xef, 0xf3, 0x90, 0x66, 0xbb, 0x9d, 0xda, 0xb8, 0x64, 0xc8, 0xfa, 0x23, 0xc7, 0x31,
	0xbc, 0x0b, 0x11, 0x44, 0x68, 0xc6, 0xe5, 0x9a, 0xfc, 0x94, 0x72, 0x7d, 0x01, 0x19, 0xfa, 0x30,
	0xf2, 0x59, 0x10, 0x85, 0x69, 0xb4, 0x5a, 0x9b, 0x01, 0xf8, 0xb1, 0x16, 0x68, 0xf4, 0x02, 0x72,
	0x1e, 0x1e, 0x12, 0x6f, 0xb6, 0xde, 0x15, 0x61, 0xd1, 0x16, 0xa4, 0xc9, 0xb9, 0x8b, 0x3d, 0xd1,
	0xb4, 0xee, 0x4f, 0x79, 0x1d, 0x65, 0xf0, 0x97, 0x71, 0x28, 0x7a, 0x09, 0x39, 0xd3, 0xd4, 0x47,
	0x3e, 0xf6, 0x7c, 0x39, 0xcb, 0x0e, 0xfe, 0xdd, 0xb4, 0xac, 0x69, 0x52, 0xc3, 0x47, 0xcf, 0x21,
	0x63, 0x1b, 0x3d, 0x6c, 0xfb, 0x72, 0x8e, 0xd1, 0x1e, 0x4c, 0xa1, 0xed, 0x51, 0x80, 0xd8, 0x1b,
	0x07, 0x23, 0x05, 0xc0, 0x24, 0xce, 0x90, 0xb8, 0x63, 0x0d, 0xeb, 0xe1, 0x14, 0x6a, 0x23, 0x04,
	0x71, 0xfa, 0x18, 0x09, 0x6d, 0x43, 0x91, 0x1f, 0x31, 0x56, 0x22, 0x61, 0xbf, 0x9a, 0xac, 0x8a,
	0xb8, 0x16, 0xb5, 0xc2, 0x20, 0x7a, 0xf6, 0xd1, 0x97, 0xb0, 0xe2, 0x60, 0xef, 0x04, 0xf7, 0x75,
	0xcb, 0x0d, 0x88, 0xce, 0x47, 0xac, 0x87, 0x07, 0x72, 0x81, 0xa5, 0x6c, 0xe5, 0xe3, 0x48, 0x34,
	0x3c, 0xd0, 0x10, 0xe7, 0xb4, 0xdc, 0x80, 0x84, 0x3e, 0xaa, 0xd4, 0xb3, 0x89, 0xf9, 0x3d, 0xee,
	0xeb, 0xc4, 0x8d, 0x85, 0x7c, 0xb9, 0xc8, 0xc2, 0xb9, 0x4d, 0x49, 0x70, 0x0e, 0xdd, 0xd0, 0xe5,
	0x23, 0x15, 0x96, 0x98, 0xd7, 0x72, 0x4f, 0xc6, 0x75, 0xe6, 0xef, 0xd2, 0x59, 0x0c, 0x19, 0xb1,
	0xcc, 0x8d, 0xc1, 0x55, 0xfa, 0xf4, 0xc1, 0xf5, 0x05, 0x80, 0x69, 0x13, 0x5f, 0x08, 0x2c, 0xcc,
	0x26, 0x90, 0x67, 0x14, 0xc6, 0x7f, 0x0d, 0x05, 0x87, 0xf4, 0xad, 0xc1, 0x05, 0x17, 0x90, 0x66,
	0x8c, 0x80, 0x73, 0x98, 0x42, 0x1b, 0x56, 0xa2, 0x0f, 0xad, 0x8f, 0x6b, 0x2d, 0xce, 0xa6, 0xb5,
	0x14, 0xb1, 0xf7, 0x63, 0xd1, 0x7d, 0x40, 0xfc, 0x60, 0x4d, 0x28, 0xa2, 0xd9, 0x14, 0x25, 0x4e,
	0x1d, 0x93, 0xfb, 0x0a, 0x16, 0xd9, 0xd1, 0x99, 0x50, 0x5b, 0x9a, 0x4d, 0x6d, 0x81, 0x31, 0xc7,
	0xc4, 0x6a, 0x20, 0xc5, 0x13, 0x54, 0x37, 0xc9, 0xc8, 0x0d, 0xe4, 0xe5, 0x4a, 0x62, 0x73, 0x5e,
	0xe0, 0xe3, 0xc5, 0x06, 0x5d, 0x43, 0x55, 0x00, 0x3f, 0x30, 0x3c, 0x81, 0x5c, 0x89, 0x91, 0x79,
	0xea, 0xe6, 0x98, 0x75, 0xc8, 0xb0, 0x6e, 0xe7, 0xcb, 0xab, 0x95, 0x64, 0x78, 0xed, 0x10, 0xae,
	0xf2, 0x4f, 0x09, 0x28, 0x4d, 0x9e, 0x2d, 0xf4, 0x7f, 0x76, 0x57, 0xe2, 0x1e, 0xd1, 0xb0, 0x37,
	0xae, 0x95, 0xfb, 0x37, 0xa7, 0x44, 0xc4, 0xa2, 0x4d, 0x3b, 0x66, 0xdc, 0x68, 0xd1, 0x73, 0x33,
	0xb7, 0xe8, 0xf2, 0x5b, 0x80, 0xb8, 0x41, 0xd0, 0x86, 0xcd, 0x5a, 0x84, 0xe8, 0xc8, 0xdc, 0xf8,
	0x7c, 0xf1, 0x6f, 0xa1, 0x30, 0xd6, 0x5a, 0xd1, 0x6a, 0xd4, 0x8a, 0xb9, 0x7c, 0xd8, 0x6a, 0x3f,
	0x5b, 0xff, 0x07, 0xc8, 0x47, 0x4d, 0x11, 0x3d, 0x86, 0x14, 0xed, 0xa0, 0x22, 0x79, 0xf7, 0x6e,
	0xeb, 0xd4, 0x0c, 0xf4, 0xd9, 0xaf, 0xdc, 0xde, 0xfe, 0xa0, 0xbc, 0x84, 0xa5, 0x29, 0xa3, 0x1b,
	0x55, 0xc4, 0xa4, 0xbe, 0x75, 0x64, 0x57, 0x1f, 0x81, 0xc4, 0xa0, 0xfe, 0x9e, 0xe5, 0x07, 0x0d,
	0x62, 0x8f, 0x1c, 0x97, 0xe6, 0xc4, 0x64, 0x4f, 0x61, 0x4e, 0xb8, 0x55, 0x35, 0x20, 0x17, 0x75,
	0xb9, 0x1a, 0xa4, 0x99, 0x82, 0xd8, 0x9a, 0x7c, 0xad, 0xac, 0x4c, 0x0d, 0x41, 0xe3, 0x30, 0xf4,
	0x0f, 0x28, 0xe1, 0x77, 0x81, 0x6e, 0xf5, 0xb1, 0x1b, 0x58, 0x03, 0x0b, 0x7b, 0x62, 0x92, 0xce,
	0xe3, 0x77, 0x41, 0x2b, 0x72, 0x56, 0x7f, 0x4d, 0xc3, 0xfc, 0xc4, 0x95, 0x76, 0xea, 0x3c, 0x6e,
	0x42, 0x31, 0xbc, 0xe8, 0xea, 0x7d, 0x3c, 0xe0, 0x52, 0x3b, 0x0f, 0xd9, 0x2c, 0x5c, 0x87, 0xb5,
	0xe9, 0x37, 0x64, 0x5a, 0x9d, 0x05, 0x23, 0x36, 0xd0, 0x73, 0xc8, 0x73, 0x93, 0x8e, 0xb8, 0x24,
	0x3b, 0x11, 0xb7, 0x7e, 0xa1, 0x18, 0x89, 0x94, 0x89, 0xe1, 0x5d, 0xda, 0xfa, 0xd7, 0xc4, 0x27,
	0x9a, 0x08, 0x3e, 0xb2, 0x78, 0xc5, 0x45, 0xc5, 0xb5, 0x0d, 0x39, 0x1f, 0x07, 0xbc, 0x41, 0xa4,
	0x67, 0x6b, 0x10, 0x59, 0x1f, 0x07, 0xac, 0x31, 0xd4, 0x21, 0xe3, 0xe3, 0x20, 0x10, 0xc3, 0xfc,
	0x8e, 0x90, 0x05, 0x0c, 0xad, 0x85, 0x17, 0x9e, 0xb1, 0xff, 0x1a, 0xdc, 0xf3, 0xd1, 0xc0, 0xcc,
	0xcd, 0x3e, 0x30, 0xe9, 0xc5, 0xae, 0x34, 0xb9, 0x3d, 0xb4, 0x01, 0xeb, 0xca, 0xd1, 0x91, 0x76,
	0x78, 0xac, 0xec, 0xe9, 0xed, 0x8e, 0xd2, 0xe9, 0xb6, 0xf5, 0xc9, 0x1b, 0xa8, 0x04, 0xc5, 0x03,
	0x55, 0x6d, 0xb6, 0x75, 0x4d, 0x3d, 0x6e, 0xa9, 0xdf, 0x48, 0x09, 0x94, 0x81, 0xb9, 0x03, 0x45,
	0x9a, 0x43, 0xcb, 0x20, 0x71, 0x9f, 0xae, 0xa9, 0x5f, 0x77, 0xd5, 0x76, 0x47, 0x6d, 0x4a, 0x49,
	0x84, 0xa0, 0x24, 0xbc, 0xed, 0x8e, 0xa2, 0x51, 0x5f, 0x0a, 0xcd, 0x43, 0x9e, 0x6a, 0xe8, 0xad,
	0x83, 0xdd, 0x43, 0x29, 0x8d, 0x8a, 0x90, 0xe3, 0xef, 0x54, 0x9b, 0x52, 0x86, 0xbd, 0xe0, 0xb0,
	0xa3, 0x47, 0x9e, 0xec, 0xf6, 0xdb, 0x0f, 0xca, 0x9b, 0x3b, 0xff, 0x33, 0xa1, 0x57, 0x7f, 0x76,
	0x46, 0xea, 0xc6, 0x38, 0xbe, 0x7e, 0x19, 0x9a, 0x57, 0x8f, 0x5e, 0x03, 0xc4, 0x47, 0x12, 0x95,
	0x61, 0xb5, 0xa9, 0x6a, 0xad, 0x63, 0x85, 0xde, 0xa8, 0x6f, 0xec, 0xbc, 0x08, 0x39, 0xf5, 0xcd,
	0xd1, 0x5e, 0xab, 0xd1, 0xa2, 0x97, 0xef, 0x1c, 0xa4, 0xb4, 0xee, 0x9e, 0x2a, 0xcd, 0x3d, 0xda,
	0x87, 0xc5, 0x8f, 0x6e, 0x89, 0x68, 0x05, 0x16, 0x69, 0xfa, 0xd4, 0x1b, 0x1a, 0x00, 0x19, 0xa5,
	0xd1, 0x69, 0x1d, 0xab, 0x52, 0x82, 0xde, 0xe5, 0x9b, 0xea, 0x9e, 0x4a, 0x53, 0x32, 0x47, 0xe5,
	0xda, 0x47, 0xca, 0xbe, 0x94, 0xec, 0x65, 0x58, 0xf9, 0x3c, 0xfd, 0x23, 0x00, 0x00, 0xff, 0xff,
	0x4e, 0xb3, 0x0a, 0xe2, 0x34, 0x10, 0x00, 0x00,
}
