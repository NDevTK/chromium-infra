// Code generated by MockGen. DO NOT EDIT.
// Source: ../swarming.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "go.chromium.org/luci/common/api/swarming/swarming/v1"
	strpair "go.chromium.org/luci/common/data/strpair"
	context "golang.org/x/net/context"
	clients "infra/appengine/crosskylabadmin/app/clients"
	reflect "reflect"
)

// MockSwarmingClient is a mock of SwarmingClient interface
type MockSwarmingClient struct {
	ctrl     *gomock.Controller
	recorder *MockSwarmingClientMockRecorder
}

// MockSwarmingClientMockRecorder is the mock recorder for MockSwarmingClient
type MockSwarmingClientMockRecorder struct {
	mock *MockSwarmingClient
}

// NewMockSwarmingClient creates a new mock instance
func NewMockSwarmingClient(ctrl *gomock.Controller) *MockSwarmingClient {
	mock := &MockSwarmingClient{ctrl: ctrl}
	mock.recorder = &MockSwarmingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSwarmingClient) EXPECT() *MockSwarmingClientMockRecorder {
	return m.recorder
}

// ListAliveBotsInPool mocks base method
func (m *MockSwarmingClient) ListAliveBotsInPool(arg0 context.Context, arg1 string, arg2 strpair.Map) ([]*v1.SwarmingRpcsBotInfo, error) {
	ret := m.ctrl.Call(m, "ListAliveBotsInPool", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.SwarmingRpcsBotInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliveBotsInPool indicates an expected call of ListAliveBotsInPool
func (mr *MockSwarmingClientMockRecorder) ListAliveBotsInPool(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliveBotsInPool", reflect.TypeOf((*MockSwarmingClient)(nil).ListAliveBotsInPool), arg0, arg1, arg2)
}

// ListRecentTasks mocks base method
func (m *MockSwarmingClient) ListRecentTasks(c context.Context, tags []string, state string, limit int) ([]*v1.SwarmingRpcsTaskResult, error) {
	ret := m.ctrl.Call(m, "ListRecentTasks", c, tags, state, limit)
	ret0, _ := ret[0].([]*v1.SwarmingRpcsTaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentTasks indicates an expected call of ListRecentTasks
func (mr *MockSwarmingClientMockRecorder) ListRecentTasks(c, tags, state, limit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentTasks", reflect.TypeOf((*MockSwarmingClient)(nil).ListRecentTasks), c, tags, state, limit)
}

// ListSortedRecentTasksForBot mocks base method
func (m *MockSwarmingClient) ListSortedRecentTasksForBot(c context.Context, botID string, limit int) ([]*v1.SwarmingRpcsTaskResult, error) {
	ret := m.ctrl.Call(m, "ListSortedRecentTasksForBot", c, botID, limit)
	ret0, _ := ret[0].([]*v1.SwarmingRpcsTaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSortedRecentTasksForBot indicates an expected call of ListSortedRecentTasksForBot
func (mr *MockSwarmingClientMockRecorder) ListSortedRecentTasksForBot(c, botID, limit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSortedRecentTasksForBot", reflect.TypeOf((*MockSwarmingClient)(nil).ListSortedRecentTasksForBot), c, botID, limit)
}

// CreateTask mocks base method
func (m *MockSwarmingClient) CreateTask(c context.Context, args *clients.SwarmingCreateTaskArgs) (string, error) {
	ret := m.ctrl.Call(m, "CreateTask", c, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockSwarmingClientMockRecorder) CreateTask(c, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockSwarmingClient)(nil).CreateTask), c, args)
}
