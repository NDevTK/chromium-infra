// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/monorail/monorail.proto

package monorail

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IssuesListRequest_CannedQuery int32

const (
	IssuesListRequest_ALL       IssuesListRequest_CannedQuery = 0
	IssuesListRequest_NEW       IssuesListRequest_CannedQuery = 1
	IssuesListRequest_OPEN      IssuesListRequest_CannedQuery = 2
	IssuesListRequest_OWNED     IssuesListRequest_CannedQuery = 3
	IssuesListRequest_REPORTED  IssuesListRequest_CannedQuery = 4
	IssuesListRequest_STARRED   IssuesListRequest_CannedQuery = 5
	IssuesListRequest_TO_VERIFY IssuesListRequest_CannedQuery = 6
)

var IssuesListRequest_CannedQuery_name = map[int32]string{
	0: "ALL",
	1: "NEW",
	2: "OPEN",
	3: "OWNED",
	4: "REPORTED",
	5: "STARRED",
	6: "TO_VERIFY",
}
var IssuesListRequest_CannedQuery_value = map[string]int32{
	"ALL":       0,
	"NEW":       1,
	"OPEN":      2,
	"OWNED":     3,
	"REPORTED":  4,
	"STARRED":   5,
	"TO_VERIFY": 6,
}

func (x IssuesListRequest_CannedQuery) String() string {
	return proto.EnumName(IssuesListRequest_CannedQuery_name, int32(x))
}
func (IssuesListRequest_CannedQuery) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{6, 0}
}

// A monorail issue.
type Issue struct {
	// Reporter of the issue.
	Author *AtomPerson `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	// Issues that must be fixed before this one can be fixed.
	BlockedOn []*IssueRef `protobuf:"bytes,2,rep,name=blockedOn,proto3" json:"blockedOn,omitempty"`
	// People participating in the issue discussion.
	Cc []*AtomPerson `protobuf:"bytes,6,rep,name=cc,proto3" json:"cc,omitempty"`
	// The text body of the issue.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Identifier of the issue, unique within the appengine app.
	Id int32 `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	// Monorail components for this issue.
	Components []string `protobuf:"bytes,10,rep,name=components,proto3" json:"components,omitempty"`
	// Arbitrary indexed strings visible to users,
	// usually of form "Key-Value" or "Key-Value-SubValue",
	Labels []string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
	// Who is currently responsible for closing the issue.
	Owner *AtomPerson `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
	// Current status of issue. Standard values:
	//
	// Open statuses:
	// "Unconrimed" - New, has been not verified or reproduced.
	// "Untriaged" - Confirmed, not reviews for priority of assignment
	// "Available" - Triaged, but no owner assigned
	// "Started" - Work in progress.
	// "ExternalDependency" - Requires action from a third party
	// Closed statuses:
	// "Fixed" - Work completed, needs verificaiton
	// "Verified" - Test or reporter verified that the fix works
	// "Duplicate" - Same root cause as another issue
	// "WontFix" -  Cannot reproduce, works as intended, invalid or absolete.
	// "Archived" - Old issue with no activity.
	Status string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// A one line description of the issue.
	Summary string `protobuf:"bytes,18,opt,name=summary,proto3" json:"summary,omitempty"`
	// Last updated datetime of this issue.
	Updated              string   `protobuf:"bytes,19,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{0}
}
func (m *Issue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue.Unmarshal(m, b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
}
func (dst *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(dst, src)
}
func (m *Issue) XXX_Size() int {
	return xxx_messageInfo_Issue.Size(m)
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetAuthor() *AtomPerson {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Issue) GetBlockedOn() []*IssueRef {
	if m != nil {
		return m.BlockedOn
	}
	return nil
}

func (m *Issue) GetCc() []*AtomPerson {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *Issue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issue) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Issue) GetComponents() []string {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *Issue) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Issue) GetOwner() *AtomPerson {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Issue) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Issue) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Issue) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

// IssueRef references another issue in the same Monorail instance.
type IssueRef struct {
	// ID of the issue.
	IssueId int32 `protobuf:"varint,1,opt,name=issueId,proto3" json:"issueId,omitempty"`
	// ID of the project containing the issue.
	ProjectId            string   `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueRef) Reset()         { *m = IssueRef{} }
func (m *IssueRef) String() string { return proto.CompactTextString(m) }
func (*IssueRef) ProtoMessage()    {}
func (*IssueRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{1}
}
func (m *IssueRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueRef.Unmarshal(m, b)
}
func (m *IssueRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueRef.Marshal(b, m, deterministic)
}
func (dst *IssueRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueRef.Merge(dst, src)
}
func (m *IssueRef) XXX_Size() int {
	return xxx_messageInfo_IssueRef.Size(m)
}
func (m *IssueRef) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueRef.DiscardUnknown(m)
}

var xxx_messageInfo_IssueRef proto.InternalMessageInfo

func (m *IssueRef) GetIssueId() int32 {
	if m != nil {
		return m.IssueId
	}
	return 0
}

func (m *IssueRef) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

// Request for Monorail.InsertIssue().
type InsertIssueRequest struct {
	// Target project id.
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	// Definition of the issue.
	// issue.id must be empty.
	Issue *Issue `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
	// Whether to send email to participants.
	SendEmail            bool     `protobuf:"varint,3,opt,name=sendEmail,proto3" json:"sendEmail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertIssueRequest) Reset()         { *m = InsertIssueRequest{} }
func (m *InsertIssueRequest) String() string { return proto.CompactTextString(m) }
func (*InsertIssueRequest) ProtoMessage()    {}
func (*InsertIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{2}
}
func (m *InsertIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertIssueRequest.Unmarshal(m, b)
}
func (m *InsertIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertIssueRequest.Marshal(b, m, deterministic)
}
func (dst *InsertIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertIssueRequest.Merge(dst, src)
}
func (m *InsertIssueRequest) XXX_Size() int {
	return xxx_messageInfo_InsertIssueRequest.Size(m)
}
func (m *InsertIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertIssueRequest proto.InternalMessageInfo

func (m *InsertIssueRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *InsertIssueRequest) GetIssue() *Issue {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *InsertIssueRequest) GetSendEmail() bool {
	if m != nil {
		return m.SendEmail
	}
	return false
}

// Response for Monorail.InsertIssue()
type InsertIssueResponse struct {
	// Created issue.
	Issue                *Issue   `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertIssueResponse) Reset()         { *m = InsertIssueResponse{} }
func (m *InsertIssueResponse) String() string { return proto.CompactTextString(m) }
func (*InsertIssueResponse) ProtoMessage()    {}
func (*InsertIssueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{3}
}
func (m *InsertIssueResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertIssueResponse.Unmarshal(m, b)
}
func (m *InsertIssueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertIssueResponse.Marshal(b, m, deterministic)
}
func (dst *InsertIssueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertIssueResponse.Merge(dst, src)
}
func (m *InsertIssueResponse) XXX_Size() int {
	return xxx_messageInfo_InsertIssueResponse.Size(m)
}
func (m *InsertIssueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertIssueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InsertIssueResponse proto.InternalMessageInfo

func (m *InsertIssueResponse) GetIssue() *Issue {
	if m != nil {
		return m.Issue
	}
	return nil
}

// Request for Monorail.InsertComment()
type InsertCommentRequest struct {
	// Definition of the comment.
	Comment *InsertCommentRequest_Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	// The reference to post the comment to.
	Issue *IssueRef `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
	// SendEmail specifies whether an email must be sent.
	SendEmail            bool     `protobuf:"varint,3,opt,name=sendEmail,proto3" json:"sendEmail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertCommentRequest) Reset()         { *m = InsertCommentRequest{} }
func (m *InsertCommentRequest) String() string { return proto.CompactTextString(m) }
func (*InsertCommentRequest) ProtoMessage()    {}
func (*InsertCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{4}
}
func (m *InsertCommentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertCommentRequest.Unmarshal(m, b)
}
func (m *InsertCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertCommentRequest.Marshal(b, m, deterministic)
}
func (dst *InsertCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertCommentRequest.Merge(dst, src)
}
func (m *InsertCommentRequest) XXX_Size() int {
	return xxx_messageInfo_InsertCommentRequest.Size(m)
}
func (m *InsertCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertCommentRequest proto.InternalMessageInfo

func (m *InsertCommentRequest) GetComment() *InsertCommentRequest_Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *InsertCommentRequest) GetIssue() *IssueRef {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *InsertCommentRequest) GetSendEmail() bool {
	if m != nil {
		return m.SendEmail
	}
	return false
}

// Defines the comment.
// This message is partial.
// Derived from IssueCommentWrapper type in api_pb2_v1.py.
type InsertCommentRequest_Comment struct {
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Updates              *Update  `protobuf:"bytes,8,opt,name=updates,proto3" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertCommentRequest_Comment) Reset()         { *m = InsertCommentRequest_Comment{} }
func (m *InsertCommentRequest_Comment) String() string { return proto.CompactTextString(m) }
func (*InsertCommentRequest_Comment) ProtoMessage()    {}
func (*InsertCommentRequest_Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{4, 0}
}
func (m *InsertCommentRequest_Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertCommentRequest_Comment.Unmarshal(m, b)
}
func (m *InsertCommentRequest_Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertCommentRequest_Comment.Marshal(b, m, deterministic)
}
func (dst *InsertCommentRequest_Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertCommentRequest_Comment.Merge(dst, src)
}
func (m *InsertCommentRequest_Comment) XXX_Size() int {
	return xxx_messageInfo_InsertCommentRequest_Comment.Size(m)
}
func (m *InsertCommentRequest_Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertCommentRequest_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_InsertCommentRequest_Comment proto.InternalMessageInfo

func (m *InsertCommentRequest_Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *InsertCommentRequest_Comment) GetUpdates() *Update {
	if m != nil {
		return m.Updates
	}
	return nil
}

type InsertCommentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertCommentResponse) Reset()         { *m = InsertCommentResponse{} }
func (m *InsertCommentResponse) String() string { return proto.CompactTextString(m) }
func (*InsertCommentResponse) ProtoMessage()    {}
func (*InsertCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{5}
}
func (m *InsertCommentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertCommentResponse.Unmarshal(m, b)
}
func (m *InsertCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertCommentResponse.Marshal(b, m, deterministic)
}
func (dst *InsertCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertCommentResponse.Merge(dst, src)
}
func (m *InsertCommentResponse) XXX_Size() int {
	return xxx_messageInfo_InsertCommentResponse.Size(m)
}
func (m *InsertCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InsertCommentResponse proto.InternalMessageInfo

// Request for a list of Issues.
type IssuesListRequest struct {
	// String name of the project, e.g. "chromium".
	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	// Additional projects to search.
	AdditionalProject []string `protobuf:"bytes,2,rep,name=additionalProject,proto3" json:"additionalProject,omitempty"`
	// Use a canned query.
	Can IssuesListRequest_CannedQuery `protobuf:"varint,3,opt,name=can,proto3,enum=monorail.IssuesListRequest_CannedQuery" json:"can,omitempty"`
	// Issue label or space separated list of labels.
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// Maximum results to retrieve.
	MaxResults int32 `protobuf:"varint,5,opt,name=maxResults,proto3" json:"maxResults,omitempty"`
	// Issue owner.
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// Search for Issues published before this timestamp.
	PublishedMax int64 `protobuf:"varint,7,opt,name=publishedMax,proto3" json:"publishedMax,omitempty"`
	// Search for Issues published after this timestamp.
	PublishedMin int64 `protobuf:"varint,8,opt,name=publishedMin,proto3" json:"publishedMin,omitempty"`
	// Free-form text query.
	Q string `protobuf:"bytes,9,opt,name=q,proto3" json:"q,omitempty"`
	// Sort-by field or fields, space separated terms with leading - to
	// indicate decreasing direction. e.g. "estdays -milestone" to sort by
	// estdays increasing, then milestone decreasing.
	Sort string `protobuf:"bytes,10,opt,name=sort,proto3" json:"sort,omitempty"`
	// Starting index for pagination.
	StartIndex int32 `protobuf:"varint,11,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	// Issue status.
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Search for Issues most recently updated before this timestamp.
	UpdatedMax int64 `protobuf:"varint,13,opt,name=updatedMax,proto3" json:"updatedMax,omitempty"`
	// Search for Issues most recently updated after this timestamp.
	UpdatedMin           int64    `protobuf:"varint,14,opt,name=updatedMin,proto3" json:"updatedMin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuesListRequest) Reset()         { *m = IssuesListRequest{} }
func (m *IssuesListRequest) String() string { return proto.CompactTextString(m) }
func (*IssuesListRequest) ProtoMessage()    {}
func (*IssuesListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{6}
}
func (m *IssuesListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuesListRequest.Unmarshal(m, b)
}
func (m *IssuesListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuesListRequest.Marshal(b, m, deterministic)
}
func (dst *IssuesListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuesListRequest.Merge(dst, src)
}
func (m *IssuesListRequest) XXX_Size() int {
	return xxx_messageInfo_IssuesListRequest.Size(m)
}
func (m *IssuesListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuesListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssuesListRequest proto.InternalMessageInfo

func (m *IssuesListRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *IssuesListRequest) GetAdditionalProject() []string {
	if m != nil {
		return m.AdditionalProject
	}
	return nil
}

func (m *IssuesListRequest) GetCan() IssuesListRequest_CannedQuery {
	if m != nil {
		return m.Can
	}
	return IssuesListRequest_ALL
}

func (m *IssuesListRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *IssuesListRequest) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *IssuesListRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *IssuesListRequest) GetPublishedMax() int64 {
	if m != nil {
		return m.PublishedMax
	}
	return 0
}

func (m *IssuesListRequest) GetPublishedMin() int64 {
	if m != nil {
		return m.PublishedMin
	}
	return 0
}

func (m *IssuesListRequest) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *IssuesListRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *IssuesListRequest) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *IssuesListRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IssuesListRequest) GetUpdatedMax() int64 {
	if m != nil {
		return m.UpdatedMax
	}
	return 0
}

func (m *IssuesListRequest) GetUpdatedMin() int64 {
	if m != nil {
		return m.UpdatedMin
	}
	return 0
}

type ErrorMessage struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorMessage) Reset()         { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()    {}
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{7}
}
func (m *ErrorMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorMessage.Unmarshal(m, b)
}
func (m *ErrorMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorMessage.Marshal(b, m, deterministic)
}
func (dst *ErrorMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMessage.Merge(dst, src)
}
func (m *ErrorMessage) XXX_Size() int {
	return xxx_messageInfo_ErrorMessage.Size(m)
}
func (m *ErrorMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMessage proto.InternalMessageInfo

func (m *ErrorMessage) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ErrorMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IssuesListResponse struct {
	Error *ErrorMessage `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Search results.
	Items []*Issue `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// Total size of matching result set, regardless of how many are included
	// in this response.
	TotalResults         int32    `protobuf:"varint,3,opt,name=totalResults,proto3" json:"totalResults,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuesListResponse) Reset()         { *m = IssuesListResponse{} }
func (m *IssuesListResponse) String() string { return proto.CompactTextString(m) }
func (*IssuesListResponse) ProtoMessage()    {}
func (*IssuesListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{8}
}
func (m *IssuesListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuesListResponse.Unmarshal(m, b)
}
func (m *IssuesListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuesListResponse.Marshal(b, m, deterministic)
}
func (dst *IssuesListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuesListResponse.Merge(dst, src)
}
func (m *IssuesListResponse) XXX_Size() int {
	return xxx_messageInfo_IssuesListResponse.Size(m)
}
func (m *IssuesListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuesListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IssuesListResponse proto.InternalMessageInfo

func (m *IssuesListResponse) GetError() *ErrorMessage {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *IssuesListResponse) GetItems() []*Issue {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *IssuesListResponse) GetTotalResults() int32 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

// Defines a mutation to an issue.
// This message is partial.
// Derived from Update type in api_pb2_v1.py.
type Update struct {
	// If set, the new status of the issue.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Adds or removes labels.
	Labels []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	// IsDescription makes the request content the new bug description
	// instead of a new comment.
	IsDescription        bool     `protobuf:"varint,13,opt,name=is_description,json=isDescription,proto3" json:"is_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{9}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (dst *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(dst, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Update) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Update) GetIsDescription() bool {
	if m != nil {
		return m.IsDescription
	}
	return false
}

// Identifies a Monorail user.
type AtomPerson struct {
	// User email.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtomPerson) Reset()         { *m = AtomPerson{} }
func (m *AtomPerson) String() string { return proto.CompactTextString(m) }
func (*AtomPerson) ProtoMessage()    {}
func (*AtomPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{10}
}
func (m *AtomPerson) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtomPerson.Unmarshal(m, b)
}
func (m *AtomPerson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtomPerson.Marshal(b, m, deterministic)
}
func (dst *AtomPerson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomPerson.Merge(dst, src)
}
func (m *AtomPerson) XXX_Size() int {
	return xxx_messageInfo_AtomPerson.Size(m)
}
func (m *AtomPerson) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomPerson.DiscardUnknown(m)
}

var xxx_messageInfo_AtomPerson proto.InternalMessageInfo

func (m *AtomPerson) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetIssueRequest struct {
	Issue                *IssueRef `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetIssueRequest) Reset()         { *m = GetIssueRequest{} }
func (m *GetIssueRequest) String() string { return proto.CompactTextString(m) }
func (*GetIssueRequest) ProtoMessage()    {}
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{11}
}
func (m *GetIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIssueRequest.Unmarshal(m, b)
}
func (m *GetIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIssueRequest.Marshal(b, m, deterministic)
}
func (dst *GetIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIssueRequest.Merge(dst, src)
}
func (m *GetIssueRequest) XXX_Size() int {
	return xxx_messageInfo_GetIssueRequest.Size(m)
}
func (m *GetIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIssueRequest proto.InternalMessageInfo

func (m *GetIssueRequest) GetIssue() *IssueRef {
	if m != nil {
		return m.Issue
	}
	return nil
}

type ListCommentsRequest struct {
	Issue                *IssueRef `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	MaxResults           int32     `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	StartIndex           int32     `protobuf:"varint,3,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListCommentsRequest) Reset()         { *m = ListCommentsRequest{} }
func (m *ListCommentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommentsRequest) ProtoMessage()    {}
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{12}
}
func (m *ListCommentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommentsRequest.Unmarshal(m, b)
}
func (m *ListCommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommentsRequest.Marshal(b, m, deterministic)
}
func (dst *ListCommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentsRequest.Merge(dst, src)
}
func (m *ListCommentsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommentsRequest.Size(m)
}
func (m *ListCommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentsRequest proto.InternalMessageInfo

func (m *ListCommentsRequest) GetIssue() *IssueRef {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *ListCommentsRequest) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *ListCommentsRequest) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

type ListCommentsResponse struct {
	Error *ErrorMessage `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Actual comments.
	Items []*Comment `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// Total size of matching result set, regardless of how many are included
	// in this response. Includes deleted comments.
	TotalResults         int32    `protobuf:"varint,3,opt,name=totalResults,proto3" json:"totalResults,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommentsResponse) Reset()         { *m = ListCommentsResponse{} }
func (m *ListCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCommentsResponse) ProtoMessage()    {}
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{13}
}
func (m *ListCommentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommentsResponse.Unmarshal(m, b)
}
func (m *ListCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommentsResponse.Marshal(b, m, deterministic)
}
func (dst *ListCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentsResponse.Merge(dst, src)
}
func (m *ListCommentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCommentsResponse.Size(m)
}
func (m *ListCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentsResponse proto.InternalMessageInfo

func (m *ListCommentsResponse) GetError() *ErrorMessage {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ListCommentsResponse) GetItems() []*Comment {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCommentsResponse) GetTotalResults() int32 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

// Comment represents monorail comment.
// This field is partial.
// Derived from `IssueCommentWrapper` type in api_pb2_v1.py.
type Comment struct {
	// Who authored the comment.
	Author *AtomPerson `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// Content of the comment.
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// If the comment has been deleted, who deleted it.
	DeletedBy *AtomPerson `protobuf:"bytes,5,opt,name=deletedBy,proto3" json:"deletedBy,omitempty"`
	// Comment ID, scoped to its parent issue.
	Id int32 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	// Datetime of when this comment was published.
	Published string `protobuf:"bytes,7,opt,name=published,proto3" json:"published,omitempty"`
	// Updates made to the issue in this comment.
	Updates *Update `protobuf:"bytes,8,opt,name=updates,proto3" json:"updates,omitempty"`
	// If true, this comment is actually an issue description.
	IsDescription        bool     `protobuf:"varint,10,opt,name=is_description,json=isDescription,proto3" json:"is_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_monorail_9af8dd27292aca5e, []int{14}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (dst *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(dst, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetAuthor() *AtomPerson {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetDeletedBy() *AtomPerson {
	if m != nil {
		return m.DeletedBy
	}
	return nil
}

func (m *Comment) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetPublished() string {
	if m != nil {
		return m.Published
	}
	return ""
}

func (m *Comment) GetUpdates() *Update {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *Comment) GetIsDescription() bool {
	if m != nil {
		return m.IsDescription
	}
	return false
}

func init() {
	proto.RegisterType((*Issue)(nil), "monorail.Issue")
	proto.RegisterType((*IssueRef)(nil), "monorail.IssueRef")
	proto.RegisterType((*InsertIssueRequest)(nil), "monorail.InsertIssueRequest")
	proto.RegisterType((*InsertIssueResponse)(nil), "monorail.InsertIssueResponse")
	proto.RegisterType((*InsertCommentRequest)(nil), "monorail.InsertCommentRequest")
	proto.RegisterType((*InsertCommentRequest_Comment)(nil), "monorail.InsertCommentRequest.Comment")
	proto.RegisterType((*InsertCommentResponse)(nil), "monorail.InsertCommentResponse")
	proto.RegisterType((*IssuesListRequest)(nil), "monorail.IssuesListRequest")
	proto.RegisterType((*ErrorMessage)(nil), "monorail.ErrorMessage")
	proto.RegisterType((*IssuesListResponse)(nil), "monorail.IssuesListResponse")
	proto.RegisterType((*Update)(nil), "monorail.Update")
	proto.RegisterType((*AtomPerson)(nil), "monorail.AtomPerson")
	proto.RegisterType((*GetIssueRequest)(nil), "monorail.GetIssueRequest")
	proto.RegisterType((*ListCommentsRequest)(nil), "monorail.ListCommentsRequest")
	proto.RegisterType((*ListCommentsResponse)(nil), "monorail.ListCommentsResponse")
	proto.RegisterType((*Comment)(nil), "monorail.Comment")
	proto.RegisterEnum("monorail.IssuesListRequest_CannedQuery", IssuesListRequest_CannedQuery_name, IssuesListRequest_CannedQuery_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonorailClient is the client API for Monorail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonorailClient interface {
	// Creates an issue.
	InsertIssue(ctx context.Context, in *InsertIssueRequest, opts ...grpc.CallOption) (*InsertIssueResponse, error)
	// Posts a comment to an issue. Can update issue attributes, such as status.
	InsertComment(ctx context.Context, in *InsertCommentRequest, opts ...grpc.CallOption) (*InsertCommentResponse, error)
	// Lists issues from a project.
	IssuesList(ctx context.Context, in *IssuesListRequest, opts ...grpc.CallOption) (*IssuesListResponse, error)
	// GetIssue gets an issue by id.
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// ListComments returns comments of an issue.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
}
type monorailPRPCClient struct {
	client *prpc.Client
}

func NewMonorailPRPCClient(client *prpc.Client) MonorailClient {
	return &monorailPRPCClient{client}
}

func (c *monorailPRPCClient) InsertIssue(ctx context.Context, in *InsertIssueRequest, opts ...grpc.CallOption) (*InsertIssueResponse, error) {
	out := new(InsertIssueResponse)
	err := c.client.Call(ctx, "monorail.Monorail", "InsertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailPRPCClient) InsertComment(ctx context.Context, in *InsertCommentRequest, opts ...grpc.CallOption) (*InsertCommentResponse, error) {
	out := new(InsertCommentResponse)
	err := c.client.Call(ctx, "monorail.Monorail", "InsertComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailPRPCClient) IssuesList(ctx context.Context, in *IssuesListRequest, opts ...grpc.CallOption) (*IssuesListResponse, error) {
	out := new(IssuesListResponse)
	err := c.client.Call(ctx, "monorail.Monorail", "IssuesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailPRPCClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.client.Call(ctx, "monorail.Monorail", "GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailPRPCClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.client.Call(ctx, "monorail.Monorail", "ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type monorailClient struct {
	cc *grpc.ClientConn
}

func NewMonorailClient(cc *grpc.ClientConn) MonorailClient {
	return &monorailClient{cc}
}

func (c *monorailClient) InsertIssue(ctx context.Context, in *InsertIssueRequest, opts ...grpc.CallOption) (*InsertIssueResponse, error) {
	out := new(InsertIssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Monorail/InsertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailClient) InsertComment(ctx context.Context, in *InsertCommentRequest, opts ...grpc.CallOption) (*InsertCommentResponse, error) {
	out := new(InsertCommentResponse)
	err := c.cc.Invoke(ctx, "/monorail.Monorail/InsertComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailClient) IssuesList(ctx context.Context, in *IssuesListRequest, opts ...grpc.CallOption) (*IssuesListResponse, error) {
	out := new(IssuesListResponse)
	err := c.cc.Invoke(ctx, "/monorail.Monorail/IssuesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/monorail.Monorail/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorailClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/monorail.Monorail/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonorailServer is the server API for Monorail service.
type MonorailServer interface {
	// Creates an issue.
	InsertIssue(context.Context, *InsertIssueRequest) (*InsertIssueResponse, error)
	// Posts a comment to an issue. Can update issue attributes, such as status.
	InsertComment(context.Context, *InsertCommentRequest) (*InsertCommentResponse, error)
	// Lists issues from a project.
	IssuesList(context.Context, *IssuesListRequest) (*IssuesListResponse, error)
	// GetIssue gets an issue by id.
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
	// ListComments returns comments of an issue.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
}

func RegisterMonorailServer(s prpc.Registrar, srv MonorailServer) {
	s.RegisterService(&_Monorail_serviceDesc, srv)
}

func _Monorail_InsertIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorailServer).InsertIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Monorail/InsertIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorailServer).InsertIssue(ctx, req.(*InsertIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monorail_InsertComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorailServer).InsertComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Monorail/InsertComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorailServer).InsertComment(ctx, req.(*InsertCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monorail_IssuesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorailServer).IssuesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Monorail/IssuesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorailServer).IssuesList(ctx, req.(*IssuesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monorail_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorailServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Monorail/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorailServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monorail_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorailServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Monorail/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorailServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Monorail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.Monorail",
	HandlerType: (*MonorailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertIssue",
			Handler:    _Monorail_InsertIssue_Handler,
		},
		{
			MethodName: "InsertComment",
			Handler:    _Monorail_InsertComment_Handler,
		},
		{
			MethodName: "IssuesList",
			Handler:    _Monorail_IssuesList_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _Monorail_GetIssue_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _Monorail_ListComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/monorail/monorail.proto",
}

func init() {
	proto.RegisterFile("infra/monorail/monorail.proto", fileDescriptor_monorail_9af8dd27292aca5e)
}

var fileDescriptor_monorail_9af8dd27292aca5e = []byte{
	// 1069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x73, 0xe3, 0xb4,
	0x17, 0xaf, 0x9d, 0x38, 0x89, 0x9f, 0xd3, 0x6e, 0xaa, 0xf6, 0xbb, 0x5f, 0x13, 0xba, 0x6d, 0xc6,
	0xc3, 0xb2, 0x99, 0x9d, 0x4e, 0x61, 0xc2, 0x05, 0x06, 0x0e, 0x74, 0xb7, 0x81, 0xc9, 0x4c, 0xdb,
	0x14, 0x51, 0xd8, 0xe1, 0x42, 0x47, 0xb5, 0xb5, 0xac, 0xc1, 0x96, 0x52, 0x4b, 0x99, 0x6d, 0x8f,
	0x70, 0xe0, 0xc6, 0x81, 0xff, 0x82, 0xff, 0x8e, 0xe1, 0x3f, 0x60, 0x24, 0xcb, 0xb5, 0x9d, 0x4d,
	0x3a, 0x2d, 0x37, 0xbd, 0x9f, 0x7a, 0xd2, 0x7b, 0x9f, 0x8f, 0x04, 0x4f, 0x62, 0xf6, 0x3a, 0x23,
	0x1f, 0xa5, 0x9c, 0xf1, 0x8c, 0xc4, 0xc9, 0xed, 0xe2, 0x60, 0x96, 0x71, 0xc9, 0x51, 0xa7, 0x90,
	0x83, 0xbf, 0x6d, 0x70, 0x26, 0x42, 0xcc, 0x29, 0xda, 0x87, 0x16, 0x99, 0xcb, 0x37, 0x3c, 0xf3,
	0xad, 0x81, 0x35, 0xf4, 0x46, 0xdb, 0x07, 0xb7, 0x41, 0x87, 0x92, 0xa7, 0x67, 0x34, 0x13, 0x9c,
	0x61, 0xe3, 0x83, 0x3e, 0x06, 0xf7, 0x32, 0xe1, 0xe1, 0x2f, 0x34, 0x9a, 0x32, 0xdf, 0x1e, 0x34,
	0x86, 0xde, 0x08, 0x95, 0x01, 0x3a, 0x23, 0xa6, 0xaf, 0x71, 0xe9, 0x84, 0x3e, 0x00, 0x3b, 0x0c,
	0xfd, 0x96, 0x76, 0x5d, 0x9e, 0xdb, 0x0e, 0x43, 0x34, 0x00, 0x2f, 0xa2, 0x22, 0xcc, 0xe2, 0x99,
	0x8c, 0x39, 0xf3, 0x3b, 0x03, 0x6b, 0xe8, 0xe2, 0xaa, 0x0a, 0x6d, 0x80, 0x1d, 0x47, 0xbe, 0x3b,
	0xb0, 0x86, 0x0e, 0xb6, 0xe3, 0x08, 0xed, 0x02, 0x84, 0x3c, 0x9d, 0x71, 0x46, 0x99, 0x14, 0x3e,
	0x0c, 0x1a, 0x43, 0x17, 0x57, 0x34, 0xe8, 0x31, 0xb4, 0x12, 0x72, 0x49, 0x13, 0xe1, 0x7b, 0xda,
	0x66, 0x24, 0xf4, 0x1c, 0x1c, 0xfe, 0x96, 0xd1, 0xcc, 0xef, 0xde, 0x71, 0xdc, 0xdc, 0x45, 0xe5,
	0x10, 0x92, 0xc8, 0xb9, 0xf0, 0x37, 0x75, 0x41, 0x46, 0x42, 0x3e, 0xb4, 0xc5, 0x3c, 0x4d, 0x49,
	0x76, 0xe3, 0x23, 0x6d, 0x28, 0x44, 0x65, 0x99, 0xcf, 0x22, 0x22, 0x69, 0xe4, 0x6f, 0xe5, 0x16,
	0x23, 0x06, 0x2f, 0xa0, 0x53, 0x5c, 0x8f, 0xf2, 0x8a, 0xd5, 0x7a, 0x12, 0xe9, 0x4b, 0x77, 0x70,
	0x21, 0xa2, 0x1d, 0x70, 0x67, 0x19, 0xff, 0x99, 0x86, 0x72, 0x12, 0xf9, 0xb6, 0xce, 0x50, 0x2a,
	0x82, 0xb7, 0x80, 0x26, 0x4c, 0xd0, 0x4c, 0x9a, 0x4c, 0x57, 0x73, 0x2a, 0x64, 0x3d, 0xc6, 0x5a,
	0x88, 0x41, 0x4f, 0xc1, 0xd1, 0xc9, 0x75, 0x36, 0x6f, 0xf4, 0x68, 0xb1, 0x5b, 0xb9, 0x55, 0x25,
	0x11, 0x94, 0x45, 0xe3, 0x94, 0xc4, 0x89, 0xdf, 0x18, 0x58, 0xc3, 0x0e, 0x2e, 0x15, 0xc1, 0x17,
	0xb0, 0x55, 0xdb, 0x58, 0xcc, 0x38, 0x13, 0xb4, 0xcc, 0x6d, 0xdd, 0x95, 0x3b, 0xf8, 0xc7, 0x82,
	0xed, 0x3c, 0xfc, 0x25, 0x4f, 0x53, 0xca, 0x64, 0x51, 0xf9, 0x97, 0xd0, 0x0e, 0x73, 0x8d, 0xc9,
	0xf0, 0x61, 0x25, 0xc3, 0x92, 0x80, 0x83, 0x42, 0x2c, 0xc2, 0xd0, 0xb0, 0x7e, 0xba, 0x65, 0xb3,
	0x78, 0x9f, 0x03, 0xf6, 0xa7, 0xd0, 0x36, 0xb9, 0x55, 0x73, 0x42, 0xce, 0xa4, 0x2a, 0xaa, 0x99,
	0xb7, 0xd0, 0x88, 0xe8, 0x79, 0xd1, 0x5c, 0xa1, 0x07, 0xd4, 0x1b, 0xf5, 0xca, 0xed, 0xbe, 0xd3,
	0x86, 0xa2, 0xdd, 0x22, 0xf8, 0x3f, 0xfc, 0x6f, 0xe1, 0x04, 0xf9, 0x9d, 0x05, 0x7f, 0x35, 0x61,
	0x53, 0xd7, 0x26, 0x8e, 0x63, 0x21, 0xef, 0xd7, 0xc3, 0x7d, 0xd8, 0x24, 0x51, 0x14, 0x2b, 0x1c,
	0x90, 0xe4, 0x2c, 0x57, 0x6b, 0xf4, 0xb9, 0xf8, 0x5d, 0x03, 0xfa, 0x0c, 0x1a, 0x21, 0x61, 0xfa,
	0x8c, 0x1b, 0xa3, 0x67, 0x0b, 0x37, 0x52, 0xdd, 0xf5, 0xe0, 0x25, 0x61, 0x8c, 0x46, 0xdf, 0xcc,
	0x69, 0x76, 0x83, 0x55, 0x0c, 0xda, 0x06, 0x47, 0xc3, 0xc4, 0x9c, 0x3c, 0x17, 0x14, 0xd4, 0x52,
	0x72, 0x8d, 0xa9, 0x98, 0x27, 0x52, 0xf8, 0x8e, 0x9e, 0xd8, 0x8a, 0x46, 0x45, 0xe5, 0x90, 0x6a,
	0xe5, 0x51, 0x39, 0x78, 0x02, 0xe8, 0xce, 0xe6, 0x97, 0x49, 0x2c, 0xde, 0xd0, 0xe8, 0x84, 0x5c,
	0xfb, 0xed, 0x81, 0x35, 0x6c, 0xe0, 0x9a, 0xae, 0xee, 0x13, 0xe7, 0xb8, 0xaf, 0xf9, 0xc4, 0x0c,
	0x75, 0xc1, 0xba, 0xd2, 0xb8, 0x77, 0xb1, 0x75, 0x85, 0x10, 0x34, 0x05, 0xcf, 0xa4, 0x0f, 0x5a,
	0xa1, 0xd7, 0xaa, 0x3e, 0x21, 0x49, 0x26, 0x27, 0x2c, 0xa2, 0xd7, 0xbe, 0x97, 0xd7, 0x57, 0x6a,
	0x2a, 0x30, 0xee, 0xd6, 0x60, 0xbc, 0x0b, 0x60, 0xd0, 0xa9, 0xea, 0x5b, 0xd7, 0x7b, 0x57, 0x34,
	0x55, 0x7b, 0xcc, 0xfc, 0x8d, 0xba, 0x3d, 0x66, 0xc1, 0x8f, 0xe0, 0x55, 0x6e, 0x10, 0xb5, 0xa1,
	0x71, 0x78, 0x7c, 0xdc, 0x5b, 0x53, 0x8b, 0xd3, 0xf1, 0xab, 0x9e, 0x85, 0x3a, 0xd0, 0x9c, 0x9e,
	0x8d, 0x4f, 0x7b, 0x36, 0x72, 0xc1, 0x99, 0xbe, 0x3a, 0x1d, 0x1f, 0xf5, 0x1a, 0xa8, 0x0b, 0x1d,
	0x3c, 0x3e, 0x9b, 0xe2, 0xf3, 0xf1, 0x51, 0xaf, 0x89, 0x3c, 0x68, 0x7f, 0x7b, 0x7e, 0x88, 0xf1,
	0xf8, 0xa8, 0xe7, 0xa0, 0x75, 0x70, 0xcf, 0xa7, 0x17, 0xdf, 0x8f, 0xf1, 0xe4, 0xab, 0x1f, 0x7a,
	0xad, 0xe0, 0x1c, 0xba, 0xe3, 0x2c, 0xe3, 0xd9, 0x09, 0x15, 0x82, 0xfc, 0x44, 0xd5, 0xd9, 0x43,
	0x1e, 0x51, 0xc3, 0x19, 0x7a, 0xad, 0xce, 0x96, 0x51, 0x22, 0x38, 0x33, 0x6c, 0x61, 0x24, 0x35,
	0xc5, 0x69, 0x1e, 0xa6, 0x07, 0xc1, 0xc5, 0x85, 0x18, 0xfc, 0x61, 0x01, 0xaa, 0x8e, 0x82, 0xc1,
	0xf2, 0x3e, 0x38, 0x54, 0x6d, 0x66, 0x90, 0xf8, 0xb8, 0x9c, 0x9b, 0x6a, 0x0d, 0x38, 0x77, 0xd2,
	0xc8, 0x97, 0x34, 0x15, 0xe6, 0x0d, 0x58, 0x82, 0x7c, 0x65, 0x55, 0xfd, 0x95, 0x5c, 0x92, 0xa4,
	0x98, 0x9d, 0x86, 0xae, 0xbc, 0xa6, 0x0b, 0x2e, 0xa0, 0x95, 0x83, 0xa7, 0xd2, 0x27, 0xbb, 0xd6,
	0xa7, 0x92, 0xca, 0x9b, 0x35, 0x2a, 0x7f, 0x0a, 0x1b, 0xb1, 0xb8, 0xa8, 0xbe, 0x1b, 0xeb, 0x1a,
	0xd7, 0xeb, 0xb1, 0x38, 0x2a, 0x95, 0xc1, 0x00, 0xa0, 0xa4, 0x76, 0x75, 0x89, 0x8c, 0xa4, 0xd4,
	0x80, 0x4c, 0xaf, 0x83, 0xcf, 0xe1, 0xd1, 0xd7, 0xb4, 0x4e, 0xaa, 0xc3, 0x3a, 0xb5, 0xad, 0x26,
	0x96, 0xe0, 0x57, 0x0b, 0xb6, 0xd4, 0x4d, 0x1a, 0xa0, 0x8b, 0x07, 0x67, 0x40, 0x7b, 0xe0, 0xa5,
	0xe4, 0xfa, 0x22, 0x33, 0x97, 0x64, 0xbf, 0x03, 0xb0, 0x3d, 0xf0, 0xf4, 0x38, 0x5f, 0xc4, 0x7a,
	0xc2, 0x1b, 0x8b, 0x13, 0x1e, 0xfc, 0x69, 0xc1, 0x76, 0xbd, 0x86, 0xff, 0xd4, 0xd5, 0x67, 0xf5,
	0xae, 0x6e, 0x96, 0xde, 0x05, 0x8b, 0x3d, 0xa0, 0xaf, 0xbf, 0xdb, 0x25, 0xa7, 0x96, 0x9f, 0x0c,
	0xfb, 0x1e, 0x9f, 0x8c, 0xd5, 0x0c, 0x3c, 0x02, 0x37, 0xa2, 0x09, 0x95, 0x34, 0x7a, 0x71, 0xa3,
	0x89, 0x68, 0x55, 0xaa, 0xd2, 0xcd, 0x7c, 0x1c, 0x5a, 0xb7, 0x1f, 0x07, 0x45, 0xb5, 0x05, 0xbf,
	0x68, 0x52, 0x52, 0x54, 0x5b, 0x28, 0x1e, 0xc2, 0xf1, 0x4b, 0xe6, 0x0f, 0x96, 0xcc, 0xdf, 0xe8,
	0xb7, 0x06, 0x74, 0x4e, 0x4c, 0x0e, 0x74, 0x0c, 0x5e, 0xe5, 0x25, 0x45, 0x3b, 0x8b, 0x0f, 0x5e,
	0x75, 0x08, 0xfb, 0x4f, 0x56, 0x58, 0xcd, 0x53, 0xb2, 0x86, 0x30, 0xac, 0xd7, 0x5e, 0x19, 0xb4,
	0x7b, 0xf7, 0x03, 0xda, 0xdf, 0x5b, 0x69, 0xbf, 0xcd, 0x39, 0x01, 0x28, 0xe9, 0x01, 0xbd, 0x7f,
	0xc7, 0xfb, 0xd1, 0xdf, 0x59, 0x6e, 0xbc, 0x4d, 0xf5, 0x29, 0x74, 0x0a, 0x5c, 0xa1, 0xf7, 0x4a,
	0xdf, 0x05, 0xac, 0xf5, 0x17, 0xd9, 0x23, 0x58, 0x43, 0x53, 0xe8, 0x56, 0xe7, 0x19, 0x55, 0x6e,
	0x62, 0x09, 0xd6, 0xfa, 0xbb, 0xab, 0xcc, 0x45, 0x29, 0x97, 0x2d, 0xfd, 0x03, 0xfe, 0xe4, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x7a, 0x8c, 0xf9, 0x22, 0x0b, 0x00, 0x00,
}
