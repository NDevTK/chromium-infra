// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

package main

import (
	"os"
	"os/exec"
	"regexp"
	"strconv"
	"text/template"
)

// gitConfigTempl is a template for .gitconfig file generated by Kitchen.
//
// Note that we have to do two insteadOf rewrites: / => /a/ and /a/ => /a/.
// The later is needed to allow https://.../a/ to be passed to git explicitly.
// Without it, git will rewrite the url into https://.../a/a/ which doesn't
// work.
//
// Windows-specific settings are taken from <git-install>/mingw64/etc/gitconfig.
// We can't pick up this default config because it specifies Git-For-Windows
// built-in credential.helper that interferes with git-credential-luci. Settings
// useless on bots (like fancy terminal colors) are omitted.
var gitConfigTempl = template.Must(template.New(".gitconfig").Parse(`# Autogenerated by Kitchen.

[user]
  email = {{.UserEmail}}
  name = {{.UserName}}

[core]
  deltaBaseCacheLimit = 2g
{{- if .IsWindows}}
  fscache = true
  symlinks = false
  autocrlf = false
  filemode = false{{end}}

[pack]
  packSizeLimit = 2g
{{if .IsWindows}}
[http]
  # This is path inside mingw64 installation, bundled with Git For Windows.
  sslCAinfo = /ssl/certs/ca-bundle.crt

[diff "astextplain"]
  textconv = astextplain
{{end}}
[gc]
  autodetach = false
{{if .UseCredentialHelper}}
[credential]
  helper = luci
{{end -}}
{{- range .KnownGerritHosts}}
[url "https://{{.}}/a/"]
  insteadOf = https://{{.}}/a/
  insteadOf = https://{{.}}/
{{end}}
{{- if .GitProtocolVersion}}
[protocol]
  version = {{.GitProtocolVersion}}
{{end -}}
`))

// gitConfig is used to setup .gitconfig used by Kitchen subprocesses.
//
// This is used only if git authentication is enabled. Otherwise we don't mess
// with git config at all.
//
// Assumes 'git' binary is actually gitwrapper and that 'git-credential-luci'
// binary is in PATH.
type gitConfig struct {
	IsWindows           bool     // true if running on Windows
	UserEmail           string   // value of user.email
	UserName            string   // value of user.name
	UseCredentialHelper bool     // if true, use git-credential-luci helper for auth
	KnownGerritHosts    []string // hosts to use '/a/' paths on to force auth
	GitProtocolVersion  int      // protocol.version config if positive.
}

var gitVersionRe = regexp.MustCompile(`^git version (\d+)\.(\d+)`)

func parseGitVersion(version []byte) (int, int) {
	m := gitVersionRe.FindSubmatch(version)
	if len(m) < 3 {
		return 0, 0
	}
	major, err := strconv.Atoi(string(m[1]))
	if err != nil {
		return 0, 0
	}
	minor, err := strconv.Atoi(string(m[2]))
	if err != nil {
		return 0, 0
	}
	return major, minor
}

func shouldEnableGitProtocolV2() bool {
	out, err := exec.Command("git", "version").Output()
	if err != nil {
		return false
	}

	major, minor := parseGitVersion(out)
	return major >= 3 || (major >= 2 && minor >= 18)
}

// Write actually writes the config to 'path'.
func (gc *gitConfig) Write(path string) error {
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()
	if err = gitConfigTempl.Execute(f, gc); err != nil {
		return err
	}
	return f.Close() // failure to close the file is an overall failure
}
