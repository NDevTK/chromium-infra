// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/admin/v1/tracker.proto

package admin

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tricium "infra/tricium/api/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// WorkflowLaunchedRequest specified details need to mark a workflow as
// launched.
//
// This message should be sent by the Launcher after a workflow has been launched.
type WorkflowLaunchedRequest struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *WorkflowLaunchedRequest) Reset()                    { *m = WorkflowLaunchedRequest{} }
func (m *WorkflowLaunchedRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkflowLaunchedRequest) ProtoMessage()               {}
func (*WorkflowLaunchedRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *WorkflowLaunchedRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

type WorkflowLaunchedResponse struct {
}

func (m *WorkflowLaunchedResponse) Reset()                    { *m = WorkflowLaunchedResponse{} }
func (m *WorkflowLaunchedResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkflowLaunchedResponse) ProtoMessage()               {}
func (*WorkflowLaunchedResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// WorkerLaunchedRequest specifies details needed to mark a worker as launched.
// This includes details useful for the tracking UI.
//
// This message should be sent by the Driver after a swarming task for a worker
// has been triggered.
type WorkerLaunchedRequest struct {
	RunId             int64  `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	Worker            string `protobuf:"bytes,2,opt,name=worker" json:"worker,omitempty"`
	IsolatedInputHash string `protobuf:"bytes,3,opt,name=isolated_input_hash,json=isolatedInputHash" json:"isolated_input_hash,omitempty"`
	SwarmingTaskId    string `protobuf:"bytes,4,opt,name=swarming_task_id,json=swarmingTaskId" json:"swarming_task_id,omitempty"`
}

func (m *WorkerLaunchedRequest) Reset()                    { *m = WorkerLaunchedRequest{} }
func (m *WorkerLaunchedRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerLaunchedRequest) ProtoMessage()               {}
func (*WorkerLaunchedRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *WorkerLaunchedRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *WorkerLaunchedRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *WorkerLaunchedRequest) GetIsolatedInputHash() string {
	if m != nil {
		return m.IsolatedInputHash
	}
	return ""
}

func (m *WorkerLaunchedRequest) GetSwarmingTaskId() string {
	if m != nil {
		return m.SwarmingTaskId
	}
	return ""
}

type WorkerLaunchedResponse struct {
}

func (m *WorkerLaunchedResponse) Reset()                    { *m = WorkerLaunchedResponse{} }
func (m *WorkerLaunchedResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkerLaunchedResponse) ProtoMessage()               {}
func (*WorkerLaunchedResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

// WorkerDoneRequest specifies details needed to mark a worker as done.
// This includes details useful for the tracking UI.
//
// This message should be sent by the Driver after results from the swarming
// task for a worker has been collected.
type WorkerDoneRequest struct {
	RunId              int64             `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	Worker             string            `protobuf:"bytes,2,opt,name=worker" json:"worker,omitempty"`
	IsolatedOutputHash string            `protobuf:"bytes,3,opt,name=isolated_output_hash,json=isolatedOutputHash" json:"isolated_output_hash,omitempty"`
	ExitCode           int64             `protobuf:"varint,4,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	Provides           tricium.Data_Type `protobuf:"varint,5,opt,name=provides,enum=tricium.Data_Type" json:"provides,omitempty"`
}

func (m *WorkerDoneRequest) Reset()                    { *m = WorkerDoneRequest{} }
func (m *WorkerDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerDoneRequest) ProtoMessage()               {}
func (*WorkerDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *WorkerDoneRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *WorkerDoneRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *WorkerDoneRequest) GetIsolatedOutputHash() string {
	if m != nil {
		return m.IsolatedOutputHash
	}
	return ""
}

func (m *WorkerDoneRequest) GetExitCode() int64 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *WorkerDoneRequest) GetProvides() tricium.Data_Type {
	if m != nil {
		return m.Provides
	}
	return tricium.Data_NONE
}

type WorkerDoneResponse struct {
}

func (m *WorkerDoneResponse) Reset()                    { *m = WorkerDoneResponse{} }
func (m *WorkerDoneResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkerDoneResponse) ProtoMessage()               {}
func (*WorkerDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func init() {
	proto.RegisterType((*WorkflowLaunchedRequest)(nil), "admin.WorkflowLaunchedRequest")
	proto.RegisterType((*WorkflowLaunchedResponse)(nil), "admin.WorkflowLaunchedResponse")
	proto.RegisterType((*WorkerLaunchedRequest)(nil), "admin.WorkerLaunchedRequest")
	proto.RegisterType((*WorkerLaunchedResponse)(nil), "admin.WorkerLaunchedResponse")
	proto.RegisterType((*WorkerDoneRequest)(nil), "admin.WorkerDoneRequest")
	proto.RegisterType((*WorkerDoneResponse)(nil), "admin.WorkerDoneResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tracker service

type TrackerClient interface {
	// WorkflowLaunched marks the workflow as launched for a specificed run.
	WorkflowLaunched(ctx context.Context, in *WorkflowLaunchedRequest, opts ...grpc.CallOption) (*WorkflowLaunchedResponse, error)
	// WorkerLaunched marks the specified worker as launched.
	WorkerLaunched(ctx context.Context, in *WorkerLaunchedRequest, opts ...grpc.CallOption) (*WorkerLaunchedResponse, error)
	// WorkerDone marks the specified worker as done.
	WorkerDone(ctx context.Context, in *WorkerDoneRequest, opts ...grpc.CallOption) (*WorkerDoneResponse, error)
}
type trackerPRPCClient struct {
	client *prpc.Client
}

func NewTrackerPRPCClient(client *prpc.Client) TrackerClient {
	return &trackerPRPCClient{client}
}

func (c *trackerPRPCClient) WorkflowLaunched(ctx context.Context, in *WorkflowLaunchedRequest, opts ...grpc.CallOption) (*WorkflowLaunchedResponse, error) {
	out := new(WorkflowLaunchedResponse)
	err := c.client.Call(ctx, "admin.Tracker", "WorkflowLaunched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerPRPCClient) WorkerLaunched(ctx context.Context, in *WorkerLaunchedRequest, opts ...grpc.CallOption) (*WorkerLaunchedResponse, error) {
	out := new(WorkerLaunchedResponse)
	err := c.client.Call(ctx, "admin.Tracker", "WorkerLaunched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerPRPCClient) WorkerDone(ctx context.Context, in *WorkerDoneRequest, opts ...grpc.CallOption) (*WorkerDoneResponse, error) {
	out := new(WorkerDoneResponse)
	err := c.client.Call(ctx, "admin.Tracker", "WorkerDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type trackerClient struct {
	cc *grpc.ClientConn
}

func NewTrackerClient(cc *grpc.ClientConn) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) WorkflowLaunched(ctx context.Context, in *WorkflowLaunchedRequest, opts ...grpc.CallOption) (*WorkflowLaunchedResponse, error) {
	out := new(WorkflowLaunchedResponse)
	err := grpc.Invoke(ctx, "/admin.Tracker/WorkflowLaunched", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) WorkerLaunched(ctx context.Context, in *WorkerLaunchedRequest, opts ...grpc.CallOption) (*WorkerLaunchedResponse, error) {
	out := new(WorkerLaunchedResponse)
	err := grpc.Invoke(ctx, "/admin.Tracker/WorkerLaunched", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) WorkerDone(ctx context.Context, in *WorkerDoneRequest, opts ...grpc.CallOption) (*WorkerDoneResponse, error) {
	out := new(WorkerDoneResponse)
	err := grpc.Invoke(ctx, "/admin.Tracker/WorkerDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tracker service

type TrackerServer interface {
	// WorkflowLaunched marks the workflow as launched for a specificed run.
	WorkflowLaunched(context.Context, *WorkflowLaunchedRequest) (*WorkflowLaunchedResponse, error)
	// WorkerLaunched marks the specified worker as launched.
	WorkerLaunched(context.Context, *WorkerLaunchedRequest) (*WorkerLaunchedResponse, error)
	// WorkerDone marks the specified worker as done.
	WorkerDone(context.Context, *WorkerDoneRequest) (*WorkerDoneResponse, error)
}

func RegisterTrackerServer(s prpc.Registrar, srv TrackerServer) {
	s.RegisterService(&_Tracker_serviceDesc, srv)
}

func _Tracker_WorkflowLaunched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowLaunchedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).WorkflowLaunched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Tracker/WorkflowLaunched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).WorkflowLaunched(ctx, req.(*WorkflowLaunchedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_WorkerLaunched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerLaunchedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).WorkerLaunched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Tracker/WorkerLaunched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).WorkerLaunched(ctx, req.(*WorkerLaunchedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_WorkerDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).WorkerDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Tracker/WorkerDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).WorkerDone(ctx, req.(*WorkerDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkflowLaunched",
			Handler:    _Tracker_WorkflowLaunched_Handler,
		},
		{
			MethodName: "WorkerLaunched",
			Handler:    _Tracker_WorkerLaunched_Handler,
		},
		{
			MethodName: "WorkerDone",
			Handler:    _Tracker_WorkerDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/tracker.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/tracker.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdf, 0x6e, 0xda, 0x30,
	0x14, 0xc6, 0x95, 0x31, 0x18, 0x9c, 0x0b, 0x04, 0x1e, 0xb0, 0x2c, 0xfb, 0x03, 0xca, 0x55, 0xae,
	0x12, 0x60, 0x4f, 0x30, 0x8d, 0x8b, 0x21, 0x6d, 0x9a, 0x94, 0x21, 0xed, 0x32, 0xf2, 0x62, 0xd3,
	0x58, 0x01, 0x3b, 0xb5, 0x1d, 0x68, 0xdf, 0xa6, 0xaf, 0xd2, 0x37, 0xea, 0x23, 0x54, 0x71, 0x02,
	0xe5, 0x4f, 0x91, 0xaa, 0x5e, 0xe6, 0xfc, 0xbe, 0x73, 0xfc, 0x9d, 0x9c, 0x0f, 0x3c, 0xc6, 0x97,
	0x12, 0x07, 0x5a, 0xb2, 0x98, 0xe5, 0xeb, 0x00, 0x67, 0x2c, 0xc0, 0x64, 0xcd, 0x78, 0xb0, 0x99,
	0x04, 0x5a, 0xe2, 0x38, 0xa5, 0xd2, 0xcf, 0xa4, 0xd0, 0x02, 0xd5, 0x4d, 0xdd, 0x19, 0x9e, 0x37,
	0x6c, 0x26, 0x01, 0xc1, 0x1a, 0x97, 0x3a, 0x77, 0x0c, 0x1f, 0xfe, 0x09, 0x99, 0x2e, 0x57, 0x62,
	0xfb, 0x0b, 0xe7, 0x3c, 0x4e, 0x28, 0x09, 0xe9, 0x75, 0x4e, 0x95, 0x46, 0x7d, 0x68, 0xc8, 0x9c,
	0x47, 0x8c, 0xd8, 0xd6, 0xc8, 0xf2, 0x6a, 0x61, 0x5d, 0xe6, 0x7c, 0x4e, 0x5c, 0x07, 0xec, 0xf3,
	0x0e, 0x95, 0x09, 0xae, 0xa8, 0x7b, 0x67, 0x41, 0xbf, 0x80, 0x54, 0xbe, 0x6c, 0x18, 0x1a, 0x40,
	0x63, 0x6b, 0xf4, 0xf6, 0x9b, 0x91, 0xe5, 0xb5, 0xc2, 0xea, 0x0b, 0xf9, 0xf0, 0x9e, 0x29, 0xb1,
	0xc2, 0x9a, 0x92, 0x88, 0xf1, 0x2c, 0xd7, 0x51, 0x82, 0x55, 0x62, 0xd7, 0x8c, 0xa8, 0xbb, 0x43,
	0xf3, 0x82, 0xfc, 0xc4, 0x2a, 0x41, 0x1e, 0x74, 0xd4, 0x16, 0xcb, 0x35, 0xe3, 0x57, 0x91, 0xc6,
	0x2a, 0x2d, 0x1e, 0x7a, 0x6b, 0xc4, 0xed, 0x5d, 0x7d, 0x81, 0x55, 0x3a, 0x27, 0xae, 0x0d, 0x83,
	0x53, 0x87, 0x95, 0xf9, 0x7b, 0x0b, 0xba, 0x25, 0x9a, 0x09, 0x4e, 0x5f, 0x69, 0x7c, 0x0c, 0xbd,
	0xbd, 0x71, 0x91, 0xeb, 0x13, 0xe7, 0x68, 0xc7, 0xfe, 0x18, 0x64, 0xac, 0x7f, 0x82, 0x16, 0xbd,
	0x61, 0x3a, 0x8a, 0x05, 0xa1, 0xc6, 0x73, 0x2d, 0x6c, 0x16, 0x85, 0x1f, 0x82, 0x50, 0xe4, 0x43,
	0x33, 0x93, 0x62, 0xc3, 0x08, 0x55, 0x76, 0x7d, 0x64, 0x79, 0xed, 0x29, 0xf2, 0xab, 0x63, 0xfa,
	0xb3, 0xe2, 0x8a, 0x8b, 0xdb, 0x8c, 0x86, 0x7b, 0x8d, 0xdb, 0x03, 0x74, 0xb8, 0x42, 0xb9, 0xd9,
	0xf4, 0xc1, 0x82, 0x77, 0x8b, 0x32, 0x1e, 0xe8, 0x2f, 0x74, 0x4e, 0xcf, 0x87, 0xbe, 0xfa, 0x26,
	0x2d, 0xfe, 0x85, 0x24, 0x38, 0xc3, 0x8b, 0xbc, 0x7c, 0x00, 0xfd, 0x86, 0xf6, 0xf1, 0x4f, 0x45,
	0x9f, 0x0f, 0x5a, 0xce, 0xd2, 0xe0, 0x7c, 0xb9, 0x40, 0xab, 0x71, 0xdf, 0x01, 0x9e, 0xb6, 0x40,
	0xf6, 0x91, 0xf8, 0xe0, 0x36, 0xce, 0xc7, 0x67, 0x48, 0x39, 0xe2, 0x7f, 0xc3, 0xc4, 0xfb, 0xdb,
	0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xa5, 0x57, 0x06, 0x32, 0x03, 0x00, 0x00,
}
