// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tricium;

// == Tricium task configuration ==

// The global configuration lists available task definitions, of
// which some may miss project-specific implementations.
message GlobalConfig {
  repeated TaskDef task_def = 1;
}

// A project-specific configuration lists tasks to be used for a project,
// these tasks are either defined in the global configuration or in the
// project configuration.
//
// NB! A selection of a globally defined task may require that a
// project-specific implementation be provided.
message ProjectConfig {
  repeated TaskDef task_def = 1;
  repeated Task task = 2;
}

message TaskDef {
  // Possible states of a task.
  // Enclosing the enum in a message to include 'State' in constants in
  // generated code.
  message State {
    enum Value {
      ENABLED = 0; // default
      DISABLED = 1;
    }
  }

  // The name of the task.
  // This name will be used to connect this task definition to task uses (Task).
  string name = 1; // Required.

  // The data dependency of this task.
  Data.Type needs = 2; // Required.

  // Data provided by this task.
  Data.Type provides = 3; // Required.

  // Glob filtering on file paths in a list of files to analyze.
  repeated string path_filter = 4; // Default: "*"

  // The implementation of this task.
  // If left blank, task uses must provide an implementation.
  TaskImpl impl = 5;

  // The state of this task (enabled, disabled). The default is enabled.
  State.Value state = 6; // Default: State.Value.Enabled
}

message Task {
  // The name of the task to use.
  // This name must corresond to a defined task to be valid.
  string name = 1; // Required.
  repeated Config config = 2;
  repeated Platform platform = 3; // Default: Linux/Intel64

  // Optional if the corresponding task definition has an implementation
  // (impl field). If there is an implementation present in
  // the definition, then this field can still be included to override it.
  TaskImpl impl = 4;
}

message TaskImpl {
  // Email to the owner of this task implementation.
  string owner = 1; // Required.

  // Name of the Monorail bug component for this implementation.
  string component = 2; // Required.

  // Definition of configurtions that task uses should be able to use.
  ConfigDef config_def = 3;

  // Recipe with the implementation.
  Recipe recipe = 4; // Required.

  // Platforms supported by the recipe with the implementation.
  repeated Platform platform = 5; // Default: Linux/Intel64
}

// Tricium data types.
//
// Any data type that needs to be included in inter-task/worker
// communication should be mapped to a build property.
message Data {

  // All available data types should be listed in this enum and have a
  // corresponding message definition nested in this Data message.
  enum Type {
    NONE = 0;
    REPO_DETAILS = 1;
    CHANGE_DETAILS = 2;
    FILES = 3;
    CLANG_DETAILS = 4;
    RESULTS = 5;
  }

  // For a code search integration, the whole code base of a project
  // will be analyzed in one go, hence there is a need to capture repo
  // information rather than change information.
  //
  // BUILD PROPERTY: tricium.data.repo_details
  message RepoDetails {
    string repository = 1;

    // TODO(emso): Add more fields.
    // Leaving this mostly empty for now, code search integration is further
    // down the road, after code review.
  }

  // For code review integration, part of the code base included in
  // a change is analyzed, hence there is a need to capture change
  // information in the context of the repo being changed.
  //
  // In addition, there may be more than one code review exposing change
  // information slightly differently. To preserve tool information,
  // there is a change context oneof field allowing for one kind of change
  // context entry per change.
  //
  // BUILD PROPERTY: tricium.data.change_details
  message ChangeDetails {
    // POSSIBLE EXTENSION: More change contexts.
    enum ChangeContext {
      GERRIT = 0;
    }
    ChangeContext context = 1;

    // A Gerrit change should accompanied by this field.
    GerritChange gerrit_change = 2;
  }

  message GerritChange {
    // Data corresponding to that provided by a Patchset Created
    // event in Gerrit.
    // TODO(emso): Fill in missing fields.
  }

  // BUILD PROPERTY: tricium.data.files
  message Files {
    // Reference to isolated files. Should contain the files to analyze.
    // Isolated files should be laid out with the same file system
    // structure as in the repository, with the root of the isolate
    // filesystem mapped to the root of the repository.
    IsolatedRef isolated_ref = 1;

    // List of isolated files together with modification information.
    repeated File file = 2;
  }

  message File {
    enum Modification {
      ADD = 0;
      EDIT = 1;
      DELETE = 2;
    }

    // Path from the root of the project repository.
    string path = 1;

    // For files in a change, include information of the modification.
    Modification mod = 2;
  }

  // BUILD PROPERTY: tricium.data.clang_details
  message ClangDetails {
    // Reference to isolated files. Should contain the clang compilation
    // database and files needed to compile cpp files among the files to
    // analyze.
    IsolatedRef isolated_ref = 1;

    // Path to the compilation database in the isolate. Typically,
    // this should be in the build root.
    string compilation_db = 2;

    // List of files needed to compile cpp files among the files to analyze.
    repeated File comp_dep_file = 3;
  }

  // The results from running a Tricium task. Results are streamed
  // out of a task and propagated via LogDog, and are not used for
  // inter-task communication, hence no need for a build property mapping.
  message Results {
    // Zero or more results found as comments, either inline comments
    // or change comments (comments without line positions).
    repeated Comment comment = 1;

    // POSSIBLE EXTENSION: More kinds of results here, for instance,
    // coverage.
  }

  message Comment {
    // Similar content as that needed to provide robot comments in Gerrit,
    // go/robot-comments-in-gerrit.
    // TODO(emso): Fill in missing fields.
    string msg = 1;
  }
}

// Tricium workflow configuration.
//
// Workflow configurations are generated by Tricium based on a merged
// configuration, of the global Tricium configuration and the project-specific
// configuration, and the file paths to be analyzed.
message Workflow {
  repeated Worker worker = 1;
}

// Workers correspond to nodes in a Tricium workflow.
message Worker {
  string name = 1;
  repeated Task next = 2;
  repeated Config config = 3;
  Recipe recipe = 4;
  repeated Platform platform = 5;
}

// Tricium utilitise.

message ConfigDef {
  string name = 1; // Required.
  string default = 2;
}

message Config {
  string name = 1; // Required.
  string value = 2; // Required.
}

message Recipe {
  // Repository URL of the recipe package.
  string repository = 1; // Required.

  // Name of the recipe to run.
  string name = 2; // Required.
}

message Platform {
  enum OS {
    LINUX = 0;
    WIN = 1; // Synonyms: cygwin
    MAC = 2; // Synonyms: darwin
  }
  enum Arch {
    INTEL_32 = 0;
    INTEL_64 = 1;
  }
  OS os = 1; // Required.
  Arch arch = 2; // Required.
}

// Isolated reference.
message IsolatedRef {
  string isolated_server = 1;
  string isolated_hash = 2;
}
