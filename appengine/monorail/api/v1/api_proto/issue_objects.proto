// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file defines protobufs for issues and related business
// objects, e.g., field values, comments, and attachments.

syntax = "proto3";

package monorail.v1;

import "google_proto/google/api/field_behavior.proto";
import "google_proto/google/api/resource.proto";
import "google/protobuf/timestamp.proto";

// States that an issue or its comments can be in (aip.dev/216).
// Next available tag: 4
enum IssueContentState {
  // The default value. This value is used if the state is omitted.
  STATE_UNSPECIFIED = 0;
  // The Issue or Comment is available.
  ACTIVE = 1;
  // The Issue or Comment has been deleted.
  DELETED = 2;
  // The Issue or Comment has been flagged as spam.
  SPAM = 3;
}

// Documents and tracks a bug, task, or feature request within a Project.
// Next available tag: 3
message Issue {
  option (google.api.resource) = {
    type: "api.crbug.com/Issue"
    pattern: "project/{project}/issues/{issue}"
  };

  // Resource name of the issue.
  string name = 1;
  // TODO(monorail:6988): The UI limits summary length while the backend does
  // not. Resolve this discrepancy.
  string summary = 2;
  // TODO(monorail:6988): Add remaining fields for Issue.
}

// Specifies a column in an issues list view.
// Next available tag: 2
message IssuesListColumn {
  // Column name shown in the column header.
  string column = 1;
}

// Represents a comment and any associated changes to an Issue.
//
// Comments cannot be Created or Updated through standard methods. The
// OUTPUT_ONLY annotations here indicate fields that would never be provided
// by the user even if these methods were made available.
// Next available tag: 7
message Comment {
  option (google.api.resource) = {
    type: "api.crbug.com/Comment"
    pattern: "projects/{project}/issues/{issue}/comments/{comment}"
  };

  // Resource name of the comment.
  string name = 1;
  // The state of the comment.
  IssueContentState state = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The text of the comment.
  string content = 3;
  // Resource name of the author of the comment.
  string commenter = 4 [
    (google.api.resource_reference) = { type: "api.crbug.com/User" },
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // The time this comment was added to the Issue.
  google.protobuf.Timestamp create_time = 5
      [(google.api.field_behavior) = OUTPUT_ONLY];
  // Optional string full text of an email that caused this comment to be added.
  string inbound_message = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // TODO(monorail:7186): add remaining fields for comment.
}

// The value of an approval for an issue.
// Next available tag: 2
message ApprovalValue {
  option (google.api.resource) = {
    type: "api.crbug.com/ApprovalValue"
    pattern: "projects/{project}/issues/{issue}/approvalValues/{approval}"
  };

  // The resource name of the approval value.
  string name = 1;

  // TODO(monorail:7194): Add fields from v0 approval.
}
