// Code generated by protoc-gen-go.
// source: infra/tools/kitchen/proto/result.proto
// DO NOT EDIT!

/*
Package kitchen is a generated protocol buffer package.

It is generated from these files:
	infra/tools/kitchen/proto/result.proto

It has these top-level messages:
	CookResult
	OptionalInt32
	KitchenError
*/
package kitchen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import recipe_engine "infra/tools/kitchen/third_party/recipe_engine"
import milo "github.com/luci/luci-go/common/proto/milo"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KitchenError_Type int32

const (
	// An unexpected internal error happened inside kitchen.
	KitchenError_INTERNAL_ERROR KitchenError_Type = 0
	// Kitchen input was invalid, for example flags.
	KitchenError_INVALID_INPUT KitchenError_Type = 1
	// Kitchen execution was cancelled.
	KitchenError_CANCELED KitchenError_Type = 2
	// Recipe has infra failed.
	KitchenError_RECIPE_INFRA_FAILURE KitchenError_Type = 3
)

var KitchenError_Type_name = map[int32]string{
	0: "INTERNAL_ERROR",
	1: "INVALID_INPUT",
	2: "CANCELED",
	3: "RECIPE_INFRA_FAILURE",
}
var KitchenError_Type_value = map[string]int32{
	"INTERNAL_ERROR":       0,
	"INVALID_INPUT":        1,
	"CANCELED":             2,
	"RECIPE_INFRA_FAILURE": 3,
}

func (x KitchenError_Type) String() string {
	return proto.EnumName(KitchenError_Type_name, int32(x))
}
func (KitchenError_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Result of kitchen cook execution.
type CookResult struct {
	// An error returned by kitchen.
	// A build has infra-failed if and only if there was a kitchen error.
	// If a recipe fails with a failure type different from step failure,
	// it becomes a kitchen error.
	KitchenError *KitchenError `protobuf:"bytes,1,opt,name=kitchen_error,json=kitchenError" json:"kitchen_error,omitempty"`
	// recipes.py's exit code.
	RecipeExitCode *OptionalInt32 `protobuf:"bytes,2,opt,name=recipe_exit_code,json=recipeExitCode" json:"recipe_exit_code,omitempty"`
	// Results returned by recipe engine.
	RecipeResult *recipe_engine.Result `protobuf:"bytes,3,opt,name=recipe_result,json=recipeResult" json:"recipe_result,omitempty"`
	// Final state of the build.
	Build *milo.Step `protobuf:"bytes,5,opt,name=build" json:"build,omitempty"`
}

func (m *CookResult) Reset()                    { *m = CookResult{} }
func (m *CookResult) String() string            { return proto.CompactTextString(m) }
func (*CookResult) ProtoMessage()               {}
func (*CookResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CookResult) GetKitchenError() *KitchenError {
	if m != nil {
		return m.KitchenError
	}
	return nil
}

func (m *CookResult) GetRecipeExitCode() *OptionalInt32 {
	if m != nil {
		return m.RecipeExitCode
	}
	return nil
}

func (m *CookResult) GetRecipeResult() *recipe_engine.Result {
	if m != nil {
		return m.RecipeResult
	}
	return nil
}

func (m *CookResult) GetBuild() *milo.Step {
	if m != nil {
		return m.Build
	}
	return nil
}

// An int32 that can be distinguished from absence of the value.
type OptionalInt32 struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *OptionalInt32) Reset()                    { *m = OptionalInt32{} }
func (m *OptionalInt32) String() string            { return proto.CompactTextString(m) }
func (*OptionalInt32) ProtoMessage()               {}
func (*OptionalInt32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OptionalInt32) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type KitchenError struct {
	Type KitchenError_Type `protobuf:"varint,1,opt,name=type,enum=kitchen.KitchenError_Type" json:"type,omitempty"`
	Text string            `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	// Kitchen call stack is populated in internal errors.
	CallStack []string `protobuf:"bytes,3,rep,name=call_stack,json=callStack" json:"call_stack,omitempty"`
}

func (m *KitchenError) Reset()                    { *m = KitchenError{} }
func (m *KitchenError) String() string            { return proto.CompactTextString(m) }
func (*KitchenError) ProtoMessage()               {}
func (*KitchenError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KitchenError) GetType() KitchenError_Type {
	if m != nil {
		return m.Type
	}
	return KitchenError_INTERNAL_ERROR
}

func (m *KitchenError) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *KitchenError) GetCallStack() []string {
	if m != nil {
		return m.CallStack
	}
	return nil
}

func init() {
	proto.RegisterType((*CookResult)(nil), "kitchen.CookResult")
	proto.RegisterType((*OptionalInt32)(nil), "kitchen.OptionalInt32")
	proto.RegisterType((*KitchenError)(nil), "kitchen.KitchenError")
	proto.RegisterEnum("kitchen.KitchenError_Type", KitchenError_Type_name, KitchenError_Type_value)
}

func init() { proto.RegisterFile("infra/tools/kitchen/proto/result.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x9d, 0x9b, 0x64, 0x5b, 0xee, 0x92, 0xe0, 0x89, 0x6e, 0x98, 0xc0, 0x20, 0x04, 0x36, 0xfa,
	0x32, 0x1b, 0xd2, 0xb7, 0xee, 0x65, 0xc6, 0x55, 0xc1, 0x2c, 0xb8, 0x45, 0x4d, 0xf6, 0x2a, 0x1c,
	0x47, 0x4b, 0x44, 0x14, 0xcb, 0x28, 0xd7, 0x23, 0xf9, 0xc3, 0x7d, 0xca, 0x3e, 0x63, 0x58, 0x72,
	0x47, 0x03, 0x7d, 0xb1, 0x75, 0xcf, 0xbd, 0xe7, 0x9e, 0x73, 0x24, 0xf8, 0x22, 0xcb, 0x5f, 0x26,
	0x8f, 0x50, 0x6b, 0x75, 0x88, 0x76, 0x12, 0x8b, 0xad, 0x28, 0xa3, 0xca, 0x68, 0xd4, 0x91, 0x11,
	0x87, 0x5a, 0x61, 0x68, 0x0b, 0xf2, 0xa6, 0xed, 0x8d, 0x6f, 0x5e, 0x22, 0xe0, 0x56, 0x9a, 0x35,
	0xaf, 0x72, 0x83, 0xa7, 0xc8, 0x88, 0x42, 0x56, 0x82, 0x8b, 0x72, 0x23, 0x4b, 0x71, 0xb6, 0x64,
	0xfc, 0x6d, 0x23, 0x71, 0x5b, 0xaf, 0xc2, 0x42, 0xef, 0x23, 0x55, 0x17, 0xd2, 0x7e, 0xbe, 0x6e,
	0x74, 0x54, 0xe8, 0xfd, 0x5e, 0x3f, 0xe9, 0xee, 0xa5, 0xd2, 0x51, 0x5e, 0x96, 0x1a, 0x73, 0x94,
	0xba, 0x3c, 0x38, 0xf2, 0xf4, 0xaf, 0x07, 0x90, 0x68, 0xbd, 0x63, 0x76, 0x23, 0xb9, 0x81, 0x61,
	0xab, 0xce, 0x85, 0x31, 0xda, 0x04, 0xde, 0xc4, 0xbb, 0x7a, 0x37, 0xfb, 0x10, 0xb6, 0x68, 0xf8,
	0xc3, 0xfd, 0x69, 0xd3, 0x64, 0x83, 0xdd, 0xb3, 0x8a, 0x7c, 0x07, 0xff, 0xc9, 0xe5, 0x51, 0x22,
	0x2f, 0xf4, 0x5a, 0x04, 0x17, 0x96, 0xfe, 0xf1, 0x3f, 0xfd, 0xbe, 0x6a, 0xc4, 0x73, 0x95, 0x96,
	0x78, 0x3d, 0x63, 0x23, 0x37, 0x4f, 0x8f, 0x12, 0x13, 0xbd, 0x16, 0x8d, 0x7a, 0xbb, 0xc1, 0x05,
	0x0c, 0x3a, 0xad, 0xfa, 0x59, 0xfa, 0xd0, 0x79, 0x65, 0x03, 0x87, 0xb6, 0xce, 0x27, 0xd0, 0x5b,
	0xd5, 0x52, 0xad, 0x83, 0x9e, 0xe5, 0x40, 0xd8, 0x04, 0x0e, 0x1f, 0x51, 0x54, 0xcc, 0x35, 0xa6,
	0x9f, 0x61, 0x78, 0x26, 0x4f, 0x2e, 0xa1, 0xf7, 0x3b, 0x57, 0xb5, 0xb0, 0x21, 0x7b, 0xcc, 0x15,
	0xd3, 0x3f, 0x1e, 0x0c, 0x9e, 0xa7, 0x24, 0x21, 0x74, 0xf1, 0x54, 0xb9, 0xa9, 0xd1, 0x6c, 0xfc,
	0xe2, 0x55, 0x84, 0x8b, 0x53, 0x25, 0x98, 0x9d, 0x23, 0x04, 0xba, 0x28, 0x8e, 0x68, 0xb3, 0xf7,
	0x99, 0x3d, 0x93, 0x4f, 0x00, 0x45, 0xae, 0x14, 0x3f, 0x60, 0x5e, 0xec, 0x82, 0xce, 0xa4, 0x73,
	0xd5, 0x67, 0xfd, 0x06, 0x79, 0x6c, 0x80, 0xe9, 0x12, 0xba, 0x0b, 0x47, 0x1d, 0xa5, 0xd9, 0x82,
	0xb2, 0x2c, 0x9e, 0x73, 0xca, 0xd8, 0x3d, 0xf3, 0x5f, 0x91, 0xf7, 0x30, 0x4c, 0xb3, 0x9f, 0xf1,
	0x3c, 0xbd, 0xe5, 0x69, 0xf6, 0xb0, 0x5c, 0xf8, 0x1e, 0x19, 0xc0, 0xdb, 0x24, 0xce, 0x12, 0x3a,
	0xa7, 0xb7, 0xfe, 0x05, 0x09, 0xe0, 0x92, 0xd1, 0x24, 0x7d, 0xa0, 0x3c, 0xcd, 0xee, 0x58, 0xcc,
	0xef, 0xe2, 0x74, 0xbe, 0x64, 0xd4, 0xef, 0xac, 0x5e, 0xdb, 0x37, 0xbe, 0xfe, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x15, 0x40, 0x5c, 0x8f, 0x02, 0x00, 0x00,
}
