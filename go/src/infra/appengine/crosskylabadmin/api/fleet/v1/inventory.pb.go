// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto

package fleet

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetDeploymentStatusResponse_Status int32

const (
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_INVALID     GetDeploymentStatusResponse_Status = 0
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_IN_PROGRESS GetDeploymentStatusResponse_Status = 1
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_SUCCEEDED   GetDeploymentStatusResponse_Status = 2
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_FAILED      GetDeploymentStatusResponse_Status = 3
)

var GetDeploymentStatusResponse_Status_name = map[int32]string{
	0: "DUT_DEPLOYMENT_STATUS_INVALID",
	1: "DUT_DEPLOYMENT_STATUS_IN_PROGRESS",
	2: "DUT_DEPLOYMENT_STATUS_SUCCEEDED",
	3: "DUT_DEPLOYMENT_STATUS_FAILED",
}

var GetDeploymentStatusResponse_Status_value = map[string]int32{
	"DUT_DEPLOYMENT_STATUS_INVALID":     0,
	"DUT_DEPLOYMENT_STATUS_IN_PROGRESS": 1,
	"DUT_DEPLOYMENT_STATUS_SUCCEEDED":   2,
	"DUT_DEPLOYMENT_STATUS_FAILED":      3,
}

func (x GetDeploymentStatusResponse_Status) String() string {
	return proto.EnumName(GetDeploymentStatusResponse_Status_name, int32(x))
}

func (GetDeploymentStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{5, 0}
}

type EnsurePoolHealthyResponse_Failure int32

const (
	EnsurePoolHealthyResponse_FAILURE_INVALID EnsurePoolHealthyResponse_Failure = 0
	// Target pool had more than max_unhealthy_duts unhealthy duts before any
	// action was taken.
	EnsurePoolHealthyResponse_TOO_MANY_UNHEALTHY_DUTS EnsurePoolHealthyResponse_Failure = 1
	// Spare pool did not have enough healthy DUTs to make sure all DUTs in
	// target pool are healthy. In this failure mode, the available healthy
	// spare DUTs do get transferred to the target pool.
	EnsurePoolHealthyResponse_NOT_ENOUGH_HEALTHY_SPARES EnsurePoolHealthyResponse_Failure = 2
)

var EnsurePoolHealthyResponse_Failure_name = map[int32]string{
	0: "FAILURE_INVALID",
	1: "TOO_MANY_UNHEALTHY_DUTS",
	2: "NOT_ENOUGH_HEALTHY_SPARES",
}

var EnsurePoolHealthyResponse_Failure_value = map[string]int32{
	"FAILURE_INVALID":           0,
	"TOO_MANY_UNHEALTHY_DUTS":   1,
	"NOT_ENOUGH_HEALTHY_SPARES": 2,
}

func (x EnsurePoolHealthyResponse_Failure) String() string {
	return proto.EnumName(EnsurePoolHealthyResponse_Failure_name, int32(x))
}

func (EnsurePoolHealthyResponse_Failure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{10, 0}
}

type DeployDutRequest struct {
	// new_specs are the device specs this deployment effort should set.
	//
	// This should be a serialized inventory.CommonDeviceSpecs protobuf.
	//
	// Note that deploy will use new_specs to initialize the device specs for the
	// DUT, but the specs (in particular labels) may be updated further as a
	// result of the deployment process itself.
	//
	// new_specs must satisfy following sanity conditions:
	// - inventory.CommonDeviceSpecs.Id must be unset.
	NewSpecs []byte `protobuf:"bytes,1,opt,name=new_specs,json=newSpecs,proto3" json:"new_specs,omitempty"`
	// The deployment actions to take.
	//
	// Automated repair is always attempted at the end of deployment actions.
	Actions              *DutDeploymentActions `protobuf:"bytes,2,opt,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeployDutRequest) Reset()         { *m = DeployDutRequest{} }
func (m *DeployDutRequest) String() string { return proto.CompactTextString(m) }
func (*DeployDutRequest) ProtoMessage()    {}
func (*DeployDutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{0}
}

func (m *DeployDutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployDutRequest.Unmarshal(m, b)
}
func (m *DeployDutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployDutRequest.Marshal(b, m, deterministic)
}
func (m *DeployDutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployDutRequest.Merge(m, src)
}
func (m *DeployDutRequest) XXX_Size() int {
	return xxx_messageInfo_DeployDutRequest.Size(m)
}
func (m *DeployDutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployDutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployDutRequest proto.InternalMessageInfo

func (m *DeployDutRequest) GetNewSpecs() []byte {
	if m != nil {
		return m.NewSpecs
	}
	return nil
}

func (m *DeployDutRequest) GetActions() *DutDeploymentActions {
	if m != nil {
		return m.Actions
	}
	return nil
}

type DeployDutResponse struct {
	// Opaque ID to be used for future GetDeploymentStatus requests.
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployDutResponse) Reset()         { *m = DeployDutResponse{} }
func (m *DeployDutResponse) String() string { return proto.CompactTextString(m) }
func (*DeployDutResponse) ProtoMessage()    {}
func (*DeployDutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{1}
}

func (m *DeployDutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployDutResponse.Unmarshal(m, b)
}
func (m *DeployDutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployDutResponse.Marshal(b, m, deterministic)
}
func (m *DeployDutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployDutResponse.Merge(m, src)
}
func (m *DeployDutResponse) XXX_Size() int {
	return xxx_messageInfo_DeployDutResponse.Size(m)
}
func (m *DeployDutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployDutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeployDutResponse proto.InternalMessageInfo

func (m *DeployDutResponse) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

type RedeployDutRequest struct {
	// old_specs are the old device specs for a DUT already in the inventory that
	// the client wants to re-deploy.
	//
	// This should be a serialized inventory.CommonDeviceSpecs protobuf.
	//
	// old_specs must satisfy following sanity conditions:
	// - inventory.CommonDeviceSpecs.Id must be set. It will be used to identify
	//   the dut to deploy.
	OldSpecs []byte `protobuf:"bytes,1,opt,name=old_specs,json=oldSpecs,proto3" json:"old_specs,omitempty"`
	// new_specs are the device specs this redeployment effort should set.
	//
	// This should be a serialized inventory.CommonDeviceSpecs protobuf.
	//
	// Note that deploy will use new_specs to initialize the device specs for the
	// DUT, but the specs (in particular labels) may be updated further as a
	// result of the deployment process itself.
	//
	// new_specs must satisfy following sanity conditions:
	// - inventory.CommonDeviceSpecs.Id must be set and be identical to the one in
	//   old_specs.
	NewSpecs             []byte                `protobuf:"bytes,2,opt,name=new_specs,json=newSpecs,proto3" json:"new_specs,omitempty"`
	Actions              *DutDeploymentActions `protobuf:"bytes,3,opt,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RedeployDutRequest) Reset()         { *m = RedeployDutRequest{} }
func (m *RedeployDutRequest) String() string { return proto.CompactTextString(m) }
func (*RedeployDutRequest) ProtoMessage()    {}
func (*RedeployDutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{2}
}

func (m *RedeployDutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedeployDutRequest.Unmarshal(m, b)
}
func (m *RedeployDutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedeployDutRequest.Marshal(b, m, deterministic)
}
func (m *RedeployDutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeployDutRequest.Merge(m, src)
}
func (m *RedeployDutRequest) XXX_Size() int {
	return xxx_messageInfo_RedeployDutRequest.Size(m)
}
func (m *RedeployDutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeployDutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedeployDutRequest proto.InternalMessageInfo

func (m *RedeployDutRequest) GetOldSpecs() []byte {
	if m != nil {
		return m.OldSpecs
	}
	return nil
}

func (m *RedeployDutRequest) GetNewSpecs() []byte {
	if m != nil {
		return m.NewSpecs
	}
	return nil
}

func (m *RedeployDutRequest) GetActions() *DutDeploymentActions {
	if m != nil {
		return m.Actions
	}
	return nil
}

type RedeployDutResponse struct {
	// Opaque ID to be used for future GetDeploymentStatus requests.
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedeployDutResponse) Reset()         { *m = RedeployDutResponse{} }
func (m *RedeployDutResponse) String() string { return proto.CompactTextString(m) }
func (*RedeployDutResponse) ProtoMessage()    {}
func (*RedeployDutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{3}
}

func (m *RedeployDutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedeployDutResponse.Unmarshal(m, b)
}
func (m *RedeployDutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedeployDutResponse.Marshal(b, m, deterministic)
}
func (m *RedeployDutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeployDutResponse.Merge(m, src)
}
func (m *RedeployDutResponse) XXX_Size() int {
	return xxx_messageInfo_RedeployDutResponse.Size(m)
}
func (m *RedeployDutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeployDutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedeployDutResponse proto.InternalMessageInfo

func (m *RedeployDutResponse) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

type GetDeploymentStatusRequest struct {
	// An opaque ID returned by earlier deployment RPCs.
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeploymentStatusRequest) Reset()         { *m = GetDeploymentStatusRequest{} }
func (m *GetDeploymentStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeploymentStatusRequest) ProtoMessage()    {}
func (*GetDeploymentStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{4}
}

func (m *GetDeploymentStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeploymentStatusRequest.Unmarshal(m, b)
}
func (m *GetDeploymentStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeploymentStatusRequest.Marshal(b, m, deterministic)
}
func (m *GetDeploymentStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentStatusRequest.Merge(m, src)
}
func (m *GetDeploymentStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetDeploymentStatusRequest.Size(m)
}
func (m *GetDeploymentStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentStatusRequest proto.InternalMessageInfo

func (m *GetDeploymentStatusRequest) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

type GetDeploymentStatusResponse struct {
	Status GetDeploymentStatusResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=crosskylabadmin.fleet.GetDeploymentStatusResponse_Status" json:"status,omitempty"`
	// URL for the inventory change for this DUT deployment, if any.
	//
	// This change only includes any explicit inventory changes made for
	// deployment. Itj does not include any inventory changes that occur as a
	// consequence of the automated repair attempt at the end of deployment.
	ChangeUrl string `protobuf:"bytes,3,opt,name=change_url,json=changeUrl,proto3" json:"change_url,omitempty"`
	// The Skylab task created for the DUT deployment.
	TaskUrl              string   `protobuf:"bytes,4,opt,name=task_url,json=taskUrl,proto3" json:"task_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeploymentStatusResponse) Reset()         { *m = GetDeploymentStatusResponse{} }
func (m *GetDeploymentStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeploymentStatusResponse) ProtoMessage()    {}
func (*GetDeploymentStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{5}
}

func (m *GetDeploymentStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeploymentStatusResponse.Unmarshal(m, b)
}
func (m *GetDeploymentStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeploymentStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetDeploymentStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentStatusResponse.Merge(m, src)
}
func (m *GetDeploymentStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetDeploymentStatusResponse.Size(m)
}
func (m *GetDeploymentStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentStatusResponse proto.InternalMessageInfo

func (m *GetDeploymentStatusResponse) GetStatus() GetDeploymentStatusResponse_Status {
	if m != nil {
		return m.Status
	}
	return GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_INVALID
}

func (m *GetDeploymentStatusResponse) GetChangeUrl() string {
	if m != nil {
		return m.ChangeUrl
	}
	return ""
}

func (m *GetDeploymentStatusResponse) GetTaskUrl() string {
	if m != nil {
		return m.TaskUrl
	}
	return ""
}

type DeleteDutRequest struct {
	// inventory.CommonDeviceSpecs.Id for the DUT to delete.
	DutId                string   `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDutRequest) Reset()         { *m = DeleteDutRequest{} }
func (m *DeleteDutRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDutRequest) ProtoMessage()    {}
func (*DeleteDutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{6}
}

func (m *DeleteDutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDutRequest.Unmarshal(m, b)
}
func (m *DeleteDutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDutRequest.Marshal(b, m, deterministic)
}
func (m *DeleteDutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDutRequest.Merge(m, src)
}
func (m *DeleteDutRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDutRequest.Size(m)
}
func (m *DeleteDutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDutRequest proto.InternalMessageInfo

func (m *DeleteDutRequest) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

type DeleteDutResponse struct {
	// URL for the inventory change that removed the requested DUT.
	ChangeUrl            string   `protobuf:"bytes,1,opt,name=change_url,json=changeUrl,proto3" json:"change_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDutResponse) Reset()         { *m = DeleteDutResponse{} }
func (m *DeleteDutResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteDutResponse) ProtoMessage()    {}
func (*DeleteDutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{7}
}

func (m *DeleteDutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDutResponse.Unmarshal(m, b)
}
func (m *DeleteDutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDutResponse.Marshal(b, m, deterministic)
}
func (m *DeleteDutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDutResponse.Merge(m, src)
}
func (m *DeleteDutResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteDutResponse.Size(m)
}
func (m *DeleteDutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDutResponse proto.InternalMessageInfo

func (m *DeleteDutResponse) GetChangeUrl() string {
	if m != nil {
		return m.ChangeUrl
	}
	return ""
}

type DutDeploymentActions struct {
	// Stage the requested Chrome OS image on the USB attached to servo and DUT.
	StageImageToUsb bool `protobuf:"varint,1,opt,name=stage_image_to_usb,json=stageImageToUsb,proto3" json:"stage_image_to_usb,omitempty"`
	// Install DUT firmware from the image staged on USB.
	InstallFirmware bool `protobuf:"varint,2,opt,name=install_firmware,json=installFirmware,proto3" json:"install_firmware,omitempty"`
	// Install ChromeOS test image from the image staged on USB.
	InstallTestImage     bool     `protobuf:"varint,3,opt,name=install_test_image,json=installTestImage,proto3" json:"install_test_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DutDeploymentActions) Reset()         { *m = DutDeploymentActions{} }
func (m *DutDeploymentActions) String() string { return proto.CompactTextString(m) }
func (*DutDeploymentActions) ProtoMessage()    {}
func (*DutDeploymentActions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{8}
}

func (m *DutDeploymentActions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DutDeploymentActions.Unmarshal(m, b)
}
func (m *DutDeploymentActions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DutDeploymentActions.Marshal(b, m, deterministic)
}
func (m *DutDeploymentActions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutDeploymentActions.Merge(m, src)
}
func (m *DutDeploymentActions) XXX_Size() int {
	return xxx_messageInfo_DutDeploymentActions.Size(m)
}
func (m *DutDeploymentActions) XXX_DiscardUnknown() {
	xxx_messageInfo_DutDeploymentActions.DiscardUnknown(m)
}

var xxx_messageInfo_DutDeploymentActions proto.InternalMessageInfo

func (m *DutDeploymentActions) GetStageImageToUsb() bool {
	if m != nil {
		return m.StageImageToUsb
	}
	return false
}

func (m *DutDeploymentActions) GetInstallFirmware() bool {
	if m != nil {
		return m.InstallFirmware
	}
	return false
}

func (m *DutDeploymentActions) GetInstallTestImage() bool {
	if m != nil {
		return m.InstallTestImage
	}
	return false
}

type EnsurePoolHealthyRequest struct {
	// dut_selectors filters the set of DUTs considered by EnsurePoolHealthy.
	//
	// All pool changes occurs within this selected set of DUTs.
	// It is an error to omit dut_selector because that would allow
	// unconstrained DUT reallocation between pools, disregarding all other
	// labels.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// spare_pool is the pool from which healthy DUTs will be swapped into
	// target_pool.
	SparePool string `protobuf:"bytes,3,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
	// the target pool before any action is taken.
	//
	// max_unhealthy_duts is meaningful only when it has a positive value (> 0).
	//
	// If the total number of unhealthy DUTs is above this threshold,
	// EnsurePoolHealthy does not change DUT pools and returns a
	// NOT_ENOUGH_HEALTHY_SPARES failure.
	MaxUnhealthyDuts     int32                             `protobuf:"varint,4,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
	Options              *EnsurePoolHealthyRequest_Options `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *EnsurePoolHealthyRequest) Reset()         { *m = EnsurePoolHealthyRequest{} }
func (m *EnsurePoolHealthyRequest) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyRequest) ProtoMessage()    {}
func (*EnsurePoolHealthyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{9}
}

func (m *EnsurePoolHealthyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyRequest.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyRequest.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyRequest.Merge(m, src)
}
func (m *EnsurePoolHealthyRequest) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyRequest.Size(m)
}
func (m *EnsurePoolHealthyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyRequest proto.InternalMessageInfo

func (m *EnsurePoolHealthyRequest) GetDutSelector() *DutSelector {
	if m != nil {
		return m.DutSelector
	}
	return nil
}

func (m *EnsurePoolHealthyRequest) GetTargetPool() string {
	if m != nil {
		return m.TargetPool
	}
	return ""
}

func (m *EnsurePoolHealthyRequest) GetSparePool() string {
	if m != nil {
		return m.SparePool
	}
	return ""
}

func (m *EnsurePoolHealthyRequest) GetMaxUnhealthyDuts() int32 {
	if m != nil {
		return m.MaxUnhealthyDuts
	}
	return 0
}

func (m *EnsurePoolHealthyRequest) GetOptions() *EnsurePoolHealthyRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

type EnsurePoolHealthyRequest_Options struct {
	// If dryrun is true, no inventory changes are made. Proposed changes are
	// returned.
	Dryrun               bool     `protobuf:"varint,1,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnsurePoolHealthyRequest_Options) Reset()         { *m = EnsurePoolHealthyRequest_Options{} }
func (m *EnsurePoolHealthyRequest_Options) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyRequest_Options) ProtoMessage()    {}
func (*EnsurePoolHealthyRequest_Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{9, 0}
}

func (m *EnsurePoolHealthyRequest_Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyRequest_Options.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyRequest_Options.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyRequest_Options.Merge(m, src)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyRequest_Options.Size(m)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyRequest_Options.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyRequest_Options proto.InternalMessageInfo

func (m *EnsurePoolHealthyRequest_Options) GetDryrun() bool {
	if m != nil {
		return m.Dryrun
	}
	return false
}

type EnsurePoolHealthyResponse struct {
	// Failures encountered during pool balancing.
	//
	// All the remaining fields of the response are still valid in the presence of
	// failures.
	Failures []EnsurePoolHealthyResponse_Failure `protobuf:"varint,1,rep,packed,name=failures,proto3,enum=crosskylabadmin.fleet.EnsurePoolHealthyResponse_Failure" json:"failures,omitempty"`
	// target_pool_status summarizes the target pool after the required
	// inventory changes are executed.
	//
	// Within the pool, only DUTs selected via dut_selector are summarized.
	TargetPoolStatus *PoolStatus `protobuf:"bytes,2,opt,name=target_pool_status,json=targetPoolStatus,proto3" json:"target_pool_status,omitempty"`
	// spare_pool_status summarizes the spare pool after the required
	// inventory changes are executed.
	//
	// Within the pool, only DUTs selected via dut_selector are summarized.
	SparePoolStatus *PoolStatus `protobuf:"bytes,3,opt,name=spare_pool_status,json=sparePoolStatus,proto3" json:"spare_pool_status,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	//
	// url is empty in dryrun mode.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// changes correspond to the proposed or executed pool changes to ensure
	// inventory in response to various API methods calls.
	Changes              []*PoolChange `protobuf:"bytes,5,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EnsurePoolHealthyResponse) Reset()         { *m = EnsurePoolHealthyResponse{} }
func (m *EnsurePoolHealthyResponse) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyResponse) ProtoMessage()    {}
func (*EnsurePoolHealthyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{10}
}

func (m *EnsurePoolHealthyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyResponse.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyResponse.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyResponse.Merge(m, src)
}
func (m *EnsurePoolHealthyResponse) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyResponse.Size(m)
}
func (m *EnsurePoolHealthyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyResponse proto.InternalMessageInfo

func (m *EnsurePoolHealthyResponse) GetFailures() []EnsurePoolHealthyResponse_Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

func (m *EnsurePoolHealthyResponse) GetTargetPoolStatus() *PoolStatus {
	if m != nil {
		return m.TargetPoolStatus
	}
	return nil
}

func (m *EnsurePoolHealthyResponse) GetSparePoolStatus() *PoolStatus {
	if m != nil {
		return m.SparePoolStatus
	}
	return nil
}

func (m *EnsurePoolHealthyResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EnsurePoolHealthyResponse) GetChanges() []*PoolChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type EnsurePoolHealthyForAllModelsRequest struct {
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,1,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// spare_pool is the pool from which healthy DUTs will be swapped into
	// target_pool.
	SparePool string `protobuf:"bytes,2,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
	// the target pool before any action is taken.
	//
	// max_unhealthy_duts is meaningful only when it has a positive value (> 0).
	//
	// If the total number of unhealthy DUTs is above this threshold,
	// EnsurePoolHealthy does not change DUT pools and returns a
	// NOT_ENOUGH_HEALTHY_SPARES failure.
	MaxUnhealthyDuts     int32    `protobuf:"varint,3,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnsurePoolHealthyForAllModelsRequest) Reset()         { *m = EnsurePoolHealthyForAllModelsRequest{} }
func (m *EnsurePoolHealthyForAllModelsRequest) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyForAllModelsRequest) ProtoMessage()    {}
func (*EnsurePoolHealthyForAllModelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{11}
}

func (m *EnsurePoolHealthyForAllModelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyForAllModelsRequest.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyForAllModelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyForAllModelsRequest.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyForAllModelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyForAllModelsRequest.Merge(m, src)
}
func (m *EnsurePoolHealthyForAllModelsRequest) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyForAllModelsRequest.Size(m)
}
func (m *EnsurePoolHealthyForAllModelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyForAllModelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyForAllModelsRequest proto.InternalMessageInfo

func (m *EnsurePoolHealthyForAllModelsRequest) GetTargetPool() string {
	if m != nil {
		return m.TargetPool
	}
	return ""
}

func (m *EnsurePoolHealthyForAllModelsRequest) GetSparePool() string {
	if m != nil {
		return m.SparePool
	}
	return ""
}

func (m *EnsurePoolHealthyForAllModelsRequest) GetMaxUnhealthyDuts() int32 {
	if m != nil {
		return m.MaxUnhealthyDuts
	}
	return 0
}

type EnsurePoolHealthyForAllModelsResponse struct {
	// model_result maps a model to the EnsurePoolHealthyResponse for that model.
	ModelResult          map[string]*EnsurePoolHealthyResponse `protobuf:"bytes,1,rep,name=model_result,json=modelResult,proto3" json:"model_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *EnsurePoolHealthyForAllModelsResponse) Reset()         { *m = EnsurePoolHealthyForAllModelsResponse{} }
func (m *EnsurePoolHealthyForAllModelsResponse) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyForAllModelsResponse) ProtoMessage()    {}
func (*EnsurePoolHealthyForAllModelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{12}
}

func (m *EnsurePoolHealthyForAllModelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyForAllModelsResponse.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyForAllModelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyForAllModelsResponse.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyForAllModelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyForAllModelsResponse.Merge(m, src)
}
func (m *EnsurePoolHealthyForAllModelsResponse) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyForAllModelsResponse.Size(m)
}
func (m *EnsurePoolHealthyForAllModelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyForAllModelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyForAllModelsResponse proto.InternalMessageInfo

func (m *EnsurePoolHealthyForAllModelsResponse) GetModelResult() map[string]*EnsurePoolHealthyResponse {
	if m != nil {
		return m.ModelResult
	}
	return nil
}

type ResizePoolRequest struct {
	// dut_selectors filters the set of DUTs considered by ResizePool.
	//
	// All pool changes occurs within this selected set of DUTs.
	// It is an error to omit dut_selector because that would allow
	// unconstrained DUT reallocation between pools, disregarding all other
	// labels.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// target_pool_size is the requested size for the target_pool.
	TargetPoolSize int32 `protobuf:"varint,3,opt,name=target_pool_size,json=targetPoolSize,proto3" json:"target_pool_size,omitempty"`
	// spare_pool is the pool to borrow needed DUTs from and return extra DUTs to.
	SparePool            string   `protobuf:"bytes,4,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResizePoolRequest) Reset()         { *m = ResizePoolRequest{} }
func (m *ResizePoolRequest) String() string { return proto.CompactTextString(m) }
func (*ResizePoolRequest) ProtoMessage()    {}
func (*ResizePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{13}
}

func (m *ResizePoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResizePoolRequest.Unmarshal(m, b)
}
func (m *ResizePoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResizePoolRequest.Marshal(b, m, deterministic)
}
func (m *ResizePoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizePoolRequest.Merge(m, src)
}
func (m *ResizePoolRequest) XXX_Size() int {
	return xxx_messageInfo_ResizePoolRequest.Size(m)
}
func (m *ResizePoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizePoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResizePoolRequest proto.InternalMessageInfo

func (m *ResizePoolRequest) GetDutSelector() *DutSelector {
	if m != nil {
		return m.DutSelector
	}
	return nil
}

func (m *ResizePoolRequest) GetTargetPool() string {
	if m != nil {
		return m.TargetPool
	}
	return ""
}

func (m *ResizePoolRequest) GetTargetPoolSize() int32 {
	if m != nil {
		return m.TargetPoolSize
	}
	return 0
}

func (m *ResizePoolRequest) GetSparePool() string {
	if m != nil {
		return m.SparePool
	}
	return ""
}

type ResizePoolResponse struct {
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// changes correspond to the proposed or executed pool changes to inventory in
	// response to the ResizePool RPC.
	Changes              []*PoolChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResizePoolResponse) Reset()         { *m = ResizePoolResponse{} }
func (m *ResizePoolResponse) String() string { return proto.CompactTextString(m) }
func (*ResizePoolResponse) ProtoMessage()    {}
func (*ResizePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{14}
}

func (m *ResizePoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResizePoolResponse.Unmarshal(m, b)
}
func (m *ResizePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResizePoolResponse.Marshal(b, m, deterministic)
}
func (m *ResizePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizePoolResponse.Merge(m, src)
}
func (m *ResizePoolResponse) XXX_Size() int {
	return xxx_messageInfo_ResizePoolResponse.Size(m)
}
func (m *ResizePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResizePoolResponse proto.InternalMessageInfo

func (m *ResizePoolResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ResizePoolResponse) GetChanges() []*PoolChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type DutSelector struct {
	Model                string   `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DutSelector) Reset()         { *m = DutSelector{} }
func (m *DutSelector) String() string { return proto.CompactTextString(m) }
func (*DutSelector) ProtoMessage()    {}
func (*DutSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{15}
}

func (m *DutSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DutSelector.Unmarshal(m, b)
}
func (m *DutSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DutSelector.Marshal(b, m, deterministic)
}
func (m *DutSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutSelector.Merge(m, src)
}
func (m *DutSelector) XXX_Size() int {
	return xxx_messageInfo_DutSelector.Size(m)
}
func (m *DutSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_DutSelector.DiscardUnknown(m)
}

var xxx_messageInfo_DutSelector proto.InternalMessageInfo

func (m *DutSelector) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type PoolStatus struct {
	// size is the number of DUTs in this pool.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// healthy_count is the number of healthy DUTs in this pool.
	HealthyCount         int32    `protobuf:"varint,2,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolStatus) Reset()         { *m = PoolStatus{} }
func (m *PoolStatus) String() string { return proto.CompactTextString(m) }
func (*PoolStatus) ProtoMessage()    {}
func (*PoolStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{16}
}

func (m *PoolStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PoolStatus.Unmarshal(m, b)
}
func (m *PoolStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PoolStatus.Marshal(b, m, deterministic)
}
func (m *PoolStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolStatus.Merge(m, src)
}
func (m *PoolStatus) XXX_Size() int {
	return xxx_messageInfo_PoolStatus.Size(m)
}
func (m *PoolStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PoolStatus proto.InternalMessageInfo

func (m *PoolStatus) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *PoolStatus) GetHealthyCount() int32 {
	if m != nil {
		return m.HealthyCount
	}
	return 0
}

// PoolChange is a single change of DUT pools in the inventory.
type PoolChange struct {
	// dut_id is the inventory ID of the DUT whose pool was modified.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// old_pool is the pool the DUT was removed from.
	OldPool string `protobuf:"bytes,2,opt,name=old_pool,json=oldPool,proto3" json:"old_pool,omitempty"`
	// new_pool is the pool the DUT was moved to.
	NewPool              string   `protobuf:"bytes,3,opt,name=new_pool,json=newPool,proto3" json:"new_pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolChange) Reset()         { *m = PoolChange{} }
func (m *PoolChange) String() string { return proto.CompactTextString(m) }
func (*PoolChange) ProtoMessage()    {}
func (*PoolChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{17}
}

func (m *PoolChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PoolChange.Unmarshal(m, b)
}
func (m *PoolChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PoolChange.Marshal(b, m, deterministic)
}
func (m *PoolChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolChange.Merge(m, src)
}
func (m *PoolChange) XXX_Size() int {
	return xxx_messageInfo_PoolChange.Size(m)
}
func (m *PoolChange) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolChange.DiscardUnknown(m)
}

var xxx_messageInfo_PoolChange proto.InternalMessageInfo

func (m *PoolChange) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *PoolChange) GetOldPool() string {
	if m != nil {
		return m.OldPool
	}
	return ""
}

func (m *PoolChange) GetNewPool() string {
	if m != nil {
		return m.NewPool
	}
	return ""
}

type RemoveDutsFromDronesRequest struct {
	// removals is the set of Duts to remove.
	Removals             []*RemoveDutsFromDronesRequest_Item `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *RemoveDutsFromDronesRequest) Reset()         { *m = RemoveDutsFromDronesRequest{} }
func (m *RemoveDutsFromDronesRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveDutsFromDronesRequest) ProtoMessage()    {}
func (*RemoveDutsFromDronesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{18}
}

func (m *RemoveDutsFromDronesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveDutsFromDronesRequest.Unmarshal(m, b)
}
func (m *RemoveDutsFromDronesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveDutsFromDronesRequest.Marshal(b, m, deterministic)
}
func (m *RemoveDutsFromDronesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDutsFromDronesRequest.Merge(m, src)
}
func (m *RemoveDutsFromDronesRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveDutsFromDronesRequest.Size(m)
}
func (m *RemoveDutsFromDronesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDutsFromDronesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDutsFromDronesRequest proto.InternalMessageInfo

func (m *RemoveDutsFromDronesRequest) GetRemovals() []*RemoveDutsFromDronesRequest_Item {
	if m != nil {
		return m.Removals
	}
	return nil
}

// NEXT TAG: 4
type RemoveDutsFromDronesRequest_Item struct {
	// dut_id is the id of a DUT to be removed.
	//
	// Exactly one of dut_id or hostname must be provided.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// dut_hostname is the id of a DUT to be removed.
	//
	// Exactly one of dut_id or dut_hostname must be provided.
	DutHostname string `protobuf:"bytes,3,opt,name=dut_hostname,json=dutHostname,proto3" json:"dut_hostname,omitempty"`
	// drone_hostname is the drone to remove the dut from.
	//
	// If unspecified dut will be removed regardless of current drone.
	DroneHostname        string   `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveDutsFromDronesRequest_Item) Reset()         { *m = RemoveDutsFromDronesRequest_Item{} }
func (m *RemoveDutsFromDronesRequest_Item) String() string { return proto.CompactTextString(m) }
func (*RemoveDutsFromDronesRequest_Item) ProtoMessage()    {}
func (*RemoveDutsFromDronesRequest_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{18, 0}
}

func (m *RemoveDutsFromDronesRequest_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveDutsFromDronesRequest_Item.Unmarshal(m, b)
}
func (m *RemoveDutsFromDronesRequest_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveDutsFromDronesRequest_Item.Marshal(b, m, deterministic)
}
func (m *RemoveDutsFromDronesRequest_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDutsFromDronesRequest_Item.Merge(m, src)
}
func (m *RemoveDutsFromDronesRequest_Item) XXX_Size() int {
	return xxx_messageInfo_RemoveDutsFromDronesRequest_Item.Size(m)
}
func (m *RemoveDutsFromDronesRequest_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDutsFromDronesRequest_Item.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDutsFromDronesRequest_Item proto.InternalMessageInfo

func (m *RemoveDutsFromDronesRequest_Item) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *RemoveDutsFromDronesRequest_Item) GetDutHostname() string {
	if m != nil {
		return m.DutHostname
	}
	return ""
}

func (m *RemoveDutsFromDronesRequest_Item) GetDroneHostname() string {
	if m != nil {
		return m.DroneHostname
	}
	return ""
}

type RemoveDutsFromDronesResponse struct {
	// removed is the set of Duts that were removed.
	Removed []*RemoveDutsFromDronesResponse_Item `protobuf:"bytes,1,rep,name=removed,proto3" json:"removed,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveDutsFromDronesResponse) Reset()         { *m = RemoveDutsFromDronesResponse{} }
func (m *RemoveDutsFromDronesResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveDutsFromDronesResponse) ProtoMessage()    {}
func (*RemoveDutsFromDronesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{19}
}

func (m *RemoveDutsFromDronesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveDutsFromDronesResponse.Unmarshal(m, b)
}
func (m *RemoveDutsFromDronesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveDutsFromDronesResponse.Marshal(b, m, deterministic)
}
func (m *RemoveDutsFromDronesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDutsFromDronesResponse.Merge(m, src)
}
func (m *RemoveDutsFromDronesResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveDutsFromDronesResponse.Size(m)
}
func (m *RemoveDutsFromDronesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDutsFromDronesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDutsFromDronesResponse proto.InternalMessageInfo

func (m *RemoveDutsFromDronesResponse) GetRemoved() []*RemoveDutsFromDronesResponse_Item {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *RemoveDutsFromDronesResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type RemoveDutsFromDronesResponse_Item struct {
	// dut_id is the id of a dut that was removed.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// drone_hostname is the hostname of the drone that it the Dut was removed
	// from.
	DroneHostname        string   `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveDutsFromDronesResponse_Item) Reset()         { *m = RemoveDutsFromDronesResponse_Item{} }
func (m *RemoveDutsFromDronesResponse_Item) String() string { return proto.CompactTextString(m) }
func (*RemoveDutsFromDronesResponse_Item) ProtoMessage()    {}
func (*RemoveDutsFromDronesResponse_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{19, 0}
}

func (m *RemoveDutsFromDronesResponse_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveDutsFromDronesResponse_Item.Unmarshal(m, b)
}
func (m *RemoveDutsFromDronesResponse_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveDutsFromDronesResponse_Item.Marshal(b, m, deterministic)
}
func (m *RemoveDutsFromDronesResponse_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDutsFromDronesResponse_Item.Merge(m, src)
}
func (m *RemoveDutsFromDronesResponse_Item) XXX_Size() int {
	return xxx_messageInfo_RemoveDutsFromDronesResponse_Item.Size(m)
}
func (m *RemoveDutsFromDronesResponse_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDutsFromDronesResponse_Item.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDutsFromDronesResponse_Item proto.InternalMessageInfo

func (m *RemoveDutsFromDronesResponse_Item) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *RemoveDutsFromDronesResponse_Item) GetDroneHostname() string {
	if m != nil {
		return m.DroneHostname
	}
	return ""
}

type AssignDutsToDronesRequest struct {
	// assignments is the set of Duts to assign.
	Assignments          []*AssignDutsToDronesRequest_Item `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *AssignDutsToDronesRequest) Reset()         { *m = AssignDutsToDronesRequest{} }
func (m *AssignDutsToDronesRequest) String() string { return proto.CompactTextString(m) }
func (*AssignDutsToDronesRequest) ProtoMessage()    {}
func (*AssignDutsToDronesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{20}
}

func (m *AssignDutsToDronesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignDutsToDronesRequest.Unmarshal(m, b)
}
func (m *AssignDutsToDronesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignDutsToDronesRequest.Marshal(b, m, deterministic)
}
func (m *AssignDutsToDronesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignDutsToDronesRequest.Merge(m, src)
}
func (m *AssignDutsToDronesRequest) XXX_Size() int {
	return xxx_messageInfo_AssignDutsToDronesRequest.Size(m)
}
func (m *AssignDutsToDronesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignDutsToDronesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignDutsToDronesRequest proto.InternalMessageInfo

func (m *AssignDutsToDronesRequest) GetAssignments() []*AssignDutsToDronesRequest_Item {
	if m != nil {
		return m.Assignments
	}
	return nil
}

// NEXT TAG: 4
type AssignDutsToDronesRequest_Item struct {
	// dut_id is the id of a DUT to assign to a drone.
	//
	// Exactly one of dut_id or hostname must be provided.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// dut_hostname is the hostname of the DUT to assign to the drone.
	//
	// Exactly one of dut_id or hostname must be provided.
	DutHostname string `protobuf:"bytes,3,opt,name=dut_hostname,json=dutHostname,proto3" json:"dut_hostname,omitempty"`
	// drone_hostname is the drone to assign the dut to.
	//
	// if absent, inventory service will use a heuristic to select a drone.
	DroneHostname        string   `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignDutsToDronesRequest_Item) Reset()         { *m = AssignDutsToDronesRequest_Item{} }
func (m *AssignDutsToDronesRequest_Item) String() string { return proto.CompactTextString(m) }
func (*AssignDutsToDronesRequest_Item) ProtoMessage()    {}
func (*AssignDutsToDronesRequest_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{20, 0}
}

func (m *AssignDutsToDronesRequest_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignDutsToDronesRequest_Item.Unmarshal(m, b)
}
func (m *AssignDutsToDronesRequest_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignDutsToDronesRequest_Item.Marshal(b, m, deterministic)
}
func (m *AssignDutsToDronesRequest_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignDutsToDronesRequest_Item.Merge(m, src)
}
func (m *AssignDutsToDronesRequest_Item) XXX_Size() int {
	return xxx_messageInfo_AssignDutsToDronesRequest_Item.Size(m)
}
func (m *AssignDutsToDronesRequest_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignDutsToDronesRequest_Item.DiscardUnknown(m)
}

var xxx_messageInfo_AssignDutsToDronesRequest_Item proto.InternalMessageInfo

func (m *AssignDutsToDronesRequest_Item) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *AssignDutsToDronesRequest_Item) GetDutHostname() string {
	if m != nil {
		return m.DutHostname
	}
	return ""
}

func (m *AssignDutsToDronesRequest_Item) GetDroneHostname() string {
	if m != nil {
		return m.DroneHostname
	}
	return ""
}

type AssignDutsToDronesResponse struct {
	// assigned is the set of Duts that were removed.
	Assigned []*AssignDutsToDronesResponse_Item `protobuf:"bytes,1,rep,name=assigned,proto3" json:"assigned,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignDutsToDronesResponse) Reset()         { *m = AssignDutsToDronesResponse{} }
func (m *AssignDutsToDronesResponse) String() string { return proto.CompactTextString(m) }
func (*AssignDutsToDronesResponse) ProtoMessage()    {}
func (*AssignDutsToDronesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{21}
}

func (m *AssignDutsToDronesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignDutsToDronesResponse.Unmarshal(m, b)
}
func (m *AssignDutsToDronesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignDutsToDronesResponse.Marshal(b, m, deterministic)
}
func (m *AssignDutsToDronesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignDutsToDronesResponse.Merge(m, src)
}
func (m *AssignDutsToDronesResponse) XXX_Size() int {
	return xxx_messageInfo_AssignDutsToDronesResponse.Size(m)
}
func (m *AssignDutsToDronesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignDutsToDronesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignDutsToDronesResponse proto.InternalMessageInfo

func (m *AssignDutsToDronesResponse) GetAssigned() []*AssignDutsToDronesResponse_Item {
	if m != nil {
		return m.Assigned
	}
	return nil
}

func (m *AssignDutsToDronesResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type AssignDutsToDronesResponse_Item struct {
	// dut_id is the id of a dut that was assigned to a drone.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// drone_hostname is the drone the dut was assigned to.
	DroneHostname        string   `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignDutsToDronesResponse_Item) Reset()         { *m = AssignDutsToDronesResponse_Item{} }
func (m *AssignDutsToDronesResponse_Item) String() string { return proto.CompactTextString(m) }
func (*AssignDutsToDronesResponse_Item) ProtoMessage()    {}
func (*AssignDutsToDronesResponse_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{21, 0}
}

func (m *AssignDutsToDronesResponse_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignDutsToDronesResponse_Item.Unmarshal(m, b)
}
func (m *AssignDutsToDronesResponse_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignDutsToDronesResponse_Item.Marshal(b, m, deterministic)
}
func (m *AssignDutsToDronesResponse_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignDutsToDronesResponse_Item.Merge(m, src)
}
func (m *AssignDutsToDronesResponse_Item) XXX_Size() int {
	return xxx_messageInfo_AssignDutsToDronesResponse_Item.Size(m)
}
func (m *AssignDutsToDronesResponse_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignDutsToDronesResponse_Item.DiscardUnknown(m)
}

var xxx_messageInfo_AssignDutsToDronesResponse_Item proto.InternalMessageInfo

func (m *AssignDutsToDronesResponse_Item) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *AssignDutsToDronesResponse_Item) GetDroneHostname() string {
	if m != nil {
		return m.DroneHostname
	}
	return ""
}

type ListServersRequest struct {
	Filter               *ListServersRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ListServersRequest) Reset()         { *m = ListServersRequest{} }
func (m *ListServersRequest) String() string { return proto.CompactTextString(m) }
func (*ListServersRequest) ProtoMessage()    {}
func (*ListServersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{22}
}

func (m *ListServersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServersRequest.Unmarshal(m, b)
}
func (m *ListServersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServersRequest.Marshal(b, m, deterministic)
}
func (m *ListServersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServersRequest.Merge(m, src)
}
func (m *ListServersRequest) XXX_Size() int {
	return xxx_messageInfo_ListServersRequest.Size(m)
}
func (m *ListServersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServersRequest proto.InternalMessageInfo

func (m *ListServersRequest) GetFilter() *ListServersRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ListServersRequest_Filter struct {
	// Role of servers to list; if absent, list servers of all roles.
	Role                 ServerRole `protobuf:"varint,1,opt,name=role,proto3,enum=crosskylabadmin.fleet.ServerRole" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListServersRequest_Filter) Reset()         { *m = ListServersRequest_Filter{} }
func (m *ListServersRequest_Filter) String() string { return proto.CompactTextString(m) }
func (*ListServersRequest_Filter) ProtoMessage()    {}
func (*ListServersRequest_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{22, 0}
}

func (m *ListServersRequest_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServersRequest_Filter.Unmarshal(m, b)
}
func (m *ListServersRequest_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServersRequest_Filter.Marshal(b, m, deterministic)
}
func (m *ListServersRequest_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServersRequest_Filter.Merge(m, src)
}
func (m *ListServersRequest_Filter) XXX_Size() int {
	return xxx_messageInfo_ListServersRequest_Filter.Size(m)
}
func (m *ListServersRequest_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServersRequest_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_ListServersRequest_Filter proto.InternalMessageInfo

func (m *ListServersRequest_Filter) GetRole() ServerRole {
	if m != nil {
		return m.Role
	}
	return ServerRole_ROLE_INVALID
}

type ListServersResponse struct {
	Servers              []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListServersResponse) Reset()         { *m = ListServersResponse{} }
func (m *ListServersResponse) String() string { return proto.CompactTextString(m) }
func (*ListServersResponse) ProtoMessage()    {}
func (*ListServersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{23}
}

func (m *ListServersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServersResponse.Unmarshal(m, b)
}
func (m *ListServersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServersResponse.Marshal(b, m, deterministic)
}
func (m *ListServersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServersResponse.Merge(m, src)
}
func (m *ListServersResponse) XXX_Size() int {
	return xxx_messageInfo_ListServersResponse.Size(m)
}
func (m *ListServersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServersResponse proto.InternalMessageInfo

func (m *ListServersResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type UpdateDutLabelsRequest struct {
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// labels are the labels for the DUT that the client changed.  This
	// should be a serialized protobuf of inventory.SchedulableLabels.
	// Any labels that shouldn't be updated are ignored.
	Labels []byte `protobuf:"bytes,2,opt,name=labels,proto3" json:"labels,omitempty"`
	// reason is some string to provide context for the update.  This
	// should contain a URL to the task that triggered the change.  This
	// should not be capitalized since it will get formatted with other
	// information.
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDutLabelsRequest) Reset()         { *m = UpdateDutLabelsRequest{} }
func (m *UpdateDutLabelsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDutLabelsRequest) ProtoMessage()    {}
func (*UpdateDutLabelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{24}
}

func (m *UpdateDutLabelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDutLabelsRequest.Unmarshal(m, b)
}
func (m *UpdateDutLabelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDutLabelsRequest.Marshal(b, m, deterministic)
}
func (m *UpdateDutLabelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDutLabelsRequest.Merge(m, src)
}
func (m *UpdateDutLabelsRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDutLabelsRequest.Size(m)
}
func (m *UpdateDutLabelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDutLabelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDutLabelsRequest proto.InternalMessageInfo

func (m *UpdateDutLabelsRequest) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *UpdateDutLabelsRequest) GetLabels() []byte {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateDutLabelsRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateDutLabelsResponse struct {
	// url is a URL associated with the label update.
	//
	// It is usually a Gerrit or Gitiles URL.
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDutLabelsResponse) Reset()         { *m = UpdateDutLabelsResponse{} }
func (m *UpdateDutLabelsResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDutLabelsResponse) ProtoMessage()    {}
func (*UpdateDutLabelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{25}
}

func (m *UpdateDutLabelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDutLabelsResponse.Unmarshal(m, b)
}
func (m *UpdateDutLabelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDutLabelsResponse.Marshal(b, m, deterministic)
}
func (m *UpdateDutLabelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDutLabelsResponse.Merge(m, src)
}
func (m *UpdateDutLabelsResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateDutLabelsResponse.Size(m)
}
func (m *UpdateDutLabelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDutLabelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDutLabelsResponse proto.InternalMessageInfo

func (m *UpdateDutLabelsResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("crosskylabadmin.fleet.GetDeploymentStatusResponse_Status", GetDeploymentStatusResponse_Status_name, GetDeploymentStatusResponse_Status_value)
	proto.RegisterEnum("crosskylabadmin.fleet.EnsurePoolHealthyResponse_Failure", EnsurePoolHealthyResponse_Failure_name, EnsurePoolHealthyResponse_Failure_value)
	proto.RegisterType((*DeployDutRequest)(nil), "crosskylabadmin.fleet.DeployDutRequest")
	proto.RegisterType((*DeployDutResponse)(nil), "crosskylabadmin.fleet.DeployDutResponse")
	proto.RegisterType((*RedeployDutRequest)(nil), "crosskylabadmin.fleet.RedeployDutRequest")
	proto.RegisterType((*RedeployDutResponse)(nil), "crosskylabadmin.fleet.RedeployDutResponse")
	proto.RegisterType((*GetDeploymentStatusRequest)(nil), "crosskylabadmin.fleet.GetDeploymentStatusRequest")
	proto.RegisterType((*GetDeploymentStatusResponse)(nil), "crosskylabadmin.fleet.GetDeploymentStatusResponse")
	proto.RegisterType((*DeleteDutRequest)(nil), "crosskylabadmin.fleet.DeleteDutRequest")
	proto.RegisterType((*DeleteDutResponse)(nil), "crosskylabadmin.fleet.DeleteDutResponse")
	proto.RegisterType((*DutDeploymentActions)(nil), "crosskylabadmin.fleet.DutDeploymentActions")
	proto.RegisterType((*EnsurePoolHealthyRequest)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyRequest")
	proto.RegisterType((*EnsurePoolHealthyRequest_Options)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyRequest.Options")
	proto.RegisterType((*EnsurePoolHealthyResponse)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyResponse")
	proto.RegisterType((*EnsurePoolHealthyForAllModelsRequest)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsRequest")
	proto.RegisterType((*EnsurePoolHealthyForAllModelsResponse)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse")
	proto.RegisterMapType((map[string]*EnsurePoolHealthyResponse)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse.ModelResultEntry")
	proto.RegisterType((*ResizePoolRequest)(nil), "crosskylabadmin.fleet.ResizePoolRequest")
	proto.RegisterType((*ResizePoolResponse)(nil), "crosskylabadmin.fleet.ResizePoolResponse")
	proto.RegisterType((*DutSelector)(nil), "crosskylabadmin.fleet.DutSelector")
	proto.RegisterType((*PoolStatus)(nil), "crosskylabadmin.fleet.PoolStatus")
	proto.RegisterType((*PoolChange)(nil), "crosskylabadmin.fleet.PoolChange")
	proto.RegisterType((*RemoveDutsFromDronesRequest)(nil), "crosskylabadmin.fleet.RemoveDutsFromDronesRequest")
	proto.RegisterType((*RemoveDutsFromDronesRequest_Item)(nil), "crosskylabadmin.fleet.RemoveDutsFromDronesRequest.Item")
	proto.RegisterType((*RemoveDutsFromDronesResponse)(nil), "crosskylabadmin.fleet.RemoveDutsFromDronesResponse")
	proto.RegisterType((*RemoveDutsFromDronesResponse_Item)(nil), "crosskylabadmin.fleet.RemoveDutsFromDronesResponse.Item")
	proto.RegisterType((*AssignDutsToDronesRequest)(nil), "crosskylabadmin.fleet.AssignDutsToDronesRequest")
	proto.RegisterType((*AssignDutsToDronesRequest_Item)(nil), "crosskylabadmin.fleet.AssignDutsToDronesRequest.Item")
	proto.RegisterType((*AssignDutsToDronesResponse)(nil), "crosskylabadmin.fleet.AssignDutsToDronesResponse")
	proto.RegisterType((*AssignDutsToDronesResponse_Item)(nil), "crosskylabadmin.fleet.AssignDutsToDronesResponse.Item")
	proto.RegisterType((*ListServersRequest)(nil), "crosskylabadmin.fleet.ListServersRequest")
	proto.RegisterType((*ListServersRequest_Filter)(nil), "crosskylabadmin.fleet.ListServersRequest.Filter")
	proto.RegisterType((*ListServersResponse)(nil), "crosskylabadmin.fleet.ListServersResponse")
	proto.RegisterType((*UpdateDutLabelsRequest)(nil), "crosskylabadmin.fleet.UpdateDutLabelsRequest")
	proto.RegisterType((*UpdateDutLabelsResponse)(nil), "crosskylabadmin.fleet.UpdateDutLabelsResponse")
}

func init() {
	proto.RegisterFile("infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto", fileDescriptor_6ebb6f101f23e24c)
}

var fileDescriptor_6ebb6f101f23e24c = []byte{
	// 1595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0x2e, 0x25, 0x5b, 0x3f, 0x47, 0x8e, 0x2d, 0x8f, 0xf3, 0x67, 0x39, 0x46, 0x62, 0xa6, 0x41,
	0xed, 0x26, 0x95, 0x13, 0x05, 0x69, 0x9c, 0x1f, 0xa0, 0x50, 0x2d, 0x3a, 0x36, 0x60, 0x5b, 0x0e,
	0x25, 0xb5, 0x70, 0x2e, 0x4a, 0xd0, 0xe2, 0xd8, 0x26, 0x42, 0x71, 0x54, 0xce, 0xd0, 0x8e, 0x82,
	0x02, 0x7d, 0x80, 0xde, 0xb6, 0x17, 0x2d, 0x0a, 0xec, 0x8b, 0xec, 0xe5, 0xee, 0x62, 0xb1, 0xaf,
	0xb0, 0xd8, 0x27, 0xd9, 0x9b, 0xc5, 0x0c, 0x87, 0x12, 0x25, 0x93, 0xb6, 0x94, 0x60, 0x73, 0x23,
	0x70, 0xce, 0x9c, 0xf9, 0xe6, 0xfc, 0xcf, 0x39, 0x82, 0xd7, 0xb6, 0x7b, 0xec, 0x99, 0xeb, 0x66,
	0xb7, 0x8b, 0xdd, 0x13, 0xdb, 0xc5, 0xeb, 0x6d, 0x8f, 0x50, 0xfa, 0xbe, 0xe7, 0x98, 0x47, 0xa6,
	0xd5, 0xb1, 0xdd, 0x75, 0xb3, 0x6b, 0xaf, 0x1f, 0x3b, 0x18, 0xb3, 0xf5, 0xb3, 0x27, 0xeb, 0xb6,
	0x7b, 0x86, 0x5d, 0x46, 0xbc, 0x5e, 0xb9, 0xeb, 0x11, 0x46, 0xd0, 0x8d, 0x11, 0xee, 0xb2, 0xe0,
	0x2c, 0xbd, 0x98, 0x08, 0xb4, 0x4d, 0x3a, 0x1d, 0xe2, 0x06, 0x88, 0xea, 0x19, 0x14, 0x6b, 0xb8,
	0xeb, 0x90, 0x5e, 0xcd, 0x67, 0x3a, 0xfe, 0xbb, 0x8f, 0x29, 0x43, 0x4b, 0x90, 0x77, 0xf1, 0xb9,
	0x41, 0xbb, 0xb8, 0x4d, 0x6f, 0x2b, 0xf7, 0x94, 0xd5, 0x19, 0x3d, 0xe7, 0xe2, 0xf3, 0x06, 0x5f,
	0x23, 0x0d, 0xb2, 0x66, 0x9b, 0xd9, 0xc4, 0xa5, 0xb7, 0x53, 0xf7, 0x94, 0xd5, 0x42, 0xe5, 0x61,
	0x39, 0x56, 0xa8, 0x72, 0xcd, 0x67, 0x01, 0x72, 0x07, 0xbb, 0xac, 0x1a, 0x1c, 0xd1, 0xc3, 0xb3,
	0xea, 0x06, 0xcc, 0x47, 0xee, 0xa5, 0x5d, 0xe2, 0x52, 0x8c, 0xee, 0xc3, 0x35, 0xab, 0x7f, 0xc4,
	0xb0, 0x2d, 0x71, 0x79, 0x5e, 0x9f, 0x19, 0x10, 0x77, 0x2c, 0xf5, 0x3f, 0x0a, 0x20, 0x1d, 0x5b,
	0x31, 0x42, 0x13, 0xc7, 0x1a, 0x16, 0x9a, 0x38, 0x56, 0x20, 0xf4, 0x90, 0x46, 0xa9, 0x64, 0x8d,
	0xd2, 0x9f, 0xa1, 0xd1, 0x4b, 0x58, 0x18, 0x12, 0x6b, 0x12, 0x9d, 0xaa, 0x50, 0x7a, 0x83, 0x23,
	0xe0, 0x0d, 0x66, 0x32, 0x9f, 0x86, 0xaa, 0x8d, 0x05, 0xf1, 0x5d, 0x0a, 0x96, 0x62, 0x31, 0xa4,
	0x1c, 0x6f, 0x21, 0x43, 0x05, 0x45, 0xe8, 0x3f, 0x5b, 0x79, 0x91, 0xa0, 0xe4, 0x25, 0x18, 0x65,
	0xb9, 0x94, 0x40, 0x68, 0x19, 0xa0, 0x7d, 0x6a, 0xba, 0x27, 0xd8, 0xf0, 0x3d, 0x47, 0xd8, 0x2e,
	0xaf, 0xe7, 0x03, 0x4a, 0xcb, 0x73, 0xd0, 0x22, 0xe4, 0x98, 0x49, 0xdf, 0x8b, 0xcd, 0x29, 0xb1,
	0x99, 0xe5, 0xeb, 0x96, 0xe7, 0xa8, 0xff, 0x55, 0x20, 0x13, 0x80, 0xa1, 0x15, 0x58, 0xae, 0xb5,
	0x9a, 0x46, 0x4d, 0x3b, 0xd8, 0xad, 0x1f, 0xee, 0x69, 0xfb, 0x4d, 0xa3, 0xd1, 0xac, 0x36, 0x5b,
	0x0d, 0x63, 0x67, 0xff, 0x2f, 0xd5, 0xdd, 0x9d, 0x5a, 0xf1, 0x37, 0xe8, 0x01, 0xac, 0x24, 0xb1,
	0x18, 0x07, 0x7a, 0xfd, 0x8d, 0xae, 0x35, 0x1a, 0x45, 0x05, 0xdd, 0x87, 0xbb, 0xf1, 0x6c, 0x8d,
	0xd6, 0xe6, 0xa6, 0xa6, 0xd5, 0xb4, 0x5a, 0x31, 0x85, 0xee, 0xc1, 0x9d, 0x78, 0xa6, 0xad, 0xea,
	0xce, 0xae, 0x56, 0x2b, 0xa6, 0xd5, 0x35, 0x9e, 0x11, 0x0e, 0x66, 0x38, 0x12, 0x5c, 0x37, 0x20,
	0x63, 0xf9, 0x11, 0xd3, 0x4f, 0x5b, 0x3e, 0xb7, 0x79, 0x85, 0x07, 0x71, 0x9f, 0x55, 0x1a, 0x7a,
	0xd8, 0x2a, 0xca, 0x88, 0x55, 0xd4, 0xff, 0x2b, 0x70, 0x3d, 0x2e, 0x90, 0xd0, 0x43, 0x40, 0x94,
	0x99, 0x27, 0xd8, 0xb0, 0x3b, 0xfc, 0x97, 0x11, 0xc3, 0xa7, 0x47, 0xe2, 0x7c, 0x4e, 0x9f, 0x13,
	0x3b, 0x3b, 0x7c, 0xa3, 0x49, 0x5a, 0xf4, 0x08, 0xad, 0x41, 0xd1, 0x76, 0x29, 0x33, 0x1d, 0xc7,
	0x38, 0xb6, 0xbd, 0xce, 0xb9, 0xe9, 0x61, 0xe1, 0xd7, 0x9c, 0x3e, 0x27, 0xe9, 0x5b, 0x92, 0x8c,
	0x1e, 0x01, 0x0a, 0x59, 0x19, 0xa6, 0x2c, 0x80, 0x17, 0xde, 0xca, 0xe9, 0x21, 0x48, 0x13, 0x53,
	0x26, 0xd0, 0xd5, 0x6f, 0x53, 0x70, 0x5b, 0x73, 0xa9, 0xef, 0xe1, 0x03, 0x42, 0x9c, 0x6d, 0x6c,
	0x3a, 0xec, 0xb4, 0x17, 0x9a, 0x41, 0x83, 0x19, 0x6e, 0x06, 0x8a, 0x1d, 0xdc, 0x66, 0xc4, 0x13,
	0xc2, 0x15, 0x2a, 0x6a, 0x72, 0xba, 0x34, 0x24, 0xa7, 0x5e, 0xb0, 0x06, 0x0b, 0x74, 0x17, 0x0a,
	0xcc, 0xf4, 0x4e, 0x30, 0x33, 0xba, 0x84, 0x38, 0x42, 0xee, 0xbc, 0x0e, 0x01, 0x89, 0xdf, 0xca,
	0x4d, 0x48, 0xbb, 0xa6, 0x87, 0x83, 0x7d, 0x19, 0x58, 0x82, 0x22, 0xb6, 0x1f, 0x01, 0xea, 0x98,
	0x1f, 0x0c, 0xdf, 0x3d, 0x0d, 0xc4, 0x33, 0x2c, 0x9f, 0x51, 0x11, 0x62, 0xd3, 0x7a, 0xb1, 0x63,
	0x7e, 0x68, 0x85, 0x1b, 0x35, 0x9f, 0x51, 0xf4, 0x16, 0xb2, 0xa4, 0x1b, 0xa4, 0xf7, 0xb4, 0x90,
	0xf7, 0x79, 0x82, 0xbc, 0x49, 0x6a, 0x97, 0xeb, 0x5d, 0x99, 0xea, 0x12, 0xa7, 0xb4, 0x02, 0x59,
	0x49, 0x43, 0x37, 0x21, 0x63, 0x79, 0x3d, 0xcf, 0x77, 0xa5, 0xa7, 0xe4, 0x4a, 0xfd, 0x3a, 0x0d,
	0x8b, 0x31, 0x80, 0x32, 0x46, 0x9a, 0x90, 0x3b, 0x36, 0x6d, 0xc7, 0xf7, 0x30, 0xaf, 0x55, 0xe9,
	0xd5, 0xd9, 0xca, 0xc6, 0xf8, 0x42, 0xc9, 0x64, 0xdc, 0x0a, 0x00, 0xf4, 0x3e, 0x12, 0xaa, 0x03,
	0x8a, 0xd8, 0xd5, 0x88, 0xa4, 0x7b, 0xa1, 0xb2, 0x92, 0x80, 0xcf, 0x91, 0x65, 0x5a, 0x17, 0x07,
	0x1e, 0x90, 0xb9, 0xb9, 0x07, 0xf3, 0x03, 0x3f, 0x84, 0x78, 0xe9, 0x71, 0xf1, 0xe6, 0xfa, 0x1e,
	0x93, 0x70, 0x45, 0x48, 0x0f, 0x6a, 0x01, 0xff, 0x44, 0xaf, 0x20, 0x1b, 0x64, 0x06, 0xf7, 0x4d,
	0xfa, 0x0a, 0xd8, 0x4d, 0xc1, 0xa9, 0x87, 0x27, 0xd4, 0x77, 0x90, 0x95, 0x36, 0x40, 0x0b, 0x30,
	0xc7, 0xf3, 0xb7, 0xa5, 0x6b, 0x91, 0xb2, 0xb1, 0x04, 0xb7, 0x9a, 0xf5, 0xba, 0xb1, 0x57, 0xdd,
	0x3f, 0x34, 0x5a, 0xfb, 0xdb, 0x5a, 0x75, 0xb7, 0xb9, 0x7d, 0x68, 0xd4, 0x5a, 0x4d, 0x5e, 0x2c,
	0x96, 0x61, 0x71, 0xbf, 0xde, 0x34, 0xb4, 0xfd, 0x7a, 0xeb, 0xcd, 0xb6, 0x11, 0x6e, 0x36, 0x0e,
	0xaa, 0xba, 0xd6, 0x28, 0xa6, 0xd4, 0x7f, 0x2b, 0xf0, 0xdb, 0x0b, 0xa6, 0xdf, 0x22, 0x5e, 0xd5,
	0x71, 0xf6, 0x88, 0x85, 0x9d, 0x7e, 0x6d, 0x1e, 0x89, 0x65, 0xe5, 0x8a, 0x58, 0x4e, 0x8d, 0x17,
	0xcb, 0xe9, 0xf8, 0x58, 0x56, 0xff, 0x95, 0x82, 0x07, 0x57, 0x88, 0x25, 0x23, 0xac, 0x0b, 0x33,
	0x1d, 0x4e, 0x31, 0x3c, 0x4c, 0x7d, 0x87, 0x89, 0x28, 0x2b, 0x54, 0xf6, 0xc6, 0x8d, 0xb2, 0x38,
	0xcc, 0xb2, 0x58, 0xea, 0x02, 0x4f, 0x73, 0x99, 0xd7, 0xd3, 0x0b, 0x9d, 0x01, 0xa5, 0xd4, 0x85,
	0xe2, 0x28, 0x03, 0xf7, 0xf8, 0x7b, 0xdc, 0x93, 0x56, 0xe1, 0x9f, 0x68, 0x0b, 0xa6, 0xcf, 0x4c,
	0xc7, 0xc7, 0x32, 0x2c, 0x1f, 0x4f, 0x1a, 0xf6, 0x7a, 0x70, 0xfc, 0x65, 0x6a, 0x43, 0x51, 0xbf,
	0x51, 0x60, 0x5e, 0xc7, 0xd4, 0xfe, 0x28, 0x18, 0xbf, 0x74, 0x91, 0x5a, 0x85, 0xe2, 0x50, 0xb6,
	0xd9, 0x1f, 0xb1, 0xf4, 0xdb, 0x6c, 0x24, 0x91, 0xec, 0x8f, 0x78, 0x24, 0x04, 0xa6, 0x46, 0x42,
	0x40, 0x6d, 0xf3, 0x7e, 0x66, 0xa0, 0x85, 0x74, 0xa0, 0x4c, 0x16, 0x25, 0x36, 0x59, 0x52, 0x13,
	0x27, 0xcb, 0x7d, 0x28, 0x44, 0x54, 0x45, 0xd7, 0x61, 0x5a, 0xf8, 0x2e, 0x7c, 0xcf, 0xc4, 0x42,
	0xd5, 0x00, 0x22, 0xe9, 0x8a, 0x60, 0x4a, 0x28, 0xa5, 0x08, 0xa5, 0xc4, 0x37, 0x6f, 0x45, 0xc2,
	0x40, 0x6d, 0x13, 0xdf, 0x65, 0xc2, 0x2e, 0xd3, 0xfa, 0x8c, 0x24, 0x6e, 0x72, 0x9a, 0x7a, 0x18,
	0xc0, 0x04, 0x22, 0x24, 0xbc, 0x9d, 0xbc, 0x3b, 0xe0, 0xfd, 0x5a, 0xc4, 0xb8, 0x59, 0xe2, 0x58,
	0xc2, 0xb2, 0x8b, 0xc0, 0x9b, 0xb3, 0x68, 0xf1, 0xcf, 0xba, 0xf8, 0x5c, 0xd8, 0xea, 0x47, 0x05,
	0x96, 0x74, 0xdc, 0x21, 0x67, 0xfc, 0xc9, 0xa5, 0x5b, 0x1e, 0xe9, 0xd4, 0x3c, 0xe2, 0xe2, 0x7e,
	0x3a, 0x36, 0x20, 0xe7, 0xf1, 0x6d, 0xd3, 0xa1, 0x32, 0xe4, 0x93, 0xaa, 0xfd, 0x25, 0x28, 0xe5,
	0x1d, 0x86, 0x3b, 0x7a, 0x1f, 0xa8, 0x74, 0x02, 0x53, 0x9c, 0x92, 0xa4, 0xc9, 0x4a, 0x10, 0x70,
	0xa7, 0x84, 0x32, 0xd7, 0xec, 0x60, 0x29, 0x32, 0x0f, 0xa6, 0x6d, 0x49, 0x42, 0x0f, 0x60, 0xd6,
	0xe2, 0x37, 0x0c, 0x98, 0x02, 0x95, 0xaf, 0x09, 0x6a, 0xc8, 0xa6, 0xfe, 0xa0, 0xc0, 0x9d, 0x78,
	0xb9, 0x64, 0x50, 0xe8, 0x90, 0x15, 0x52, 0x61, 0x4b, 0x6a, 0xb7, 0x31, 0x91, 0x76, 0x32, 0x8f,
	0x85, 0x7a, 0x21, 0x50, 0x18, 0x68, 0xa9, 0x7e, 0xa0, 0x95, 0x6a, 0x97, 0xeb, 0x3b, 0xa6, 0x32,
	0x3f, 0x29, 0xb0, 0x58, 0xa5, 0xd4, 0x3e, 0x71, 0xb9, 0x18, 0x4d, 0x32, 0xec, 0xa8, 0xbf, 0x42,
	0xc1, 0x14, 0x9b, 0xbc, 0x05, 0x0a, 0x7d, 0xf5, 0x2c, 0x41, 0x9b, 0x44, 0x98, 0x40, 0x95, 0x28,
	0xd2, 0x97, 0x73, 0xd6, 0xf7, 0x0a, 0x94, 0xe2, 0x04, 0xeb, 0xbb, 0x2a, 0x17, 0x88, 0xd5, 0xf7,
	0xd5, 0x1f, 0x27, 0xd0, 0x2e, 0xea, 0xa9, 0x3e, 0xce, 0xaf, 0xe6, 0xaa, 0xaf, 0x14, 0x40, 0xbb,
	0x36, 0x65, 0x0d, 0xec, 0x9d, 0x61, 0xaf, 0xef, 0xa3, 0x6d, 0xc8, 0x1c, 0xdb, 0x0e, 0xc3, 0x61,
	0x0d, 0x4d, 0x2a, 0xd6, 0x17, 0x8f, 0x96, 0xb7, 0xc4, 0x39, 0x5d, 0x9e, 0x2f, 0xfd, 0x09, 0x32,
	0x01, 0x05, 0x3d, 0x83, 0x29, 0x8f, 0x38, 0x41, 0x51, 0x99, 0x4d, 0xac, 0x60, 0x01, 0x9a, 0x4e,
	0x1c, 0xac, 0x0b, 0x76, 0x75, 0x1f, 0x16, 0x86, 0x6e, 0x91, 0x46, 0x7e, 0x0e, 0x59, 0x1a, 0x90,
	0xa4, 0x8d, 0x97, 0x2f, 0x07, 0x0c, 0xb9, 0x55, 0x03, 0x6e, 0xb6, 0xba, 0x96, 0x29, 0x3a, 0xf7,
	0x5d, 0xf3, 0x28, 0xf2, 0xa0, 0x27, 0x58, 0xf2, 0x26, 0x64, 0x1c, 0xc1, 0x27, 0xc7, 0x47, 0xb9,
	0xe2, 0x74, 0x0f, 0x9b, 0x94, 0xb8, 0x32, 0x92, 0xe4, 0x4a, 0x7d, 0x08, 0xb7, 0x2e, 0x5c, 0x90,
	0x54, 0xd9, 0x2b, 0x3f, 0xe7, 0x21, 0xbf, 0x13, 0x8e, 0xfa, 0xe8, 0x6f, 0x90, 0xef, 0x8f, 0xc6,
	0xe8, 0x77, 0x49, 0xef, 0xd6, 0xc8, 0xfc, 0x5b, 0x5a, 0xbd, 0x9a, 0x51, 0xde, 0x6f, 0x41, 0x21,
	0x32, 0xa8, 0xa2, 0xb5, 0xc4, 0x12, 0x32, 0x3a, 0x63, 0x97, 0x7e, 0x3f, 0x0e, 0xab, 0xbc, 0xe5,
	0x1f, 0xb0, 0x10, 0x33, 0x4a, 0xa2, 0x27, 0x93, 0x8c, 0x9d, 0xc1, 0xad, 0x95, 0xc9, 0x27, 0xd5,
	0xc0, 0x86, 0x72, 0x32, 0xbb, 0xc4, 0x86, 0xc3, 0x63, 0xde, 0x25, 0x36, 0x1c, 0x1d, 0xf2, 0xce,
	0x60, 0xfe, 0x42, 0x8b, 0x82, 0xd6, 0x27, 0x1c, 0x2c, 0x4a, 0x13, 0x77, 0x3f, 0xe8, 0x7f, 0x0a,
	0x2c, 0x5f, 0xda, 0xac, 0xa1, 0x57, 0x9f, 0xd6, 0xe2, 0x05, 0x02, 0xbd, 0xfe, 0x9c, 0xfe, 0x10,
	0x99, 0x00, 0x83, 0x46, 0x06, 0xad, 0x26, 0x06, 0xcb, 0x48, 0xc7, 0x56, 0x5a, 0x1b, 0x83, 0x53,
	0x5e, 0xf1, 0x4f, 0xb8, 0x1e, 0xf7, 0xb4, 0xa1, 0xca, 0xe4, 0xaf, 0x7c, 0xe9, 0xe9, 0x27, 0xbc,
	0x9d, 0xa8, 0x07, 0xe8, 0x62, 0xbd, 0x46, 0x8f, 0x27, 0x7d, 0xb8, 0x4a, 0x4f, 0x26, 0x7e, 0x0c,
	0x78, 0xde, 0x46, 0x6a, 0x60, 0x62, 0xde, 0x5e, 0xac, 0xc6, 0x89, 0x79, 0x1b, 0x57, 0x52, 0xbb,
	0x30, 0x37, 0x52, 0xb8, 0xd0, 0x1f, 0x12, 0x8e, 0xc7, 0x57, 0xd0, 0x52, 0x79, 0x5c, 0xf6, 0xe0,
	0xc6, 0x3f, 0x67, 0xdf, 0x4d, 0x0b, 0x86, 0xa3, 0x8c, 0xf8, 0x4b, 0xf2, 0xe9, 0x2f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x64, 0xde, 0x35, 0xf9, 0x24, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// Deploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	DeployDut(ctx context.Context, in *DeployDutRequest, opts ...grpc.CallOption) (*DeployDutResponse, error)
	// Redeploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	RedeployDut(ctx context.Context, in *RedeployDutRequest, opts ...grpc.CallOption) (*RedeployDutResponse, error)
	// Get the status of a DUT deployment initiated by DeployDut or RedeployDut.
	GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error)
	// Delete a DUT from inventory.
	DeleteDut(ctx context.Context, in *DeleteDutRequest, opts ...grpc.CallOption) (*DeleteDutResponse, error)
	// EnsurePoolHealthy ensures that a target pool has only healthy DUTs.
	//
	// EnsurePoolHealthy works by swapping unhealthy DUTs from target pool with
	// healthy DUTs from a spare pool.
	EnsurePoolHealthy(ctx context.Context, in *EnsurePoolHealthyRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyResponse, error)
	EnsurePoolHealthyForAllModels(ctx context.Context, in *EnsurePoolHealthyForAllModelsRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyForAllModelsResponse, error)
	// ResizePool changes the size of the target DUT pool.
	//
	// ResizePool borrows or returns extra DUTs from the spare pool.
	//
	// ResizePool does not consider DUT health. Clients should usually call
	// EnsurePoolHealthy following a ResizePool operation.
	//
	// ResizePool never makes partial changes. In case of an error, no inventory
	// changes are made.
	ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error)
	// RemoveDutsFromDrones removes the given duts from drones.
	RemoveDutsFromDrones(ctx context.Context, in *RemoveDutsFromDronesRequest, opts ...grpc.CallOption) (*RemoveDutsFromDronesResponse, error)
	// AssignDutsToDrones assigns the given duts to drones.
	AssignDutsToDrones(ctx context.Context, in *AssignDutsToDronesRequest, opts ...grpc.CallOption) (*AssignDutsToDronesResponse, error)
	// ListServers lists the servers in the current environment.
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	// UpdateDutLabels sets the SchedulableLabels of a DUT.
	//
	// This API should only be used by the Skylab infrastructure
	// internally.  It is used by repair tasks to update DUT labels.
	UpdateDutLabels(ctx context.Context, in *UpdateDutLabelsRequest, opts ...grpc.CallOption) (*UpdateDutLabelsResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) DeployDut(ctx context.Context, in *DeployDutRequest, opts ...grpc.CallOption) (*DeployDutResponse, error) {
	out := new(DeployDutResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) RedeployDut(ctx context.Context, in *RedeployDutRequest, opts ...grpc.CallOption) (*RedeployDutResponse, error) {
	out := new(RedeployDutResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "RedeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "GetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteDut(ctx context.Context, in *DeleteDutRequest, opts ...grpc.CallOption) (*DeleteDutResponse, error) {
	out := new(DeleteDutResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DeleteDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) EnsurePoolHealthy(ctx context.Context, in *EnsurePoolHealthyRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyResponse, error) {
	out := new(EnsurePoolHealthyResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "EnsurePoolHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) EnsurePoolHealthyForAllModels(ctx context.Context, in *EnsurePoolHealthyForAllModelsRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyForAllModelsResponse, error) {
	out := new(EnsurePoolHealthyForAllModelsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "EnsurePoolHealthyForAllModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error) {
	out := new(ResizePoolResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ResizePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) RemoveDutsFromDrones(ctx context.Context, in *RemoveDutsFromDronesRequest, opts ...grpc.CallOption) (*RemoveDutsFromDronesResponse, error) {
	out := new(RemoveDutsFromDronesResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "RemoveDutsFromDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) AssignDutsToDrones(ctx context.Context, in *AssignDutsToDronesRequest, opts ...grpc.CallOption) (*AssignDutsToDronesResponse, error) {
	out := new(AssignDutsToDronesResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "AssignDutsToDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDutLabels(ctx context.Context, in *UpdateDutLabelsRequest, opts ...grpc.CallOption) (*UpdateDutLabelsResponse, error) {
	out := new(UpdateDutLabelsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "UpdateDutLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) DeployDut(ctx context.Context, in *DeployDutRequest, opts ...grpc.CallOption) (*DeployDutResponse, error) {
	out := new(DeployDutResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) RedeployDut(ctx context.Context, in *RedeployDutRequest, opts ...grpc.CallOption) (*RedeployDutResponse, error) {
	out := new(RedeployDutResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/RedeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/GetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteDut(ctx context.Context, in *DeleteDutRequest, opts ...grpc.CallOption) (*DeleteDutResponse, error) {
	out := new(DeleteDutResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DeleteDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) EnsurePoolHealthy(ctx context.Context, in *EnsurePoolHealthyRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyResponse, error) {
	out := new(EnsurePoolHealthyResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/EnsurePoolHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) EnsurePoolHealthyForAllModels(ctx context.Context, in *EnsurePoolHealthyForAllModelsRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyForAllModelsResponse, error) {
	out := new(EnsurePoolHealthyForAllModelsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/EnsurePoolHealthyForAllModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error) {
	out := new(ResizePoolResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ResizePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) RemoveDutsFromDrones(ctx context.Context, in *RemoveDutsFromDronesRequest, opts ...grpc.CallOption) (*RemoveDutsFromDronesResponse, error) {
	out := new(RemoveDutsFromDronesResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/RemoveDutsFromDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) AssignDutsToDrones(ctx context.Context, in *AssignDutsToDronesRequest, opts ...grpc.CallOption) (*AssignDutsToDronesResponse, error) {
	out := new(AssignDutsToDronesResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/AssignDutsToDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDutLabels(ctx context.Context, in *UpdateDutLabelsRequest, opts ...grpc.CallOption) (*UpdateDutLabelsResponse, error) {
	out := new(UpdateDutLabelsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/UpdateDutLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// Deploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	DeployDut(context.Context, *DeployDutRequest) (*DeployDutResponse, error)
	// Redeploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	RedeployDut(context.Context, *RedeployDutRequest) (*RedeployDutResponse, error)
	// Get the status of a DUT deployment initiated by DeployDut or RedeployDut.
	GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error)
	// Delete a DUT from inventory.
	DeleteDut(context.Context, *DeleteDutRequest) (*DeleteDutResponse, error)
	// EnsurePoolHealthy ensures that a target pool has only healthy DUTs.
	//
	// EnsurePoolHealthy works by swapping unhealthy DUTs from target pool with
	// healthy DUTs from a spare pool.
	EnsurePoolHealthy(context.Context, *EnsurePoolHealthyRequest) (*EnsurePoolHealthyResponse, error)
	EnsurePoolHealthyForAllModels(context.Context, *EnsurePoolHealthyForAllModelsRequest) (*EnsurePoolHealthyForAllModelsResponse, error)
	// ResizePool changes the size of the target DUT pool.
	//
	// ResizePool borrows or returns extra DUTs from the spare pool.
	//
	// ResizePool does not consider DUT health. Clients should usually call
	// EnsurePoolHealthy following a ResizePool operation.
	//
	// ResizePool never makes partial changes. In case of an error, no inventory
	// changes are made.
	ResizePool(context.Context, *ResizePoolRequest) (*ResizePoolResponse, error)
	// RemoveDutsFromDrones removes the given duts from drones.
	RemoveDutsFromDrones(context.Context, *RemoveDutsFromDronesRequest) (*RemoveDutsFromDronesResponse, error)
	// AssignDutsToDrones assigns the given duts to drones.
	AssignDutsToDrones(context.Context, *AssignDutsToDronesRequest) (*AssignDutsToDronesResponse, error)
	// ListServers lists the servers in the current environment.
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	// UpdateDutLabels sets the SchedulableLabels of a DUT.
	//
	// This API should only be used by the Skylab infrastructure
	// internally.  It is used by repair tasks to update DUT labels.
	UpdateDutLabels(context.Context, *UpdateDutLabelsRequest) (*UpdateDutLabelsResponse, error)
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_DeployDut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployDutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeployDut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DeployDut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeployDut(ctx, req.(*DeployDutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_RedeployDut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeployDutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).RedeployDut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/RedeployDut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).RedeployDut(ctx, req.(*RedeployDutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/GetDeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetDeploymentStatus(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteDut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteDut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DeleteDut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteDut(ctx, req.(*DeleteDutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_EnsurePoolHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsurePoolHealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).EnsurePoolHealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/EnsurePoolHealthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).EnsurePoolHealthy(ctx, req.(*EnsurePoolHealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_EnsurePoolHealthyForAllModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsurePoolHealthyForAllModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).EnsurePoolHealthyForAllModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/EnsurePoolHealthyForAllModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).EnsurePoolHealthyForAllModels(ctx, req.(*EnsurePoolHealthyForAllModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ResizePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ResizePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ResizePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ResizePool(ctx, req.(*ResizePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_RemoveDutsFromDrones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDutsFromDronesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).RemoveDutsFromDrones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/RemoveDutsFromDrones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).RemoveDutsFromDrones(ctx, req.(*RemoveDutsFromDronesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_AssignDutsToDrones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDutsToDronesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AssignDutsToDrones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/AssignDutsToDrones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AssignDutsToDrones(ctx, req.(*AssignDutsToDronesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDutLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDutLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDutLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/UpdateDutLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDutLabels(ctx, req.(*UpdateDutLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosskylabadmin.fleet.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployDut",
			Handler:    _Inventory_DeployDut_Handler,
		},
		{
			MethodName: "RedeployDut",
			Handler:    _Inventory_RedeployDut_Handler,
		},
		{
			MethodName: "GetDeploymentStatus",
			Handler:    _Inventory_GetDeploymentStatus_Handler,
		},
		{
			MethodName: "DeleteDut",
			Handler:    _Inventory_DeleteDut_Handler,
		},
		{
			MethodName: "EnsurePoolHealthy",
			Handler:    _Inventory_EnsurePoolHealthy_Handler,
		},
		{
			MethodName: "EnsurePoolHealthyForAllModels",
			Handler:    _Inventory_EnsurePoolHealthyForAllModels_Handler,
		},
		{
			MethodName: "ResizePool",
			Handler:    _Inventory_ResizePool_Handler,
		},
		{
			MethodName: "RemoveDutsFromDrones",
			Handler:    _Inventory_RemoveDutsFromDrones_Handler,
		},
		{
			MethodName: "AssignDutsToDrones",
			Handler:    _Inventory_AssignDutsToDrones_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _Inventory_ListServers_Handler,
		},
		{
			MethodName: "UpdateDutLabels",
			Handler:    _Inventory_UpdateDutLabels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto",
}
