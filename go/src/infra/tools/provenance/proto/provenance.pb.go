// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file describes generic provenance format for BCID for Software packages.
// It will be used to generate and attach provenance to LUCI built packages.
// For details about the provenance read go/generic-attestation-format and
// go/bcid-for-chrome-bluedoc for BCID specification.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/tools/provenance/proto/provenance.proto

package provenancepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProvenanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProvenanceInfo) Reset() {
	*x = ProvenanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceInfo) ProtoMessage() {}

func (x *ProvenanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceInfo.ProtoReflect.Descriptor instead.
func (*ProvenanceInfo) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{0}
}

type AttestedClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes type of the provenance.
	// This is used by BCID for Software VerifySoftware API to classify the
	// provenance in a particular category.
	// e.g. "//bcid.corp.google.com/attestations/core-provenance/v1".
	Type    string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Subject *AttestedClaim_Subject `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Info about current build goes into payload of attestation.
	ClaimPayload *ClaimPayload `protobuf:"bytes,3,opt,name=claim_payload,json=claimPayload,proto3" json:"claim_payload,omitempty"`
}

func (x *AttestedClaim) Reset() {
	*x = AttestedClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestedClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestedClaim) ProtoMessage() {}

func (x *AttestedClaim) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestedClaim.ProtoReflect.Descriptor instead.
func (*AttestedClaim) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{1}
}

func (x *AttestedClaim) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AttestedClaim) GetSubject() *AttestedClaim_Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *AttestedClaim) GetClaimPayload() *ClaimPayload {
	if x != nil {
		return x.ClaimPayload
	}
	return nil
}

type ClaimPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Builder *ClaimPayload_Builder `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	// Identifies the source location that was used to initiate the build that
	// produced this artifact.
	// For Chrome artifacts, this is going to be identifying the particular
	// revision of `chromium/src` GoB repo used for the build.
	TopLevelSource *TopLevelSource `protobuf:"bytes,2,opt,name=top_level_source,json=topLevelSource,proto3" json:"top_level_source,omitempty"`
	// Identifies how the builder was started (e.g. Blaze build target, LUCI
	// recipe).
	// For Chrome, this will be populated with Recipe used.
	BuildEntryPoint *BuildEntryPoint `protobuf:"bytes,3,opt,name=build_entry_point,json=buildEntryPoint,proto3" json:"build_entry_point,omitempty"`
	// Boolean to represent if provenance has listed *all* sources used in
	// the build. (requirement for BCID L3)
	SourceComplete bool `protobuf:"varint,4,opt,name=source_complete,json=sourceComplete,proto3" json:"source_complete,omitempty"`
	// A list of all source repositories in the build. This includes traditional
	// source code and any repositories used to pull build tools (compilers,
	// VMs, etcâ€¦).  This list will be used to check the BCID Source Control
	// level (TBD) of the referenced repositories. This must list both the
	// location of the source control system (e.g. git-on-borg, CIPD) as well as
	// the specific version (e.g. git commit or artifact hash).
	Source []*Source `protobuf:"bytes,5,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *ClaimPayload) Reset() {
	*x = ClaimPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimPayload) ProtoMessage() {}

func (x *ClaimPayload) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimPayload.ProtoReflect.Descriptor instead.
func (*ClaimPayload) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{2}
}

func (x *ClaimPayload) GetBuilder() *ClaimPayload_Builder {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *ClaimPayload) GetTopLevelSource() *TopLevelSource {
	if x != nil {
		return x.TopLevelSource
	}
	return nil
}

func (x *ClaimPayload) GetBuildEntryPoint() *BuildEntryPoint {
	if x != nil {
		return x.BuildEntryPoint
	}
	return nil
}

func (x *ClaimPayload) GetSourceComplete() bool {
	if x != nil {
		return x.SourceComplete
	}
	return false
}

func (x *ClaimPayload) GetSource() []*Source {
	if x != nil {
		return x.Source
	}
	return nil
}

// Identifies the source location that was used to initiate the build that
// produced this artifact.
type TopLevelSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitSource *GitRepo `protobuf:"bytes,1,opt,name=git_source,json=gitSource,proto3" json:"git_source,omitempty"`
}

func (x *TopLevelSource) Reset() {
	*x = TopLevelSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLevelSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLevelSource) ProtoMessage() {}

func (x *TopLevelSource) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLevelSource.ProtoReflect.Descriptor instead.
func (*TopLevelSource) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{3}
}

func (x *TopLevelSource) GetGitSource() *GitRepo {
	if x != nil {
		return x.GitSource
	}
	return nil
}

// Identifies how the builder was started (e.g. Blaze build target, LUCI
// recipe).
type BuildEntryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The recipe used to build the artifact.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BuildEntryPoint) Reset() {
	*x = BuildEntryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEntryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEntryPoint) ProtoMessage() {}

func (x *BuildEntryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEntryPoint.ProtoReflect.Descriptor instead.
func (*BuildEntryPoint) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{4}
}

func (x *BuildEntryPoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BuildEntryPoint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*Source_Git
	//	*Source_Cipd
	Source isSource_Source `protobuf_oneof:"source"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{5}
}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Source) GetGit() *GitRepo {
	if x, ok := x.GetSource().(*Source_Git); ok {
		return x.Git
	}
	return nil
}

func (x *Source) GetCipd() *CIPD {
	if x, ok := x.GetSource().(*Source_Cipd); ok {
		return x.Cipd
	}
	return nil
}

type isSource_Source interface {
	isSource_Source()
}

type Source_Git struct {
	Git *GitRepo `protobuf:"bytes,1,opt,name=git,proto3,oneof"`
}

type Source_Cipd struct {
	Cipd *CIPD `protobuf:"bytes,2,opt,name=cipd,proto3,oneof"`
}

func (*Source_Git) isSource_Source() {}

func (*Source_Cipd) isSource_Source() {}

type GitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the git repo that the artifact is built from.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// The branch of the above git repo that the artifact is built from.
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// The hash of the commit at head in the identified repo+branch.
	Commit string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitRepo) Reset() {
	*x = GitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepo) ProtoMessage() {}

func (x *GitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepo.ProtoReflect.Descriptor instead.
func (*GitRepo) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{6}
}

func (x *GitRepo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GitRepo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitRepo) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type CIPD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the cipd that the build is requesting.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Instance id that identifies a cipd package uniquely.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *CIPD) Reset() {
	*x = CIPD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIPD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPD) ProtoMessage() {}

func (x *CIPD) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPD.ProtoReflect.Descriptor instead.
func (*CIPD) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{7}
}

func (x *CIPD) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CIPD) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Header of the provenance.
type ProvenanceInfo_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the provenance, e.g. "JWT".
	Typ string `protobuf:"bytes,1,opt,name=typ,proto3" json:"typ,omitempty"`
	// Algorithm used to generate the signature for this token.
	Alg string `protobuf:"bytes,2,opt,name=alg,proto3" json:"alg,omitempty"`
	// Key ID of the key used for signing.
	Kid string `protobuf:"bytes,3,opt,name=kid,proto3" json:"kid,omitempty"`
}

func (x *ProvenanceInfo_Header) Reset() {
	*x = ProvenanceInfo_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceInfo_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceInfo_Header) ProtoMessage() {}

func (x *ProvenanceInfo_Header) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceInfo_Header.ProtoReflect.Descriptor instead.
func (*ProvenanceInfo_Header) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProvenanceInfo_Header) GetTyp() string {
	if x != nil {
		return x.Typ
	}
	return ""
}

func (x *ProvenanceInfo_Header) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

func (x *ProvenanceInfo_Header) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

// Payload of the provenance that contains information specific to the build.
type ProvenanceInfo_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Audience for this provenance attestation. Used by BCID for versioning
	// provenance metadata on artifacts.
	// e.g. "//binaryauthorization.googleapis.com/Attestation/v1".
	Aud string `protobuf:"bytes,1,opt,name=aud,proto3" json:"aud,omitempty"`
	// "Issued At". Refer to RFC7519.
	Iat int32 `protobuf:"varint,2,opt,name=iat,proto3" json:"iat,omitempty"`
	// "Expiration Time". Refer to RFC7519.
	Exp int32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	// "Not-before time". Refer to RFC7519.
	Nbf int32 `protobuf:"varint,4,opt,name=nbf,proto3" json:"nbf,omitempty"`
	// Attested claim portion of the payload.
	AttestedClaim *AttestedClaim `protobuf:"bytes,5,opt,name=attested_claim,json=attestedClaim,proto3" json:"attested_claim,omitempty"`
}

func (x *ProvenanceInfo_Payload) Reset() {
	*x = ProvenanceInfo_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceInfo_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceInfo_Payload) ProtoMessage() {}

func (x *ProvenanceInfo_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceInfo_Payload.ProtoReflect.Descriptor instead.
func (*ProvenanceInfo_Payload) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ProvenanceInfo_Payload) GetAud() string {
	if x != nil {
		return x.Aud
	}
	return ""
}

func (x *ProvenanceInfo_Payload) GetIat() int32 {
	if x != nil {
		return x.Iat
	}
	return 0
}

func (x *ProvenanceInfo_Payload) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ProvenanceInfo_Payload) GetNbf() int32 {
	if x != nil {
		return x.Nbf
	}
	return 0
}

func (x *ProvenanceInfo_Payload) GetAttestedClaim() *AttestedClaim {
	if x != nil {
		return x.AttestedClaim
	}
	return nil
}

// Protected artifact information.
// The hash of the artifact that the provenance is about.
// Cryptographic hash of the contents of the file. The type of the
// hash here must overlap with the type of the hash found in
// the attestations. If one wants to call BCID with an
// attestation set that applies to more than one binary, the
// binaries should be compressed into a single zip file artifact.
type AttestedClaim_Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (x *AttestedClaim_Subject) Reset() {
	*x = AttestedClaim_Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestedClaim_Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestedClaim_Subject) ProtoMessage() {}

func (x *AttestedClaim_Subject) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestedClaim_Subject.ProtoReflect.Descriptor instead.
func (*AttestedClaim_Subject) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AttestedClaim_Subject) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

// The identity of the builder that produced this artifact.
// The key that signed this attestation must be permitted to sign things
// for this builder.
type ClaimPayload_Builder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClaimPayload_Builder) Reset() {
	*x = ClaimPayload_Builder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimPayload_Builder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimPayload_Builder) ProtoMessage() {}

func (x *ClaimPayload_Builder) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tools_provenance_proto_provenance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimPayload_Builder.ProtoReflect.Descriptor instead.
func (*ClaimPayload_Builder) Descriptor() ([]byte, []int) {
	return file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ClaimPayload_Builder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_infra_tools_provenance_proto_provenance_proto protoreflect.FileDescriptor

var file_infra_tools_provenance_proto_provenance_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x22, 0xe8, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x3e, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x79,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6c, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64,
	0x1a, 0x95, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x75, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x75, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65,
	0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x62, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x62, 0x66, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x21,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x22, 0xd1, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x70, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x19, 0x0a, 0x07, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x09, 0x67, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a,
	0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62,
	0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x63, 0x69, 0x70, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x49, 0x50,
	0x44, 0x48, 0x00, 0x52, 0x04, 0x63, 0x69, 0x70, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x22, 0x39, 0x0a, 0x04, 0x43, 0x49, 0x50, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x2b, 0x5a, 0x29, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_tools_provenance_proto_provenance_proto_rawDescOnce sync.Once
	file_infra_tools_provenance_proto_provenance_proto_rawDescData = file_infra_tools_provenance_proto_provenance_proto_rawDesc
)

func file_infra_tools_provenance_proto_provenance_proto_rawDescGZIP() []byte {
	file_infra_tools_provenance_proto_provenance_proto_rawDescOnce.Do(func() {
		file_infra_tools_provenance_proto_provenance_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_tools_provenance_proto_provenance_proto_rawDescData)
	})
	return file_infra_tools_provenance_proto_provenance_proto_rawDescData
}

var file_infra_tools_provenance_proto_provenance_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_infra_tools_provenance_proto_provenance_proto_goTypes = []interface{}{
	(*ProvenanceInfo)(nil),         // 0: provenancepb.ProvenanceInfo
	(*AttestedClaim)(nil),          // 1: provenancepb.AttestedClaim
	(*ClaimPayload)(nil),           // 2: provenancepb.ClaimPayload
	(*TopLevelSource)(nil),         // 3: provenancepb.TopLevelSource
	(*BuildEntryPoint)(nil),        // 4: provenancepb.BuildEntryPoint
	(*Source)(nil),                 // 5: provenancepb.Source
	(*GitRepo)(nil),                // 6: provenancepb.GitRepo
	(*CIPD)(nil),                   // 7: provenancepb.CIPD
	(*ProvenanceInfo_Header)(nil),  // 8: provenancepb.ProvenanceInfo.Header
	(*ProvenanceInfo_Payload)(nil), // 9: provenancepb.ProvenanceInfo.Payload
	(*AttestedClaim_Subject)(nil),  // 10: provenancepb.AttestedClaim.Subject
	(*ClaimPayload_Builder)(nil),   // 11: provenancepb.ClaimPayload.Builder
}
var file_infra_tools_provenance_proto_provenance_proto_depIdxs = []int32{
	10, // 0: provenancepb.AttestedClaim.subject:type_name -> provenancepb.AttestedClaim.Subject
	2,  // 1: provenancepb.AttestedClaim.claim_payload:type_name -> provenancepb.ClaimPayload
	11, // 2: provenancepb.ClaimPayload.builder:type_name -> provenancepb.ClaimPayload.Builder
	3,  // 3: provenancepb.ClaimPayload.top_level_source:type_name -> provenancepb.TopLevelSource
	4,  // 4: provenancepb.ClaimPayload.build_entry_point:type_name -> provenancepb.BuildEntryPoint
	5,  // 5: provenancepb.ClaimPayload.source:type_name -> provenancepb.Source
	6,  // 6: provenancepb.TopLevelSource.git_source:type_name -> provenancepb.GitRepo
	6,  // 7: provenancepb.Source.git:type_name -> provenancepb.GitRepo
	7,  // 8: provenancepb.Source.cipd:type_name -> provenancepb.CIPD
	1,  // 9: provenancepb.ProvenanceInfo.Payload.attested_claim:type_name -> provenancepb.AttestedClaim
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_infra_tools_provenance_proto_provenance_proto_init() }
func file_infra_tools_provenance_proto_provenance_proto_init() {
	if File_infra_tools_provenance_proto_provenance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestedClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopLevelSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEntryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIPD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceInfo_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceInfo_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestedClaim_Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tools_provenance_proto_provenance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimPayload_Builder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_tools_provenance_proto_provenance_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Source_Git)(nil),
		(*Source_Cipd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_tools_provenance_proto_provenance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_tools_provenance_proto_provenance_proto_goTypes,
		DependencyIndexes: file_infra_tools_provenance_proto_provenance_proto_depIdxs,
		MessageInfos:      file_infra_tools_provenance_proto_provenance_proto_msgTypes,
	}.Build()
	File_infra_tools_provenance_proto_provenance_proto = out.File
	file_infra_tools_provenance_proto_provenance_proto_rawDesc = nil
	file_infra_tools_provenance_proto_provenance_proto_goTypes = nil
	file_infra_tools_provenance_proto_provenance_proto_depIdxs = nil
}
