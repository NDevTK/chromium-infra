[# Make a table of all issues that an issue is blocked on, with drag-and-drop
   functionality to re-rank them.
]
<div id="blocked-scrim" style="display: none;">
  <div id="blocked-table">
    <b id="blocked-title">Loading detail...</b>
    <span id="hide-ranks" style="float: right;"><a>X</a></span>
    <table id="blocked-rank" class="striped drag_container">
    </table>
  </div>
</div>

<!-- Issue ref templates -->
<template id="ref-detail">
  <tr>
    <td class="gripper">&#9926;</td>
    <td style="white-space: nowrap"><a></a></td>
    <td class="ref_summary" style="width: 100%"></td>
  </tr>
</template>
<template id="ref-link">
  <a></a><br>
</template>

<script type="text/javascript" nonce="[nonce]">
runOnLoad(function() {
  // TODO(bug): Remove EZT logic from JS.
  // Constants with EZT values needed by JS, so there is separation between EZT
  // and JS logic.
  const CAN_EDIT_ISSUE = [if-any page_perms.EditIssue]true[else]false[end];
  const PROJECT_NAME = '[issue.project_name]';
  const ISSUE_LOCAL_ID = [issue.local_id];

  const tableContainer = $('blocked-scrim');
  const table = $('blocked-rank');
  const links = $('blocked-links');
  const detailTemplate = $('ref-detail');
  const linkTemplate = $('ref-link');

  function createHeader(columns, opt_colspan) {
    var header = document.createElement('tr');
    columns.forEach(function(column) {
      var th = document.createElement('th');
      if (opt_colspan)
        th.setAttribute('colspan', opt_colspan);
      th.textContent = column;
      header.appendChild(th);
    });
    return header;
  }

  const openHeader = createHeader(['', 'ID', 'Summary']);
  const closedHeader = createHeader(['Closed issues:'], 3);
  const danglingHeader = createHeader(['Codesite issues:'], 3);

  let danglingIssues = [];

  function renderLink(a, issue, issueType) {
    const host = issueType === 'dangling' ? 'https://code.google.com' : '';
    a.href = `${host}/p/${issue.projectName}/issues/detail?id=${issue.localId}`;
    a.title = `issue ${issue.localId}: ${issue.summary}`;
    a.setAttribute('class', issueType === 'closed' ? 'closed_ref' : '');
    a.textContent = `${issue.localId}`;
    if (issueType === 'dangling' || issue.projectName !== PROJECT_NAME) {
      a.textContent = `${issue.projectName}:` + a.textContent;
    }
  }

  function renderLinkTemplate(issue, issueType) {
    const t = document.importNode(linkTemplate.content, true);
    const a = t.querySelector('a');
    renderLink(a, issue, issueType);
    a.textContent = 'issue ' + a.textContent;
    return t;
  }

  function renderDetailTemplate(issue, issueType) {
    const t = document.importNode(detailTemplate.content, true);
    const a = t.querySelector('a');
    renderLink(a, issue, issueType);
    const tr = t.querySelector('tr');
    tr.setAttribute('class', issueType === 'open' ? 'drag_item' : '');
    tr.setAttribute('data-id', `${issue.projectName}_${issue.localId}`);
    t.querySelector('td.ref_summary').textContent = issue.summary;
    return t;
  }

  function renderTable(openIssues, closedIssues) {
    while (table.firstChild)
      table.removeChild(table.firstChild);

    $('blocked-title').textContent = 'Blocked on';
    if (CAN_EDIT_ISSUE) {
      $('blocked-title').textContent += ' (drag to re-order)';
    }

    if (openIssues) {
      const openIssuesTbody = document.createElement('tbody');
      openIssues.forEach(issue => {
        openIssuesTbody.appendChild(renderDetailTemplate(issue, 'open'));
      });
      table.appendChild(openHeader);
      table.appendChild(openIssuesTbody);
    }

    if (closedIssues) {
      const closedIssuesTbody = document.createElement('tbody');
      closedIssues.forEach(issue => {
        closedIssuesTbody.appendChild(renderDetailTemplate(issue, 'closed'));
      });
      table.appendChild(closedHeader);
      table.appendChild(closedIssuesTbody);
    }

    if (danglingIssues) {
      const danglingIssuesTbody = document.createElement('tbody');
      danglingIssues.forEach(issue => {
        issue.summary = `Issue ${issue.localId} in ${issue.projectName}.`;
        danglingIssuesTbody.appendChild(
            renderDetailTemplate(issue, 'dangling'));
      });
      table.appendChild(danglingHeader);
      table.appendChild(danglingIssuesTbody);
    }

    if (CAN_EDIT_ISSUE) {
      _initDragAndDrop(table, onRerank, true);
    }
  }

  function renderIssueLinks(openIssues, closedIssues) {
    while (links.firstChild)
      links.removeChild(links.firstChild);

    if (openIssues) {
      const openIssuesDiv = document.createElement('div');
      openIssues.forEach(issue => {
        openIssuesDiv.appendChild(renderLinkTemplate(issue, 'open'));
      });
      links.appendChild(openIssuesDiv);
    }

    if (closedIssues) {
      const closedIssuesDiv = document.createElement('div');
      closedIssues.forEach(issue => {
        closedIssuesDiv.appendChild(renderLinkTemplate(issue, 'closed'));
      });
      links.appendChild(closedIssuesDiv);
    }

    if (danglingIssues) {
      const danglingIssuesDiv = document.createElement('div');
      danglingIssues.forEach(issue => {
        issue.summary = `Issue ${issue.localId} in ${issue.projectName}.`;
        danglingIssuesDiv.appendChild(renderLinkTemplate(issue, 'dangling'));
      });
      links.appendChild(danglingIssuesDiv);
    }
  }

  async function onRerank(srcId, targetId, position) {
    const movedIssueParts = srcId.split('_');
    const targetIssueParts = targetId.split('_');
    const rerankIssuesResponse = await window.prpcClient.call(
        'monorail.Issues', 'RerankBlockedOnIssues', {
            issue_ref: {
              project_name: PROJECT_NAME,
              local_id: ISSUE_LOCAL_ID,
            },
            moved_ref: {
              project_name: movedIssueParts[[]0],
              local_id: movedIssueParts[[]1],
            },
            target_ref: {
              project_name: targetIssueParts[[]0],
              local_id: targetIssueParts[[]1],
            },
            split_above: position == 'above',
        });

    const referencedIssuesResponse = await window.prpcClient.call(
        'monorail.Issues', 'ListReferencedIssues', {
            issue_refs: rerankIssuesResponse.blockedOnIssueRefs || [[]],
        });

    renderTable(
        referencedIssuesResponse.openRefs, referencedIssuesResponse.closedRefs);
    renderIssueLinks(
        referencedIssuesResponse.openRefs, referencedIssuesResponse.closedRefs);
  }

  async function onShow() {
    const getIssueResponse = await window.prpcClient.call(
        'monorail.Issues', 'GetIssue', {
            issue_ref: {
              project_name: PROJECT_NAME,
              local_id: ISSUE_LOCAL_ID,
            },
        });

    const referencedIssuesResponse = await window.prpcClient.call(
        'monorail.Issues', 'ListReferencedIssues', {
            issue_refs: getIssueResponse.issue.blockedOnIssueRefs || [[]],
        });

    danglingIssues = getIssueResponse.issue.danglingBlockedOnRefs;

    renderTable(
        referencedIssuesResponse.openRefs, referencedIssuesResponse.closedRefs);
    renderIssueLinks(
        referencedIssuesResponse.openRefs, referencedIssuesResponse.closedRefs);
    tableContainer.style.display = '';
  }

  function hideTable() {
    tableContainer.style.display = 'none';
    $('blocked-title').textContent = 'Loading detail...';
    table.textContent = '';
  }

  $('blocked-scrim').addEventListener('click', function(e) {
    if (event.target == this)
      hideTable();
  });

  $('show-ranks').addEventListener('click', onShow);

  $('hide-ranks').addEventListener('click', hideTable);
});
</script>
