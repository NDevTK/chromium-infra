// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/api_proto/hotlists.proto

package monorail_v1

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for GetHotlist method.
// Next available tag: 2
type GetHotlistRequest struct {
	// The name of the hotlist to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHotlistRequest) Reset()         { *m = GetHotlistRequest{} }
func (m *GetHotlistRequest) String() string { return proto.CompactTextString(m) }
func (*GetHotlistRequest) ProtoMessage()    {}
func (*GetHotlistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{0}
}

func (m *GetHotlistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHotlistRequest.Unmarshal(m, b)
}
func (m *GetHotlistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHotlistRequest.Marshal(b, m, deterministic)
}
func (m *GetHotlistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHotlistRequest.Merge(m, src)
}
func (m *GetHotlistRequest) XXX_Size() int {
	return xxx_messageInfo_GetHotlistRequest.Size(m)
}
func (m *GetHotlistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHotlistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHotlistRequest proto.InternalMessageInfo

func (m *GetHotlistRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for UpdateHotlist method.
// Next available tag: 2
type UpdateHotlistRequest struct {
	// The hotlist's `name` field is used to identify the hotlist to be updated.
	Hotlist *Hotlist `protobuf:"bytes,1,opt,name=hotlist,proto3" json:"hotlist,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateHotlistRequest) Reset()         { *m = UpdateHotlistRequest{} }
func (m *UpdateHotlistRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateHotlistRequest) ProtoMessage()    {}
func (*UpdateHotlistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{1}
}

func (m *UpdateHotlistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateHotlistRequest.Unmarshal(m, b)
}
func (m *UpdateHotlistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateHotlistRequest.Marshal(b, m, deterministic)
}
func (m *UpdateHotlistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHotlistRequest.Merge(m, src)
}
func (m *UpdateHotlistRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateHotlistRequest.Size(m)
}
func (m *UpdateHotlistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHotlistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHotlistRequest proto.InternalMessageInfo

func (m *UpdateHotlistRequest) GetHotlist() *Hotlist {
	if m != nil {
		return m.Hotlist
	}
	return nil
}

func (m *UpdateHotlistRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request message for ListHotlistItems method.
// Next available tag: 5
type ListHotlistItemsRequest struct {
	// The parent hotlist, which owns this collection of items.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The string of comma separated field names used to order the items.
	// Adding '-' before a field, reverses the sort order.
	// E.g. 'stars,-status' sorts the items by number of stars low to high, then
	// status high to low.
	// If unspecified, items will be ordered by their rank in the parent.
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// A page token, received from a previous `ListHotlistItems` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListHotlistItems` must
	// match the call that provided the page token.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotlistItemsRequest) Reset()         { *m = ListHotlistItemsRequest{} }
func (m *ListHotlistItemsRequest) String() string { return proto.CompactTextString(m) }
func (*ListHotlistItemsRequest) ProtoMessage()    {}
func (*ListHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{2}
}

func (m *ListHotlistItemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHotlistItemsRequest.Unmarshal(m, b)
}
func (m *ListHotlistItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHotlistItemsRequest.Marshal(b, m, deterministic)
}
func (m *ListHotlistItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotlistItemsRequest.Merge(m, src)
}
func (m *ListHotlistItemsRequest) XXX_Size() int {
	return xxx_messageInfo_ListHotlistItemsRequest.Size(m)
}
func (m *ListHotlistItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotlistItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotlistItemsRequest proto.InternalMessageInfo

func (m *ListHotlistItemsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListHotlistItemsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListHotlistItemsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListHotlistItemsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response to ListHotlistItems call.
// Next available tag: 3
type ListHotlistItemsResponse struct {
	// The items from the specified hotlist.
	Items []*HotlistItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotlistItemsResponse) Reset()         { *m = ListHotlistItemsResponse{} }
func (m *ListHotlistItemsResponse) String() string { return proto.CompactTextString(m) }
func (*ListHotlistItemsResponse) ProtoMessage()    {}
func (*ListHotlistItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{3}
}

func (m *ListHotlistItemsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHotlistItemsResponse.Unmarshal(m, b)
}
func (m *ListHotlistItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHotlistItemsResponse.Marshal(b, m, deterministic)
}
func (m *ListHotlistItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotlistItemsResponse.Merge(m, src)
}
func (m *ListHotlistItemsResponse) XXX_Size() int {
	return xxx_messageInfo_ListHotlistItemsResponse.Size(m)
}
func (m *ListHotlistItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotlistItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotlistItemsResponse proto.InternalMessageInfo

func (m *ListHotlistItemsResponse) GetItems() []*HotlistItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListHotlistItemsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request used to rerank a Hotlist.
// Next available tag: 4
type RerankHotlistItemsRequest struct {
	// Resource name of the Hotlist to rerank.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// HotlistItems to be moved. The order of `hotlist_items` will
	// determine the order of these items after they have been moved.
	// E.g. With items [a, b, c, d, e], moving [d, c] to `target_position` 3, will
	// result in items [a, b, e, d, c].
	HotlistItems []string `protobuf:"bytes,2,rep,name=hotlist_items,json=hotlistItems,proto3" json:"hotlist_items,omitempty"`
	// Target starting position of the moved items.
	// `target_position` must be between 0 and (# hotlist items - # items being moved).
	TargetPosition       uint32   `protobuf:"varint,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RerankHotlistItemsRequest) Reset()         { *m = RerankHotlistItemsRequest{} }
func (m *RerankHotlistItemsRequest) String() string { return proto.CompactTextString(m) }
func (*RerankHotlistItemsRequest) ProtoMessage()    {}
func (*RerankHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{4}
}

func (m *RerankHotlistItemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RerankHotlistItemsRequest.Unmarshal(m, b)
}
func (m *RerankHotlistItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RerankHotlistItemsRequest.Marshal(b, m, deterministic)
}
func (m *RerankHotlistItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RerankHotlistItemsRequest.Merge(m, src)
}
func (m *RerankHotlistItemsRequest) XXX_Size() int {
	return xxx_messageInfo_RerankHotlistItemsRequest.Size(m)
}
func (m *RerankHotlistItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RerankHotlistItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RerankHotlistItemsRequest proto.InternalMessageInfo

func (m *RerankHotlistItemsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RerankHotlistItemsRequest) GetHotlistItems() []string {
	if m != nil {
		return m.HotlistItems
	}
	return nil
}

func (m *RerankHotlistItemsRequest) GetTargetPosition() uint32 {
	if m != nil {
		return m.TargetPosition
	}
	return 0
}

// Request message for an AddHotlistItems call.
// Next available tag: 4
type AddHotlistItemsRequest struct {
	// Resource name of the Hotlist to add new items to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Resource names of Issues to associate with new HotlistItems added to `parent`.
	Issues []string `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Target starting position of the new items.
	// `target_position` must be between [0 and # of items that currently exist in
	// `parent`]. The request will fail if a specified `target_position` is outside
	// of this range.
	// New HotlistItems added to a non-last position of the hotlist will
	// cause ranks of existing HotlistItems below `target_position` to be adjusted.
	// If no `target_position` is given, new items will be added to the end of
	// `parent`.
	TargetPosition       uint32   `protobuf:"varint,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddHotlistItemsRequest) Reset()         { *m = AddHotlistItemsRequest{} }
func (m *AddHotlistItemsRequest) String() string { return proto.CompactTextString(m) }
func (*AddHotlistItemsRequest) ProtoMessage()    {}
func (*AddHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{5}
}

func (m *AddHotlistItemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddHotlistItemsRequest.Unmarshal(m, b)
}
func (m *AddHotlistItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddHotlistItemsRequest.Marshal(b, m, deterministic)
}
func (m *AddHotlistItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHotlistItemsRequest.Merge(m, src)
}
func (m *AddHotlistItemsRequest) XXX_Size() int {
	return xxx_messageInfo_AddHotlistItemsRequest.Size(m)
}
func (m *AddHotlistItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHotlistItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHotlistItemsRequest proto.InternalMessageInfo

func (m *AddHotlistItemsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *AddHotlistItemsRequest) GetIssues() []string {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *AddHotlistItemsRequest) GetTargetPosition() uint32 {
	if m != nil {
		return m.TargetPosition
	}
	return 0
}

// Request message for a RemoveHotlistItems call.
// Next available tag: 3
type RemoveHotlistItemsRequest struct {
	// Resource name of the Hotlist to remove items from.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Resource names of Issues associated with HotlistItems that should be removed.
	Issues               []string `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveHotlistItemsRequest) Reset()         { *m = RemoveHotlistItemsRequest{} }
func (m *RemoveHotlistItemsRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveHotlistItemsRequest) ProtoMessage()    {}
func (*RemoveHotlistItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{6}
}

func (m *RemoveHotlistItemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveHotlistItemsRequest.Unmarshal(m, b)
}
func (m *RemoveHotlistItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveHotlistItemsRequest.Marshal(b, m, deterministic)
}
func (m *RemoveHotlistItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveHotlistItemsRequest.Merge(m, src)
}
func (m *RemoveHotlistItemsRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveHotlistItemsRequest.Size(m)
}
func (m *RemoveHotlistItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveHotlistItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveHotlistItemsRequest proto.InternalMessageInfo

func (m *RemoveHotlistItemsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *RemoveHotlistItemsRequest) GetIssues() []string {
	if m != nil {
		return m.Issues
	}
	return nil
}

// Request message for a RemoveHotlistEditors call.
// Next available tag: 3
type RemoveHotlistEditorsRequest struct {
	// Resource name of the Hotlist to remove editors from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource names of Users associated with the hotlist that should be removed.
	Editors              []string `protobuf:"bytes,2,rep,name=editors,proto3" json:"editors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveHotlistEditorsRequest) Reset()         { *m = RemoveHotlistEditorsRequest{} }
func (m *RemoveHotlistEditorsRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveHotlistEditorsRequest) ProtoMessage()    {}
func (*RemoveHotlistEditorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56a2c4cb0040a55a, []int{7}
}

func (m *RemoveHotlistEditorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveHotlistEditorsRequest.Unmarshal(m, b)
}
func (m *RemoveHotlistEditorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveHotlistEditorsRequest.Marshal(b, m, deterministic)
}
func (m *RemoveHotlistEditorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveHotlistEditorsRequest.Merge(m, src)
}
func (m *RemoveHotlistEditorsRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveHotlistEditorsRequest.Size(m)
}
func (m *RemoveHotlistEditorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveHotlistEditorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveHotlistEditorsRequest proto.InternalMessageInfo

func (m *RemoveHotlistEditorsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveHotlistEditorsRequest) GetEditors() []string {
	if m != nil {
		return m.Editors
	}
	return nil
}

func init() {
	proto.RegisterType((*GetHotlistRequest)(nil), "monorail.v1.GetHotlistRequest")
	proto.RegisterType((*UpdateHotlistRequest)(nil), "monorail.v1.UpdateHotlistRequest")
	proto.RegisterType((*ListHotlistItemsRequest)(nil), "monorail.v1.ListHotlistItemsRequest")
	proto.RegisterType((*ListHotlistItemsResponse)(nil), "monorail.v1.ListHotlistItemsResponse")
	proto.RegisterType((*RerankHotlistItemsRequest)(nil), "monorail.v1.RerankHotlistItemsRequest")
	proto.RegisterType((*AddHotlistItemsRequest)(nil), "monorail.v1.AddHotlistItemsRequest")
	proto.RegisterType((*RemoveHotlistItemsRequest)(nil), "monorail.v1.RemoveHotlistItemsRequest")
	proto.RegisterType((*RemoveHotlistEditorsRequest)(nil), "monorail.v1.RemoveHotlistEditorsRequest")
}

func init() { proto.RegisterFile("api/v1/api_proto/hotlists.proto", fileDescriptor_56a2c4cb0040a55a) }

var fileDescriptor_56a2c4cb0040a55a = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0xfe, 0x4e, 0x08, 0x85, 0x25, 0x6d, 0xd3, 0x44, 0x85, 0xd4, 0x40, 0x28, 0x52,
	0xe5, 0xa8, 0x2d, 0x1c, 0xb8, 0x91, 0xaa, 0x2d, 0x14, 0x51, 0xa9, 0x32, 0x94, 0x03, 0x17, 0x6b,
	0x93, 0x4c, 0x53, 0x93, 0xc4, 0x6b, 0x76, 0x37, 0x11, 0xed, 0x03, 0xc0, 0xa3, 0x80, 0x84, 0x78,
	0x0b, 0x1e, 0xa4, 0xcf, 0xc1, 0x09, 0x79, 0xbd, 0xa6, 0x75, 0x62, 0x27, 0x42, 0x1c, 0x38, 0x7a,
	0xf7, 0x9b, 0x6f, 0xbe, 0xf9, 0x76, 0x66, 0x0c, 0xf7, 0xa8, 0xef, 0xd6, 0x06, 0x5b, 0x35, 0xea,
	0xbb, 0x8e, 0xcf, 0x99, 0x64, 0xb5, 0x33, 0x26, 0xbb, 0xae, 0x90, 0xc2, 0x52, 0x9f, 0x24, 0xd7,
	0x63, 0x1e, 0xe3, 0xd4, 0xed, 0x5a, 0x83, 0xad, 0x52, 0x75, 0x04, 0x7d, 0x8a, 0x54, 0xf6, 0x39,
	0x3a, 0xac, 0xf1, 0x01, 0x9b, 0x51, 0x50, 0xa9, 0xd2, 0x66, 0xac, 0xdd, 0xc5, 0x9a, 0xfa, 0x6a,
	0xf4, 0x4f, 0x6b, 0xa7, 0x2e, 0x76, 0x5b, 0x4e, 0x8f, 0x8a, 0x8e, 0x46, 0x94, 0x87, 0x11, 0xd8,
	0xf3, 0xe5, 0xb9, 0xbe, 0xdc, 0x0c, 0x2f, 0x75, 0x0a, 0x8d, 0x0c, 0x52, 0x87, 0x34, 0x0d, 0x3c,
	0xa3, 0x03, 0x97, 0x71, 0x8d, 0xae, 0xa6, 0xa1, 0x39, 0x0a, 0xd6, 0xe7, 0x4d, 0xd4, 0xb8, 0xc7,
	0x69, 0x38, 0xea, 0x79, 0x4c, 0x52, 0xe9, 0x32, 0x4f, 0xeb, 0x37, 0x0f, 0xe0, 0xf6, 0x0b, 0x94,
	0x2f, 0x43, 0x27, 0x6c, 0xfc, 0xd8, 0x47, 0x21, 0xc9, 0x16, 0x4c, 0x7b, 0xb4, 0x87, 0x45, 0xa3,
	0x62, 0x6c, 0x2c, 0xec, 0xae, 0x5d, 0xd6, 0x33, 0xbf, 0xea, 0x2b, 0xb0, 0x44, 0x7d, 0xd7, 0x6a,
	0xf2, 0x46, 0xbf, 0x6d, 0x35, 0x59, 0xaf, 0x16, 0xc5, 0x28, 0xa8, 0xf9, 0xd5, 0x80, 0xc2, 0x89,
	0xdf, 0xa2, 0x12, 0x87, 0xb8, 0x8e, 0x60, 0x4e, 0xfb, 0xac, 0xe8, 0x72, 0xdb, 0x05, 0xeb, 0x9a,
	0xcf, 0x96, 0x46, 0x4f, 0x4a, 0x12, 0x71, 0x90, 0xe7, 0x90, 0xeb, 0xab, 0x34, 0xca, 0xe2, 0x62,
	0x46, 0x51, 0x96, 0xac, 0xb0, 0x46, 0x2b, 0xf2, 0xd8, 0x3a, 0x08, 0xec, 0x3b, 0xa2, 0xa2, 0xb3,
	0x9b, 0xbd, 0xac, 0x67, 0x6c, 0x08, 0x63, 0x82, 0x03, 0xf3, 0xbb, 0x01, 0x2b, 0xaf, 0x5d, 0x11,
	0xd5, 0x7c, 0x28, 0xb1, 0x27, 0x22, 0xb1, 0xcf, 0x60, 0xd6, 0xa7, 0x1c, 0x3d, 0xa9, 0x4b, 0x5f,
	0x57, 0xaa, 0xca, 0x64, 0x35, 0x51, 0x55, 0x10, 0x6a, 0xeb, 0x00, 0x52, 0x86, 0x05, 0x9f, 0xb6,
	0xd1, 0x11, 0xee, 0x05, 0x2a, 0x59, 0x33, 0xf6, 0x7c, 0x70, 0xf0, 0xc6, 0xbd, 0x40, 0xb2, 0x0a,
	0xf3, 0x8c, 0xb7, 0x90, 0x3b, 0x8d, 0xf3, 0x62, 0x36, 0x60, 0xb6, 0xe7, 0xd4, 0xf7, 0xee, 0x39,
	0x59, 0x03, 0x50, 0x71, 0x92, 0x75, 0xd0, 0x2b, 0x4e, 0xab, 0x4b, 0xc5, 0xf4, 0x36, 0x38, 0x30,
	0x39, 0x14, 0x47, 0xc5, 0x0a, 0x9f, 0x79, 0x02, 0x89, 0x05, 0x33, 0x6e, 0x70, 0x50, 0x34, 0x2a,
	0xd9, 0x8d, 0xdc, 0x76, 0x31, 0xc9, 0x58, 0xa5, 0x31, 0x84, 0x91, 0x2a, 0x2c, 0x7a, 0xf8, 0x49,
	0x3a, 0xd7, 0xf2, 0x65, 0x54, 0xbe, 0x7c, 0x70, 0x7c, 0xfc, 0x27, 0xe7, 0x4f, 0x03, 0x56, 0x6d,
	0xe4, 0xd4, 0xeb, 0x24, 0x79, 0xf4, 0xf7, 0xcd, 0x41, 0x0e, 0x20, 0xaf, 0xdf, 0xcf, 0x09, 0x05,
	0x67, 0x2a, 0xd9, 0x2b, 0x77, 0x61, 0x8c, 0xbb, 0x37, 0xce, 0xae, 0x29, 0x20, 0x9b, 0xb0, 0x28,
	0x29, 0x6f, 0xa3, 0x74, 0x7c, 0x26, 0xdc, 0xa0, 0x8d, 0x95, 0x9b, 0xf9, 0xf0, 0x91, 0x6f, 0x86,
	0x77, 0xc7, 0xfa, 0xca, 0xfc, 0x61, 0xc0, 0x72, 0xbd, 0xd5, 0x4a, 0xaa, 0xe1, 0xe9, 0xd0, 0x3b,
	0x4f, 0xa8, 0x22, 0x7a, 0xe3, 0x1d, 0x98, 0x75, 0x85, 0xe8, 0x63, 0x54, 0x40, 0x59, 0x85, 0x2d,
	0xc1, 0x9d, 0x78, 0xd8, 0x61, 0x80, 0xb1, 0x35, 0x94, 0x3c, 0x4a, 0x11, 0x3d, 0xa2, 0xf7, 0x8b,
	0xb2, 0xbd, 0xc7, 0x06, 0xf8, 0x9f, 0x25, 0x9b, 0x9f, 0x0d, 0x28, 0xc7, 0x94, 0xec, 0xb7, 0x5c,
	0xc9, 0xf8, 0xbf, 0xb4, 0xc0, 0x13, 0x98, 0xc3, 0x90, 0x44, 0x0b, 0x29, 0xa9, 0xa8, 0x02, 0x90,
	0x78, 0xd4, 0x89, 0x40, 0x6e, 0x47, 0xd0, 0xed, 0x6f, 0x33, 0x30, 0xaf, 0x79, 0x04, 0xd9, 0x03,
	0xb8, 0x5a, 0x55, 0xe4, 0x6e, 0xac, 0xdb, 0x47, 0x76, 0x58, 0x29, 0x71, 0xcd, 0x98, 0x53, 0xe4,
	0x15, 0xe4, 0x63, 0x7b, 0x8a, 0xac, 0xc7, 0x80, 0x49, 0x3b, 0x2c, 0x95, 0xeb, 0x10, 0xf2, 0x7b,
	0xd8, 0xc5, 0x2b, 0xae, 0x49, 0xa2, 0x96, 0x47, 0x16, 0xd5, 0x7e, 0xf0, 0x33, 0x30, 0xa7, 0x08,
	0x85, 0x5b, 0xc3, 0x73, 0x4e, 0x1e, 0xc4, 0xd8, 0x52, 0x76, 0x56, 0xe9, 0xe1, 0x04, 0x54, 0xb8,
	0x2c, 0xcc, 0x29, 0xf2, 0x0e, 0xc8, 0xe8, 0x54, 0x93, 0x6a, 0x2c, 0x3c, 0x75, 0xec, 0xc7, 0x48,
	0x3f, 0x86, 0xc5, 0xa1, 0x31, 0x23, 0xf7, 0x63, 0xa4, 0xc9, 0x43, 0x38, 0x86, 0x51, 0x29, 0x1d,
	0x1e, 0x84, 0x11, 0xa5, 0x29, 0x93, 0x32, 0x86, 0xf7, 0x3d, 0x14, 0x92, 0xda, 0x9a, 0x6c, 0xa4,
	0x33, 0xc7, 0x3b, 0x3f, 0x9d, 0xbb, 0x31, 0xab, 0x4e, 0x76, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xea, 0xd0, 0xae, 0xc9, 0x67, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HotlistsClient is the client API for Hotlists service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotlistsClient interface {
	// Returns the requested Hotlist.
	//
	// Raises:
	//   NOT_FOUND if the requested hotlist is not found.
	//   PERMISSION_DENIED if the requester is now allowed to view the hotlist.
	//   INVALID_ARGUMENT if the given resource name is not valid.
	GetHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error)
	// Updates a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to update the hotlist.
	//   INVALID_ARGUMENT if required fields are missing.
	UpdateHotlist(ctx context.Context, in *UpdateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error)
	// Deletes a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to delete the hotlist.
	DeleteHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns a list of all HotlistItems in the hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
	//   INVALID_ARGUMENT if the page_token or given hotlist resource name is not
	//   valid.
	ListHotlistItems(ctx context.Context, in *ListHotlistItemsRequest, opts ...grpc.CallOption) (*ListHotlistItemsResponse, error)
	// Reranks a hotlist's items.
	//
	// Raises:
	//   NOT_FOUND if the hotlist or issues to rerank are not found.
	//   PERMISSION_DENIED if the requester is not allowed to rerank the hotlist
	//   or view issues they're trying to rerank.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RerankHotlistItems(ctx context.Context, in *RerankHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Adds new items associated with given issues to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to add.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	AddHotlistItems(ctx context.Context, in *AddHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Removes items associated with given issues from a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to remove.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RemoveHotlistItems(ctx context.Context, in *RemoveHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Removes editors assigned to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to remove all specified
	//   editors from the hotlist.
	//   INVALID_ARGUMENT if any specified editors are not in the hotlist.
	RemoveHotlistEditors(ctx context.Context, in *RemoveHotlistEditorsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}
type hotlistsPRPCClient struct {
	client *prpc.Client
}

func NewHotlistsPRPCClient(client *prpc.Client) HotlistsClient {
	return &hotlistsPRPCClient{client}
}

func (c *hotlistsPRPCClient) GetHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "GetHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) UpdateHotlist(ctx context.Context, in *UpdateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "UpdateHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) DeleteHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "DeleteHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) ListHotlistItems(ctx context.Context, in *ListHotlistItemsRequest, opts ...grpc.CallOption) (*ListHotlistItemsResponse, error) {
	out := new(ListHotlistItemsResponse)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "ListHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) RerankHotlistItems(ctx context.Context, in *RerankHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "RerankHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) AddHotlistItems(ctx context.Context, in *AddHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "AddHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) RemoveHotlistItems(ctx context.Context, in *RemoveHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "RemoveHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsPRPCClient) RemoveHotlistEditors(ctx context.Context, in *RemoveHotlistEditorsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "monorail.v1.Hotlists", "RemoveHotlistEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type hotlistsClient struct {
	cc grpc.ClientConnInterface
}

func NewHotlistsClient(cc grpc.ClientConnInterface) HotlistsClient {
	return &hotlistsClient{cc}
}

func (c *hotlistsClient) GetHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/GetHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) UpdateHotlist(ctx context.Context, in *UpdateHotlistRequest, opts ...grpc.CallOption) (*Hotlist, error) {
	out := new(Hotlist)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/UpdateHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) DeleteHotlist(ctx context.Context, in *GetHotlistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/DeleteHotlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) ListHotlistItems(ctx context.Context, in *ListHotlistItemsRequest, opts ...grpc.CallOption) (*ListHotlistItemsResponse, error) {
	out := new(ListHotlistItemsResponse)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/ListHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) RerankHotlistItems(ctx context.Context, in *RerankHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/RerankHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) AddHotlistItems(ctx context.Context, in *AddHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/AddHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) RemoveHotlistItems(ctx context.Context, in *RemoveHotlistItemsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/RemoveHotlistItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotlistsClient) RemoveHotlistEditors(ctx context.Context, in *RemoveHotlistEditorsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monorail.v1.Hotlists/RemoveHotlistEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotlistsServer is the server API for Hotlists service.
type HotlistsServer interface {
	// Returns the requested Hotlist.
	//
	// Raises:
	//   NOT_FOUND if the requested hotlist is not found.
	//   PERMISSION_DENIED if the requester is now allowed to view the hotlist.
	//   INVALID_ARGUMENT if the given resource name is not valid.
	GetHotlist(context.Context, *GetHotlistRequest) (*Hotlist, error)
	// Updates a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to update the hotlist.
	//   INVALID_ARGUMENT if required fields are missing.
	UpdateHotlist(context.Context, *UpdateHotlistRequest) (*Hotlist, error)
	// Deletes a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to delete the hotlist.
	DeleteHotlist(context.Context, *GetHotlistRequest) (*empty.Empty, error)
	// Returns a list of all HotlistItems in the hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
	//   INVALID_ARGUMENT if the page_token or given hotlist resource name is not
	//   valid.
	ListHotlistItems(context.Context, *ListHotlistItemsRequest) (*ListHotlistItemsResponse, error)
	// Reranks a hotlist's items.
	//
	// Raises:
	//   NOT_FOUND if the hotlist or issues to rerank are not found.
	//   PERMISSION_DENIED if the requester is not allowed to rerank the hotlist
	//   or view issues they're trying to rerank.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RerankHotlistItems(context.Context, *RerankHotlistItemsRequest) (*empty.Empty, error)
	// Adds new items associated with given issues to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to add.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	AddHotlistItems(context.Context, *AddHotlistItemsRequest) (*empty.Empty, error)
	// Removes items associated with given issues from a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the parent hotlist or issues are not found.
	//   PERMISSION_DENIED if the requester is not allowed to edit the hotlist or
	//   view issues they are trying to remove.
	//   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
	//   is empty or contains items not in the Hotlist.
	RemoveHotlistItems(context.Context, *RemoveHotlistItemsRequest) (*empty.Empty, error)
	// Removes editors assigned to a hotlist.
	//
	// Raises:
	//   NOT_FOUND if the hotlist is not found.
	//   PERMISSION_DENIED if the requester is not allowed to remove all specified
	//   editors from the hotlist.
	//   INVALID_ARGUMENT if any specified editors are not in the hotlist.
	RemoveHotlistEditors(context.Context, *RemoveHotlistEditorsRequest) (*empty.Empty, error)
}

// UnimplementedHotlistsServer can be embedded to have forward compatible implementations.
type UnimplementedHotlistsServer struct {
}

func (*UnimplementedHotlistsServer) GetHotlist(ctx context.Context, req *GetHotlistRequest) (*Hotlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotlist not implemented")
}
func (*UnimplementedHotlistsServer) UpdateHotlist(ctx context.Context, req *UpdateHotlistRequest) (*Hotlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotlist not implemented")
}
func (*UnimplementedHotlistsServer) DeleteHotlist(ctx context.Context, req *GetHotlistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotlist not implemented")
}
func (*UnimplementedHotlistsServer) ListHotlistItems(ctx context.Context, req *ListHotlistItemsRequest) (*ListHotlistItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) RerankHotlistItems(ctx context.Context, req *RerankHotlistItemsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerankHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) AddHotlistItems(ctx context.Context, req *AddHotlistItemsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) RemoveHotlistItems(ctx context.Context, req *RemoveHotlistItemsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHotlistItems not implemented")
}
func (*UnimplementedHotlistsServer) RemoveHotlistEditors(ctx context.Context, req *RemoveHotlistEditorsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHotlistEditors not implemented")
}

func RegisterHotlistsServer(s prpc.Registrar, srv HotlistsServer) {
	s.RegisterService(&_Hotlists_serviceDesc, srv)
}

func _Hotlists_GetHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).GetHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/GetHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).GetHotlist(ctx, req.(*GetHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_UpdateHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).UpdateHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/UpdateHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).UpdateHotlist(ctx, req.(*UpdateHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_DeleteHotlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).DeleteHotlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/DeleteHotlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).DeleteHotlist(ctx, req.(*GetHotlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_ListHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).ListHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/ListHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).ListHotlistItems(ctx, req.(*ListHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_RerankHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerankHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).RerankHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/RerankHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).RerankHotlistItems(ctx, req.(*RerankHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_AddHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).AddHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/AddHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).AddHotlistItems(ctx, req.(*AddHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_RemoveHotlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHotlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).RemoveHotlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/RemoveHotlistItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).RemoveHotlistItems(ctx, req.(*RemoveHotlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotlists_RemoveHotlistEditors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHotlistEditorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotlistsServer).RemoveHotlistEditors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Hotlists/RemoveHotlistEditors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotlistsServer).RemoveHotlistEditors(ctx, req.(*RemoveHotlistEditorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hotlists_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.v1.Hotlists",
	HandlerType: (*HotlistsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHotlist",
			Handler:    _Hotlists_GetHotlist_Handler,
		},
		{
			MethodName: "UpdateHotlist",
			Handler:    _Hotlists_UpdateHotlist_Handler,
		},
		{
			MethodName: "DeleteHotlist",
			Handler:    _Hotlists_DeleteHotlist_Handler,
		},
		{
			MethodName: "ListHotlistItems",
			Handler:    _Hotlists_ListHotlistItems_Handler,
		},
		{
			MethodName: "RerankHotlistItems",
			Handler:    _Hotlists_RerankHotlistItems_Handler,
		},
		{
			MethodName: "AddHotlistItems",
			Handler:    _Hotlists_AddHotlistItems_Handler,
		},
		{
			MethodName: "RemoveHotlistItems",
			Handler:    _Hotlists_RemoveHotlistItems_Handler,
		},
		{
			MethodName: "RemoveHotlistEditors",
			Handler:    _Hotlists_RemoveHotlistEditors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api_proto/hotlists.proto",
}
