// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/api_proto/issues.proto

package monorail_v1

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message for Issues.GetIssue.
// Next available tag: 2
type GetIssueRequest struct {
	// The name of the issue to request.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIssueRequest) Reset()         { *m = GetIssueRequest{} }
func (m *GetIssueRequest) String() string { return proto.CompactTextString(m) }
func (*GetIssueRequest) ProtoMessage()    {}
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7675e39ac6c753, []int{0}
}

func (m *GetIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIssueRequest.Unmarshal(m, b)
}
func (m *GetIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIssueRequest.Marshal(b, m, deterministic)
}
func (m *GetIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIssueRequest.Merge(m, src)
}
func (m *GetIssueRequest) XXX_Size() int {
	return xxx_messageInfo_GetIssueRequest.Size(m)
}
func (m *GetIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIssueRequest proto.InternalMessageInfo

func (m *GetIssueRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message for Issues.SearchIssues.
// Next available tag: 6
type SearchIssuesRequest struct {
	// The names of Projects in which to search issues.
	// TODO(crbug/monorail/7143): `projects` must hold exactly one project
	// for now. We will add cross-project search later.
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// The query string can contain any number of free text and
	// field search expressions.
	// Please see https://bugs.chromium.org/p/chromium/issues/searchtips for more
	// details of how the query string works.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `SearchIssues` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `SearchIssues` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The string of comma separated field names used to order the items.
	// Adding '-' before a field, reverses the sort order.
	// E.g. 'stars,-status' sorts the items by number of stars, high to low,
	// then by status, low to high.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchIssuesRequest) Reset()         { *m = SearchIssuesRequest{} }
func (m *SearchIssuesRequest) String() string { return proto.CompactTextString(m) }
func (*SearchIssuesRequest) ProtoMessage()    {}
func (*SearchIssuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7675e39ac6c753, []int{1}
}

func (m *SearchIssuesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchIssuesRequest.Unmarshal(m, b)
}
func (m *SearchIssuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchIssuesRequest.Marshal(b, m, deterministic)
}
func (m *SearchIssuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchIssuesRequest.Merge(m, src)
}
func (m *SearchIssuesRequest) XXX_Size() int {
	return xxx_messageInfo_SearchIssuesRequest.Size(m)
}
func (m *SearchIssuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchIssuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchIssuesRequest proto.InternalMessageInfo

func (m *SearchIssuesRequest) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *SearchIssuesRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchIssuesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchIssuesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *SearchIssuesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// The response message for Issues.SearchIssues.
// Next available tag: 3
type SearchIssuesResponse struct {
	// Issues matching the given request.
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchIssuesResponse) Reset()         { *m = SearchIssuesResponse{} }
func (m *SearchIssuesResponse) String() string { return proto.CompactTextString(m) }
func (*SearchIssuesResponse) ProtoMessage()    {}
func (*SearchIssuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7675e39ac6c753, []int{2}
}

func (m *SearchIssuesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchIssuesResponse.Unmarshal(m, b)
}
func (m *SearchIssuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchIssuesResponse.Marshal(b, m, deterministic)
}
func (m *SearchIssuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchIssuesResponse.Merge(m, src)
}
func (m *SearchIssuesResponse) XXX_Size() int {
	return xxx_messageInfo_SearchIssuesResponse.Size(m)
}
func (m *SearchIssuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchIssuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchIssuesResponse proto.InternalMessageInfo

func (m *SearchIssuesResponse) GetIssues() []*Issue {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *SearchIssuesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request message for Issues.ListComments.
// Next available tag: 4
type ListCommentsRequest struct {
	// The name of the issue for which to list comments.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListComments` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListComments` must
	// match the call that provided the page token.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommentsRequest) Reset()         { *m = ListCommentsRequest{} }
func (m *ListCommentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommentsRequest) ProtoMessage()    {}
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7675e39ac6c753, []int{3}
}

func (m *ListCommentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommentsRequest.Unmarshal(m, b)
}
func (m *ListCommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommentsRequest.Marshal(b, m, deterministic)
}
func (m *ListCommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentsRequest.Merge(m, src)
}
func (m *ListCommentsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommentsRequest.Size(m)
}
func (m *ListCommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentsRequest proto.InternalMessageInfo

func (m *ListCommentsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListCommentsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCommentsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// The response message for Issues.ListComments
// Next available tag: 3
type ListCommentsResponse struct {
	// The comments from the specified issue.
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommentsResponse) Reset()         { *m = ListCommentsResponse{} }
func (m *ListCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCommentsResponse) ProtoMessage()    {}
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7675e39ac6c753, []int{4}
}

func (m *ListCommentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommentsResponse.Unmarshal(m, b)
}
func (m *ListCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommentsResponse.Marshal(b, m, deterministic)
}
func (m *ListCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentsResponse.Merge(m, src)
}
func (m *ListCommentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCommentsResponse.Size(m)
}
func (m *ListCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentsResponse proto.InternalMessageInfo

func (m *ListCommentsResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *ListCommentsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*GetIssueRequest)(nil), "monorail.v1.GetIssueRequest")
	proto.RegisterType((*SearchIssuesRequest)(nil), "monorail.v1.SearchIssuesRequest")
	proto.RegisterType((*SearchIssuesResponse)(nil), "monorail.v1.SearchIssuesResponse")
	proto.RegisterType((*ListCommentsRequest)(nil), "monorail.v1.ListCommentsRequest")
	proto.RegisterType((*ListCommentsResponse)(nil), "monorail.v1.ListCommentsResponse")
}

func init() {
	proto.RegisterFile("api/v1/api_proto/issues.proto", fileDescriptor_da7675e39ac6c753)
}

var fileDescriptor_da7675e39ac6c753 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0x76, 0x2d, 0xed, 0x1b, 0x68, 0x92, 0xdb, 0x89, 0xd0, 0x51, 0xa9, 0x44, 0x68,
	0x2a, 0x08, 0x25, 0x6c, 0x3b, 0x71, 0x41, 0x5a, 0x39, 0x20, 0x24, 0x0e, 0x53, 0x07, 0xe7, 0xc8,
	0xc9, 0x1e, 0x9d, 0x47, 0x63, 0x67, 0xb6, 0x53, 0xd1, 0x7d, 0x00, 0xbe, 0x15, 0xdf, 0x85, 0x4f,
	0xc1, 0x81, 0xd3, 0x14, 0xdb, 0xad, 0x9a, 0x2a, 0x9b, 0x76, 0xf4, 0xf3, 0xef, 0xfd, 0xf3, 0x7f,
	0xff, 0xe7, 0xc0, 0x90, 0xe6, 0x2c, 0x5a, 0x1c, 0x47, 0x34, 0x67, 0x71, 0x2e, 0x85, 0x16, 0x11,
	0x53, 0xaa, 0x40, 0x15, 0x9a, 0x03, 0xd9, 0xcb, 0x04, 0x17, 0x92, 0xb2, 0x79, 0xb8, 0x38, 0x1e,
	0xbc, 0x99, 0x09, 0x31, 0x9b, 0xa3, 0xe3, 0xec, 0xa1, 0x6c, 0x8c, 0x28, 0xe7, 0x42, 0x53, 0xcd,
	0x04, 0x77, 0x7d, 0x83, 0x77, 0xf7, 0xa1, 0x3f, 0x18, 0xce, 0x2f, 0xe3, 0x04, 0xaf, 0xe8, 0x82,
	0x09, 0xe9, 0xe8, 0xa3, 0xfb, 0x68, 0x89, 0x4a, 0x14, 0x32, 0x45, 0xc7, 0xbd, 0xae, 0x37, 0x1b,
	0x8b, 0xe4, 0x1a, 0x53, 0xed, 0xbe, 0x1d, 0x4c, 0x60, 0xff, 0x33, 0xea, 0x2f, 0xe5, 0xcd, 0x14,
	0x6f, 0x0a, 0x54, 0x9a, 0x44, 0xb0, 0xcb, 0x69, 0x86, 0xbe, 0x37, 0xf2, 0xc6, 0xdd, 0xc9, 0xe1,
	0xdf, 0xb3, 0xc6, 0xff, 0xb3, 0x03, 0xe8, 0xd1, 0x9c, 0x85, 0xa9, 0x4c, 0x8a, 0x59, 0x98, 0x8a,
	0x2c, 0xb2, 0x1d, 0x06, 0x0c, 0xfe, 0x78, 0xd0, 0xbb, 0x40, 0x2a, 0xd3, 0x2b, 0x53, 0x55, 0x2b,
	0xa1, 0x0f, 0xd0, 0xc9, 0xa5, 0x30, 0x5f, 0xf3, 0xbd, 0x51, 0x73, 0xdc, 0x9d, 0x0c, 0x8d, 0xd8,
	0x73, 0x38, 0xa8, 0x8a, 0x9d, 0x5b, 0x6a, 0xba, 0xc6, 0x49, 0x1f, 0x5a, 0x37, 0x05, 0xca, 0xa5,
	0xdf, 0x28, 0x4d, 0x4c, 0xed, 0x81, 0x1c, 0x42, 0x37, 0xa7, 0x33, 0x8c, 0x15, 0xbb, 0x45, 0xbf,
	0x39, 0xf2, 0xc6, 0xad, 0x69, 0xa7, 0x2c, 0x5c, 0xb0, 0x5b, 0x24, 0x43, 0x00, 0x73, 0xa9, 0xc5,
	0x4f, 0xe4, 0xfe, 0xae, 0xe9, 0x33, 0xf8, 0xb7, 0xb2, 0x40, 0x5e, 0x40, 0x47, 0xc8, 0x4b, 0x94,
	0x71, 0xb2, 0xf4, 0x5b, 0xe6, 0xf2, 0x89, 0x39, 0x4f, 0x96, 0xc1, 0x35, 0xf4, 0xab, 0xf6, 0x55,
	0x2e, 0xb8, 0x42, 0xf2, 0x16, 0xda, 0x76, 0xbf, 0xc6, 0xfd, 0xde, 0x09, 0x09, 0x37, 0x16, 0x1c,
	0xda, 0x04, 0x1c, 0x41, 0x8e, 0x60, 0x9f, 0xe3, 0x2f, 0x1d, 0x6f, 0x58, 0xb0, 0xd6, 0x9f, 0x95,
	0xe5, 0xf3, 0x95, 0x8d, 0xe0, 0xb7, 0x07, 0xbd, 0xaf, 0x4c, 0xe9, 0x4f, 0x22, 0xcb, 0x90, 0xeb,
	0x75, 0x56, 0xa7, 0xd0, 0xce, 0xa9, 0x44, 0xae, 0x1f, 0x13, 0xbb, 0x43, 0xab, 0x79, 0x34, 0x1e,
	0xcc, 0xa3, 0xb9, 0x95, 0x47, 0x90, 0x43, 0xbf, 0xea, 0xc3, 0x0d, 0xfd, 0x1e, 0x3a, 0xa9, 0xab,
	0xb9, 0xb1, 0xfb, 0x95, 0xb1, 0x5d, 0xc3, 0x74, 0x4d, 0x3d, 0x76, 0xf4, 0x93, 0x7f, 0x1e, 0xb4,
	0x6d, 0xc2, 0xe4, 0x23, 0x74, 0x56, 0xaf, 0x8e, 0xbc, 0xac, 0xc8, 0x6f, 0x3d, 0xc6, 0x41, 0x4d,
	0xe6, 0xc1, 0x0e, 0xf9, 0x0e, 0x4f, 0x37, 0x37, 0x46, 0x46, 0x15, 0xaa, 0xe6, 0x2d, 0x0e, 0x5e,
	0x3d, 0x40, 0xd8, 0xc9, 0xad, 0xec, 0x66, 0x26, 0x5b, 0xb2, 0x35, 0x6b, 0xdb, 0x92, 0xad, 0x0b,
	0x34, 0xd8, 0x49, 0xda, 0xe6, 0x57, 0x3b, 0xbd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x5f, 0x58,
	0xa7, 0x3f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssuesClient is the client API for Issues service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuesClient interface {
	// Returns the requested Issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `name` is formatted incorrectly.
	//   NOT_FOUND if the issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view the issue.
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// Searches over issues within the specified projects.
	// TODO(monorail:6988): Document possible errors when implemented.
	SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error)
	// Lists comments for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `parent` is formatted incorrectly or `page_size` < 0.
	//   NOT_FOUND if `parent` does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view `parent`.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
}
type issuesPRPCClient struct {
	client *prpc.Client
}

func NewIssuesPRPCClient(client *prpc.Client) IssuesClient {
	return &issuesPRPCClient{client}
}

func (c *issuesPRPCClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.client.Call(ctx, "monorail.v1.Issues", "GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error) {
	out := new(SearchIssuesResponse)
	err := c.client.Call(ctx, "monorail.v1.Issues", "SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.client.Call(ctx, "monorail.v1.Issues", "ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type issuesClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuesClient(cc grpc.ClientConnInterface) IssuesClient {
	return &issuesClient{cc}
}

func (c *issuesClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/monorail.v1.Issues/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) SearchIssues(ctx context.Context, in *SearchIssuesRequest, opts ...grpc.CallOption) (*SearchIssuesResponse, error) {
	out := new(SearchIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.v1.Issues/SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/monorail.v1.Issues/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuesServer is the server API for Issues service.
type IssuesServer interface {
	// Returns the requested Issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `name` is formatted incorrectly.
	//   NOT_FOUND if the issue does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view the issue.
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
	// Searches over issues within the specified projects.
	// TODO(monorail:6988): Document possible errors when implemented.
	SearchIssues(context.Context, *SearchIssuesRequest) (*SearchIssuesResponse, error)
	// Lists comments for an issue.
	//
	// Raises:
	//   INVALID_ARGUMENT if `parent` is formatted incorrectly or `page_size` < 0.
	//   NOT_FOUND if `parent` does not exist.
	//   PERMISSION_DENIED if the requester is not allowed to view `parent`.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
}

// UnimplementedIssuesServer can be embedded to have forward compatible implementations.
type UnimplementedIssuesServer struct {
}

func (*UnimplementedIssuesServer) GetIssue(ctx context.Context, req *GetIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (*UnimplementedIssuesServer) SearchIssues(ctx context.Context, req *SearchIssuesRequest) (*SearchIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIssues not implemented")
}
func (*UnimplementedIssuesServer) ListComments(ctx context.Context, req *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}

func RegisterIssuesServer(s prpc.Registrar, srv IssuesServer) {
	s.RegisterService(&_Issues_serviceDesc, srv)
}

func _Issues_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Issues/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_SearchIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).SearchIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Issues/SearchIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).SearchIssues(ctx, req.(*SearchIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.v1.Issues/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issues_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.v1.Issues",
	HandlerType: (*IssuesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssue",
			Handler:    _Issues_GetIssue_Handler,
		},
		{
			MethodName: "SearchIssues",
			Handler:    _Issues_SearchIssues_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _Issues_ListComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api_proto/issues.proto",
}
