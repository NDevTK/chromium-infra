// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../../app/store';

export interface AssetState {
  status : string,
  assetId : string,
  name : string
}

const initialState : AssetState = {
  status: 'idle',
  assetId: '',
  name: ''
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAssetAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAssetAsync = createAsyncThunk(
  'asset/fetchAsset',
  async (assetId: string) => {
    const response = await fetchAsset(assetId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const assetSlice = createSlice({
  name: 'asset',
  initialState,
  reducers: {
    queryAsset: (state, action: PayloadAction<string>) => {

    },
  },

  // The `extraReducers` field lets the slice handle actions generated by
  // createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAssetAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAssetAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.name += action.payload;
      });
  },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.asset)`
export const selectAsset = (state: RootState) => state.asset;

// A mock function to mimic making an async request for data, will be replaced
// with actual server call
function fetchAsset(assetId = '') {
  return new Promise<{ data: string }>((resolve) =>
    setTimeout(() => resolve({ data: assetId}), 500)
  );
}

export const { queryAsset } = assetSlice.actions

export default assetSlice.reducer
