// Code generated by protoc-gen-go.
// source: infra/tricium/api/admin/v1/driver.proto
// DO NOT EDIT!

/*
Package admin is a generated protocol buffer package.

It is generated from these files:
	infra/tricium/api/admin/v1/driver.proto
	infra/tricium/api/admin/v1/launcher.proto
	infra/tricium/api/admin/v1/tracker.proto
	infra/tricium/api/admin/v1/workflow.proto

It has these top-level messages:
	TriggerRequest
	TriggerResponse
	CollectRequest
	CollectResponse
	LaunchRequest
	LaunchResponse
	WorkflowLaunchedRequest
	WorkflowLaunchedResponse
	WorkerLaunchedRequest
	WorkerLaunchedResponse
	WorkerDoneRequest
	WorkerDoneResponse
	Workflow
	Worker
*/
package admin

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TriggerRequest contains the details needed to launch a swarming task for a
// Tricium worker.
type TriggerRequest struct {
	RunId             int64  `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	IsolatedInputHash string `protobuf:"bytes,2,opt,name=isolated_input_hash,json=isolatedInputHash" json:"isolated_input_hash,omitempty"`
	Worker            string `protobuf:"bytes,3,opt,name=worker" json:"worker,omitempty"`
}

func (m *TriggerRequest) Reset()                    { *m = TriggerRequest{} }
func (m *TriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*TriggerRequest) ProtoMessage()               {}
func (*TriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TriggerRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *TriggerRequest) GetIsolatedInputHash() string {
	if m != nil {
		return m.IsolatedInputHash
	}
	return ""
}

func (m *TriggerRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type TriggerResponse struct {
}

func (m *TriggerResponse) Reset()                    { *m = TriggerResponse{} }
func (m *TriggerResponse) String() string            { return proto.CompactTextString(m) }
func (*TriggerResponse) ProtoMessage()               {}
func (*TriggerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// CollectRequest contains the details needed to collect results from a swarming task
// running a Tricium worker and to launch succeeding Tricium workers.
type CollectRequest struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// The isolated input of this worker is imported in the input hash of any successor
	// workers of this worker. Passing it along here to make sure it is available.
	IsolatedInputHash string `protobuf:"bytes,2,opt,name=isolated_input_hash,json=isolatedInputHash" json:"isolated_input_hash,omitempty"`
	// Points out which worker to collect results for. This worker name is used to
	// mangle the ID of the swarming task running the worker.
	Worker string `protobuf:"bytes,3,opt,name=worker" json:"worker,omitempty"`
}

func (m *CollectRequest) Reset()                    { *m = CollectRequest{} }
func (m *CollectRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectRequest) ProtoMessage()               {}
func (*CollectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CollectRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *CollectRequest) GetIsolatedInputHash() string {
	if m != nil {
		return m.IsolatedInputHash
	}
	return ""
}

func (m *CollectRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type CollectResponse struct {
}

func (m *CollectResponse) Reset()                    { *m = CollectResponse{} }
func (m *CollectResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectResponse) ProtoMessage()               {}
func (*CollectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*TriggerRequest)(nil), "admin.TriggerRequest")
	proto.RegisterType((*TriggerResponse)(nil), "admin.TriggerResponse")
	proto.RegisterType((*CollectRequest)(nil), "admin.CollectRequest")
	proto.RegisterType((*CollectResponse)(nil), "admin.CollectResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Driver service

type DriverClient interface {
	// Trigger triggers a swarming task for a Tricium worker.
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// Collect collects results from a swarming task running a Tricium worker.
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
}
type driverPRPCClient struct {
	client *prpc.Client
}

func NewDriverPRPCClient(client *prpc.Client) DriverClient {
	return &driverPRPCClient{client}
}

func (c *driverPRPCClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.client.Call(ctx, "admin.Driver", "Trigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPRPCClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.client.Call(ctx, "admin.Driver", "Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := grpc.Invoke(ctx, "/admin.Driver/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := grpc.Invoke(ctx, "/admin.Driver/Collect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverServer interface {
	// Trigger triggers a swarming task for a Tricium worker.
	Trigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
	// Collect collects results from a swarming task running a Tricium worker.
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
}

func RegisterDriverServer(s prpc.Registrar, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Driver/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Driver/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _Driver_Trigger_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _Driver_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/driver.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/driver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0xaa, 0x06, 0x71, 0x03, 0xa8, 0x46, 0xad, 0x22, 0xa6, 0xaa, 0x0b, 0x9d, 0x62,
	0x01, 0x0b, 0x3b, 0x0c, 0x74, 0x8d, 0xd8, 0x23, 0x53, 0x1f, 0xcd, 0x89, 0xd4, 0x0e, 0x67, 0xbb,
	0x2c, 0xfc, 0x78, 0x14, 0x37, 0x58, 0x6a, 0x7e, 0x40, 0x47, 0xdf, 0xf9, 0xbd, 0xf7, 0xf9, 0x19,
	0xee, 0xc9, 0x7c, 0xb2, 0x92, 0x9e, 0x69, 0x4b, 0x61, 0x2f, 0x55, 0x47, 0x52, 0xe9, 0x3d, 0x19,
	0x79, 0x78, 0x90, 0x9a, 0xe9, 0x80, 0x5c, 0x76, 0x6c, 0xbd, 0x15, 0xd3, 0x38, 0x5e, 0x59, 0xb8,
	0x7e, 0x67, 0xda, 0xed, 0x90, 0x2b, 0xfc, 0x0e, 0xe8, 0xbc, 0x98, 0x43, 0xce, 0xc1, 0xd4, 0xa4,
	0x8b, 0x6c, 0x99, 0xad, 0x27, 0xd5, 0x94, 0x83, 0xd9, 0x68, 0x51, 0xc2, 0x2d, 0x39, 0xdb, 0x2a,
	0x8f, 0xba, 0x26, 0xd3, 0x05, 0x5f, 0x37, 0xca, 0x35, 0xc5, 0xc5, 0x32, 0x5b, 0x5f, 0x55, 0xb3,
	0xff, 0xd5, 0xa6, 0xdf, 0xbc, 0x29, 0xd7, 0x88, 0x05, 0xe4, 0x3f, 0x96, 0xbf, 0x90, 0x8b, 0x49,
	0xbc, 0x32, 0x9c, 0x56, 0x33, 0xb8, 0x49, 0x81, 0xae, 0xb3, 0xc6, 0x61, 0xcf, 0xf0, 0x62, 0xdb,
	0x16, 0xb7, 0xfe, 0x7c, 0x0c, 0x29, 0xf0, 0xc8, 0xf0, 0xf8, 0x0b, 0xf9, 0x6b, 0xac, 0x47, 0x3c,
	0xc3, 0xe5, 0x00, 0x28, 0xe6, 0x65, 0x2c, 0xa9, 0x3c, 0x6d, 0xe8, 0x6e, 0x31, 0x1e, 0x1f, 0x3d,
	0x7a, 0xe5, 0x60, 0x9b, 0x94, 0xa7, 0xef, 0x4a, 0xca, 0x51, 0xfa, 0x47, 0x1e, 0xff, 0xe4, 0xe9,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x46, 0xed, 0x7d, 0xbe, 0x01, 0x00, 0x00,
}
