// Copyright (c) 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// This is a proto that specifies every bit of information to display on a
// Milo build page.  This is internal to Milo with the explicit goal of making
// little to no transformation on the data from proto generation to page render.
// Ie. Specify everything explicitly.

// Denotes a full renderable Milo build page.
message MiloBuild {
  // The very top bar, used for Navigation.
  Navigation navi = 1;

  // A top level summary of the page.
  repeated Component summary = 2;

  // A detailed list of components and subcomponents of the page.
  // This is most often used for steps (buildbot/luci) or deps (luci).
  repeated Component components = 3;

  // A list of input and output property of this page.
  // This is used for build and emitted properties (buildbot) and quest
  // information (luci).  This is also grouped by the "type" of property
  // so different categories of properties can be separted and sorted.
  repeated PropertyGroup property_group = 4;

  // A list of people and commits that is likely to be in relation to
  // the thing displayed on this page.
  repeated Blame blame = 5;
}

message Property {
  string key = 1;
  string value = 2;
}

message PropertyGroup {
  string group_name = 1;
  repeated Property property = 2;
}

message Blame {
  string author_name = 1;
  string author_email = 2;
  string repo = 3;
  string revision = 4;
  string description = 5;
  string title = 6;
  string changelist_url = 7;
  string commit_url = 8;
  repeated string file = 9;
}

// Denotes a single labeled link.
message Link {
  // Title of the link.  Shows up as the main label.
  string label = 1;

  // An icon for the link.  Not compatible with label.  Rendered as <img>
  string img = 2;

  // A subtitle for the link.  Can be used in conjunction with label or img.
  string subtitle = 3;

  // The destination for the link, stuck in a <a href> tag.
  string url = 4;

  // Alt text for the image, only supported with img.
  string alt = 5;
}

// The top bar of the page, used for navigating out of the page.
message Navigation {
  // Title of the page, is generally consistent throughout the whole site.
  Link title_link = 1;

  // List of clickable thing to navigate down the hierarchy.
  repeated Link breadcrumbs = 2;

  // List of (smaller) clickable things to display on the right side.
  repeated Link right = 3;
}

// A way to show progress.  Precent should always be specified.
message Progress {
  // The total number of entries. Shows up as a tooltip.  Leave at 0 to
  // disable the tooltip.
  uint64 total = 1;

  // The number of entries completed.  Shows up as <progress> / <total>.
  uint64 progress = 2;

  // A number between -100 to 100 denoting the percentage completed.
  // Negative percentages show up as red with the progress bar going in the
  // opposite direction.
  int32 percent = 3;
}

// Discrete statuses for the purpose of colorizing a component.
// These are based off the Material Design Bootstrap color pallets.
enum ComponentStatus {
  // The component has not yet been run.
  NOT_RUN = 0;  // 100 Gray.

  // The component is currently executing.
  RUNNING = 1;  // 100 Teal

  // The component has finished executing and is not noteworthy.
  SUCCESS = 2;  // A200 Green.

  // The component has finished executing and contains a failure.
  FAILURE = 3;  // A200 Red.

  // The component has finished incompletely due to a failure in infra.
  INFRA_FAILURE = 4; // A100, Purple.

  // The component has finished incompletely due to a failure in a dependency.
  DEPENDENCY_FAILURE = 5; // 100 Amber.

  // The component has finished or paused execution due to an incomplete
  // dependency.
  WAITING_DEPENDENCY = 6; // 100 Brown.
}

// Denotes the type of component.
enum ComponentType {
  // Also known as a DM attempt.  Dependencies are expressed as a recipe
  // at a deeper level.
  RECIPE = 0;

  // A step from a recipe.
  STEP = 1;
}

// Represents a single entry of a Step, subsetup, or attempt.
message Component {
  // The main label for the component.
  string label = 1;

  // A status represented by the color of the component.
  ComponentStatus status = 2;

  // Link to show adjacent to the main label.
  Link main_link = 3;

  // Links to show right below the main label.
  repeated Link sub_link = 4;

  // Designates the progress of the current component. Set null for no progress.
  Progress progress = 5;

  // When did this step start.  Set null if not started.
  google.protobuf.Timestamp started = 6;

  // When did this step finish.  Set null if not finished.
  google.protobuf.Timestamp finished = 7;

  // The time it took for this step to finish.  If unfinished, this is the
  // current elapsed duration.
  google.protobuf.Duration duration = 8;

  // The type of component.  This manifests itself as a little label on the
  // top left corner of the component.
  ComponentType type = 9;

  // Specifies if this is a top level or a dependency.  Manifests itself as an
  // indentation level.  Valid options are 0 and 1.  Anything more than 1 is
  // automatically truncated to 1.
  uint32 levels_deep = 10;

  // Arbitrary text to display below links.  One line per entry,
  // newlines are stripped.
  repeated string text = 11;
}
