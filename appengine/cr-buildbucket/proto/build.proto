// Copyright 2018 The Swarming Authors. All rights reserved.
// Use of this source code is governed by the Apache v2.0 license that can be
// found in the LICENSE file.

syntax = "proto3";

package buildbucket.v2;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "common.proto";
import "step.proto";

// A single build, identified by an int64 id.
// Belongs to a builder.
//
// RPC: see Builds service for build creation and retrieval.
// Some Build fields are marked as excluded from responses by default.
// Use build_fields request field to specify that a field must be included.
//
// BigQuery: this message also defines schema of a BigQuery table of completed builds.
// A BigQuery row is inserted soon after build ends, i.e. a row represents a state of
// a build at completion time.
// All fields are included.
message Build {

  // Defines what to build/test.
  message Input {
    // Arbitrary JSON object. Available at build run time.
    //
    // RPC: By default, this field is excluded from responses.
    //
    // V1 equivalent: corresponds to "properties" key in "parameters_json".
    google.protobuf.Struct properties = 1;

    // Gitiles commits to run against.
    // Usually present in CI builds, set by LUCI Scheduler.
    // Usually describe different repositories.
    // If not present, the build may checkout "refs/heads/master".
    // NOT a blamelist.
    //
    // V1 equivalent: supersedes "revision" property and "buildset"
    // tag that starts with "commit/gitiles/".
    repeated GitilesCommit gitiles_commits = 2;

    // Gerrit patchsets to run against.
    // Usually present in tryjobs, set by CQ, Gerrit, git-cl-try.
    // Applied on top of the corresponding commit in gitiles_commits
    // or tip of the tree if the commit is not specified.
    //
    // V1 equivalent: supersedes patch_* properties and "buildset"
    // tag that starts with "patch/gerrit/".
    repeated GerritChange gerrit_changes = 3;

    // If true, the build does not affect prod. In recipe land,
    // runtime.is_experimental will return true and recipes should not make
    // prod-visible side effects.
    // By default, experimental builds are not surfaced in RPCs, PubSub
    // notifications (unless it is callback), and reported in metrics / BigQuery
    // tables under a different name.
    // See also include_experimental fields to in request messages.
    bool experimental = 5;
  }

  // Output of the build script / recipe.
  message Output {
    // Arbitrary JSON object produced by the build.
    //
    // RPC: By default, this field is excluded from responses.
    //
    // V1 equivalent: corresponds to "properties" key in
    // "result_details_json".
    // In V1 output properties are not populated until build ends.
    google.protobuf.Struct properties = 1;
  }

  // Identifier of the build, unique per buildbucket app id.
  // IDs are monotonically decreasing.
  int64 id = 1;

  // Required. The builder this build belongs to.
  //
  // Tuple (builder.project, builder.bucket) defines build ACL
  // which may change after build has ended.
  Builder.ID builder = 2;

  // Human-oriented identifier of the build with the following properties:
  // - unique within the builder
  // - a monotonically increasing number
  // - mostly contiguous
  // - much shorter than id
  //
  // Caution: populated (positive number) iff build numbers were enabled
  // in the builder configuration at the time of build creation.
  //
  // Caution: Build numbers are not guaranteed to be contiguous.
  // There may be gaps during outages.
  int32 number = 3;

  // When the build was created.
  google.protobuf.Timestamp create_time = 4;
  // When the build started.
  google.protobuf.Timestamp start_time = 5;
  // When the build ended.
  google.protobuf.Timestamp end_time = 6;
  // When the build was most recently updated.
  google.protobuf.Timestamp update_time = 7;

  // Status of the build.
  // Must be specified, i.e. not STATUS_UNSPECIFIED.
  //
  // RPC: Responses have most current status.
  //
  // BigQuery: Final status of the build. Cannot be SCHEDULED or STARTED.
  Status status = 10;

  // Arbitrary annotations for the build.
  // One key may have multiple values!
  repeated StringPair tags = 11;

  // Defines what to build/test.
  Input input = 12;

  // Output of the build script / recipe.
  // SHOULD depend only on input field and NOT other fields.
  //
  // RPC: Updated while the build is running and finalized when the build ends.
  Output output = 13;

  // Build infrastructure used by the build.
  //
  // RPC: By default, this field is excluded from responses.
  BuildInfra infra = 14;

  // Secure identity who created this build.
  // Derived by the server from OAuth 2.0 token and verified against Google
  // OAuth servers at the build creation time.
  string created_by = 15;

  // URL of a human-oriented build page.
  // Always populated.
  string url = 16;

  // Current list of build steps.
  // Updated as build runs.
  //
  // RPC: By default, this field is excluded from responses.
  repeated Step steps = 17;
}

// Build infrastructure that was used for a particular build.
message BuildInfra {

  // Buildbucket-specific information, captured at the build creation time.
  message Buildbucket {
    // Version of swarming task template. Defines
    // versions of kitchen, git, git wrapper, python, vpython, etc.
    string service_config_revision = 2;

    // Whether canary version of the swarming task template was used for this
    // build.
    bool canary = 4;
  }

  // Swarming-specific information.
  message Swarming {
    // Swarming hostname, e.g. "chromium-swarm.appspot.com".
    // Populated at the build creation time.
    string hostname = 1;

    // Swarming task id.
    // Not guaranteed to be populated at the build creation time.
    string task_id = 2;

    // Task service account email address.
    // This is the service account used for all authenticated requests by the
    // build.
    string task_service_account = 3;

    // Priority of the task. The lower the more important.
    // Valid values are [1..255].
    int32 priority = 4;

    // Swarming dimensions for the task.
    repeated StringPair task_dimensions = 5;

    // Swarming dimensions of the bot used for the task.
    repeated StringPair bot_dimensions = 6;
  }

  Buildbucket buildbucket = 1;
  Swarming swarming = 2;
}

message Builder {
  // Identifies a builder.
  // Canonical string representation: “{project}/{bucket}/{builder}”.
  message ID {
    // Project ID, e.g. "chromium". Unique within a LUCI deployment.
    string project = 1;
    // Bucket name, e.g. "try". Unique within the project.
    // Together with project, defines an ACL.
    string bucket = 2;
    // Builder name, e.g. "linux-rel". Unique within the bucket.
    string builder = 3;
  }
}
