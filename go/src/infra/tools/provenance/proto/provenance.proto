// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file describes generic provenance format for BCID for Software packages.
// It will be used to generate and attach provenance to LUCI built packages.
// For details about the provenance read go/generic-attestation-format and
// go/bcid-for-chrome-bluedoc for BCID specification.

syntax = "proto3";

package provenancepb;

option go_package = "infra/tools/provenance/proto;provenancepb";

// The generic attestation specification by BCID for Software.

message ProvenanceInfo {
  // Header of the provenance.
  message Header {
    // Type of the provenance, e.g. "JWT".
    string typ = 1;
    // Algorithm used to generate the signature for this token.
    string alg = 2;
    // Key ID of the key used for signing.
    string kid = 3;
  }

  // Payload of the provenance that contains information specific to the build.
  message Payload {
    // Audience for this provenance attestation. Used by BCID for versioning
    // provenance metadata on artifacts.
    // e.g. "//binaryauthorization.googleapis.com/Attestation/v1".
    string aud = 1;
    // "Issued At". Refer to RFC7519.
    int32 iat = 2;
    // "Expiration Time". Refer to RFC7519.
    int32 exp = 3;
    // "Not-before time". Refer to RFC7519.
    int32 nbf = 4;
    // Attested claim portion of the payload.
    AttestedClaim attestedClaim = 5;
  }
}

message AttestedClaim {
  // Describes type of the provenance.
  // This is used by BCID for Software VerifySoftware API to classify the
  // provenance in a particular category.
  // e.g. "//bcid.corp.google.com/attestations/core-provenance/v1".
  string type = 1;
  // Protected artifact information.
  // The hash of the artifact that the provenance is about.
  // Cryptographic hash of the contents of the file. The type of the
  // hash here must overlap with the type of the hash found in
  // the attestations. If one wants to call BCID with an
  // attestation set that applies to more than one binary, the
  // binaries should be compressed into a single zip file artifact.
  message Subject {
    string sha256 = 1 [json_name="sha-256"];
  }
  Subject subject = 2;
  // Info about current build goes into payload of attestation.
  ClaimPayload payload = 3;
}

message ClaimPayload {
  // The identity of the builder that produced this artifact.
  // The key that signed this attestation must be permitted to sign things
  // for this builder.
  message Builder {
    string id = 1;
  }
  Builder builder = 1;
  // Identifies the source location that was used to initiate the build that
  // produced this artifact.
  // For Chrome artifacts, this is going to be identifying the particular
  // revision of `chromium/src` GoB repo used for the build.
  TopLevelSource top_level_source = 2;
  // Identifies how the builder was started (e.g. Blaze build target, LUCI
  // recipe).
  // For Chrome, this will be populated with Recipe used.
  BuildEntryPoint build_entry_point = 3;
  // Boolean to represent if provenance has listed *all* sources used in
  // the build. (requirement for BCID L3)
  bool source_complete = 4;
  // A list of all source repositories in the build. This includes traditional
  // source code and any repositories used to pull build tools (compilers,
  // VMs, etcâ€¦).  This list will be used to check the BCID Source Control
  // level (TBD) of the referenced repositories. This must list both the
  // location of the source control system (e.g. git-on-borg, CIPD) as well as
  // the specific version (e.g. git commit or artifact hash).
  repeated Source source = 5;
}

// Identifies the source location that was used to initiate the build that
// produced this artifact.
message TopLevelSource {
  GitRepo git_repo = 1;
}

// Identifies how the builder was started (e.g. Blaze build target, LUCI
// recipe).
message BuildEntryPoint {
  string type = 1;
  // The recipe used to build the artifact.
  string value = 2;
}

message Source {
  oneof source {
    GitRepo git = 1;
    CIPD cipd = 2;
  }
}

message GitRepo {
  // The URI of the git repo that the artifact is built from.
  string uri = 1;
  // The branch of the above git repo that the artifact is built from.
  string branch = 2;
  // The hash of the commit at head in the identified repo+branch.
  string commit = 3;
}

message CIPD {
  // The URI of the cipd that the build is requesting.
  string uri = 1;
  // Instance id that identifies a cipd package uniquely.
  string instance_id = 2;
}

// Used to serialize/deserialize data between Invoker and CLI.
// this is used as input to generator CLI to produce provenance of artifacts.
message ProvenanceData {
  string subjectHash = 1;
  string recipe = 2;
  int32 exp = 3;
  TopLevelSource topLevelSource = 4;
}
