// Code generated by protoc-gen-go.
// source: infra/tricium/api/v1/data.proto
// DO NOT EDIT!

package tricium

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Available data types should be listed in this enum and have a
// corresponding Data message.
type Data_Type int32

const (
	Data_NONE             Data_Type = 0
	Data_GIT_FILE_DETAILS Data_Type = 1
	Data_FILES            Data_Type = 2
	Data_CLANG_DETAILS    Data_Type = 3
	Data_RESULTS          Data_Type = 4
)

var Data_Type_name = map[int32]string{
	0: "NONE",
	1: "GIT_FILE_DETAILS",
	2: "FILES",
	3: "CLANG_DETAILS",
	4: "RESULTS",
}
var Data_Type_value = map[string]int32{
	"NONE":             0,
	"GIT_FILE_DETAILS": 1,
	"FILES":            2,
	"CLANG_DETAILS":    3,
	"RESULTS":          4,
}

func (x Data_Type) String() string {
	return proto.EnumName(Data_Type_name, int32(x))
}
func (Data_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// Tricium data types.
//
// Any data type provided or needed by a Tricium analyzer.
type Data struct {
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Details for retrieval of file content from a Git repository.
//
// ISOLATED PATH: tricium/data/git_file_details.json
type Data_GitFileDetails struct {
	Repository string   `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Ref        string   `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	Path       []string `protobuf:"bytes,3,rep,name=path" json:"path,omitempty"`
}

func (m *Data_GitFileDetails) Reset()                    { *m = Data_GitFileDetails{} }
func (m *Data_GitFileDetails) String() string            { return proto.CompactTextString(m) }
func (*Data_GitFileDetails) ProtoMessage()               {}
func (*Data_GitFileDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *Data_GitFileDetails) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *Data_GitFileDetails) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Data_GitFileDetails) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

// List of paths included in the isolated input.
//
// Files in the isolate should be laid out with the same file system
// structure as in the repository, with the root of the isolate input mapped
// to the root of the repository.
//
// ISOLATED PATH: tricium/data/files.json
type Data_Files struct {
	// Path to files from the root of the isolated input.
	Path []string `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
}

func (m *Data_Files) Reset()                    { *m = Data_Files{} }
func (m *Data_Files) String() string            { return proto.CompactTextString(m) }
func (*Data_Files) ProtoMessage()               {}
func (*Data_Files) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

func (m *Data_Files) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

// Details needed to replay a clang compilation.
//
// Any included path should correspond to a file in the isolated input.
//
// ISOLATED PATH: tricium/data/clang_details.json
type Data_ClangDetails struct {
	// Path to the compilation database. Typically, in the build root.
	CompilationDb string `protobuf:"bytes,1,opt,name=compilation_db,json=compilationDb" json:"compilation_db,omitempty"`
	// Paths to files needed to compile cpp files to analyze.
	CompDepPath []string `protobuf:"bytes,2,rep,name=comp_dep_path,json=compDepPath" json:"comp_dep_path,omitempty"`
}

func (m *Data_ClangDetails) Reset()                    { *m = Data_ClangDetails{} }
func (m *Data_ClangDetails) String() string            { return proto.CompactTextString(m) }
func (*Data_ClangDetails) ProtoMessage()               {}
func (*Data_ClangDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

func (m *Data_ClangDetails) GetCompilationDb() string {
	if m != nil {
		return m.CompilationDb
	}
	return ""
}

func (m *Data_ClangDetails) GetCompDepPath() []string {
	if m != nil {
		return m.CompDepPath
	}
	return nil
}

// Results from running a Tricium analyzer.
//
// Results are returned to the Tricium service via isolated output from
// swarming tasks executing Tricium workers.
//
// ISOLATED PATH: tricium/data/results.json
type Data_Results struct {
	// Zero or more results found as comments, either inline comments or change
	// comments (comments without line positions).
	Comment []*Data_Comment `protobuf:"bytes,1,rep,name=comment" json:"comment,omitempty"`
}

func (m *Data_Results) Reset()                    { *m = Data_Results{} }
func (m *Data_Results) String() string            { return proto.CompactTextString(m) }
func (*Data_Results) ProtoMessage()               {}
func (*Data_Results) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 3} }

func (m *Data_Results) GetComment() []*Data_Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

// Results.Comment, results as comments.
//
// Similar content as that needed to provide robot comments in Gerrit,
// go/robot-comments-in-gerrit.
type Data_Comment struct {
	// Category of the result, encoded as a path with the analyzer name as the
	// root, annotated with the platform, followed by an arbitrary number of
	// subcategories, e.g., ‘ClangTidy_${platform}/llvm-header-guard’.
	Category string `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	// Comment message.  This should be a short message suitable as a code
	// review comment.
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// URL to more information.  Use this field to keep the message of the
	// comment short.
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// Path to the file this comment is for.
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// Position information. This information can be left out if the comment
	// is on file level.  If position is given, then at least the start line
	// should be included.
	StartLine int32 `protobuf:"varint,5,opt,name=start_line,json=startLine" json:"start_line,omitempty"`
	EndLine   int32 `protobuf:"varint,6,opt,name=end_line,json=endLine" json:"end_line,omitempty"`
	StartChar int32 `protobuf:"varint,7,opt,name=start_char,json=startChar" json:"start_char,omitempty"`
	EndChar   int32 `protobuf:"varint,8,opt,name=end_char,json=endChar" json:"end_char,omitempty"`
	// Suggested fixes for the identified issue.
	Suggestion []*Data_Suggestion `protobuf:"bytes,9,rep,name=suggestion" json:"suggestion,omitempty"`
}

func (m *Data_Comment) Reset()                    { *m = Data_Comment{} }
func (m *Data_Comment) String() string            { return proto.CompactTextString(m) }
func (*Data_Comment) ProtoMessage()               {}
func (*Data_Comment) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 4} }

func (m *Data_Comment) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Data_Comment) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Data_Comment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Data_Comment) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Data_Comment) GetStartLine() int32 {
	if m != nil {
		return m.StartLine
	}
	return 0
}

func (m *Data_Comment) GetEndLine() int32 {
	if m != nil {
		return m.EndLine
	}
	return 0
}

func (m *Data_Comment) GetStartChar() int32 {
	if m != nil {
		return m.StartChar
	}
	return 0
}

func (m *Data_Comment) GetEndChar() int32 {
	if m != nil {
		return m.EndChar
	}
	return 0
}

func (m *Data_Comment) GetSuggestion() []*Data_Suggestion {
	if m != nil {
		return m.Suggestion
	}
	return nil
}

// Suggested fix.
//
// A fix may include replacements in any file in the same repo as the file of
// the corresponding comment.
type Data_Suggestion struct {
	// A brief description of the suggested fix.
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// Fix as a list of replacements.
	Replacement []*Data_Replacement `protobuf:"bytes,2,rep,name=replacement" json:"replacement,omitempty"`
}

func (m *Data_Suggestion) Reset()                    { *m = Data_Suggestion{} }
func (m *Data_Suggestion) String() string            { return proto.CompactTextString(m) }
func (*Data_Suggestion) ProtoMessage()               {}
func (*Data_Suggestion) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 5} }

func (m *Data_Suggestion) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Data_Suggestion) GetReplacement() []*Data_Replacement {
	if m != nil {
		return m.Replacement
	}
	return nil
}

// A suggested replacement.
//
// The replacement should be for one continuous section of a file.
type Data_Replacement struct {
	// Path to file for this replacement.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// A replacement string.
	Replacement string `protobuf:"bytes,2,opt,name=replacement" json:"replacement,omitempty"`
	// A continuous section of the file to replace.
	StartLine int32 `protobuf:"varint,3,opt,name=start_line,json=startLine" json:"start_line,omitempty"`
	EndLine   int32 `protobuf:"varint,4,opt,name=end_line,json=endLine" json:"end_line,omitempty"`
	StartChar int32 `protobuf:"varint,5,opt,name=start_char,json=startChar" json:"start_char,omitempty"`
	EndChar   int32 `protobuf:"varint,6,opt,name=end_char,json=endChar" json:"end_char,omitempty"`
}

func (m *Data_Replacement) Reset()                    { *m = Data_Replacement{} }
func (m *Data_Replacement) String() string            { return proto.CompactTextString(m) }
func (*Data_Replacement) ProtoMessage()               {}
func (*Data_Replacement) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 6} }

func (m *Data_Replacement) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Data_Replacement) GetReplacement() string {
	if m != nil {
		return m.Replacement
	}
	return ""
}

func (m *Data_Replacement) GetStartLine() int32 {
	if m != nil {
		return m.StartLine
	}
	return 0
}

func (m *Data_Replacement) GetEndLine() int32 {
	if m != nil {
		return m.EndLine
	}
	return 0
}

func (m *Data_Replacement) GetStartChar() int32 {
	if m != nil {
		return m.StartChar
	}
	return 0
}

func (m *Data_Replacement) GetEndChar() int32 {
	if m != nil {
		return m.EndChar
	}
	return 0
}

func init() {
	proto.RegisterType((*Data)(nil), "tricium.Data")
	proto.RegisterType((*Data_GitFileDetails)(nil), "tricium.Data.GitFileDetails")
	proto.RegisterType((*Data_Files)(nil), "tricium.Data.Files")
	proto.RegisterType((*Data_ClangDetails)(nil), "tricium.Data.ClangDetails")
	proto.RegisterType((*Data_Results)(nil), "tricium.Data.Results")
	proto.RegisterType((*Data_Comment)(nil), "tricium.Data.Comment")
	proto.RegisterType((*Data_Suggestion)(nil), "tricium.Data.Suggestion")
	proto.RegisterType((*Data_Replacement)(nil), "tricium.Data.Replacement")
	proto.RegisterEnum("tricium.Data_Type", Data_Type_name, Data_Type_value)
}

func init() { proto.RegisterFile("infra/tricium/api/v1/data.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x8e, 0xd2, 0x40,
	0x14, 0x87, 0x2d, 0x2d, 0x14, 0x4e, 0xdd, 0x4d, 0x9d, 0x68, 0xd2, 0xad, 0x51, 0x09, 0x89, 0x09,
	0x57, 0x10, 0xf5, 0xc6, 0xe8, 0xd5, 0x06, 0x58, 0x42, 0x42, 0x50, 0x0b, 0x9a, 0x78, 0xd5, 0x0c,
	0xed, 0x59, 0x98, 0x58, 0xda, 0xc9, 0xcc, 0x60, 0xb2, 0xcf, 0xe1, 0x1b, 0xf8, 0x12, 0xbe, 0x9e,
	0xe9, 0x50, 0xca, 0xb0, 0x17, 0xdc, 0xcd, 0xfc, 0xbe, 0xf3, 0x87, 0xf9, 0x42, 0xe1, 0x0d, 0xcb,
	0xef, 0x05, 0x1d, 0x2a, 0xc1, 0x12, 0xb6, 0xdf, 0x0d, 0x29, 0x67, 0xc3, 0xdf, 0xef, 0x86, 0x29,
	0x55, 0x74, 0xc0, 0x45, 0xa1, 0x0a, 0xe2, 0x56, 0xa8, 0xf7, 0xd7, 0x05, 0x67, 0x4c, 0x15, 0x0d,
	0x7f, 0xc0, 0xf5, 0x94, 0xa9, 0x3b, 0x96, 0xe1, 0x18, 0x15, 0x65, 0x99, 0x24, 0xaf, 0x01, 0x04,
	0xf2, 0x42, 0x32, 0x55, 0x88, 0x87, 0xc0, 0xea, 0x5a, 0xfd, 0x4e, 0x64, 0x24, 0xc4, 0x07, 0x5b,
	0xe0, 0x7d, 0xd0, 0xd0, 0xa0, 0x3c, 0x12, 0x02, 0x0e, 0xa7, 0x6a, 0x1b, 0xd8, 0x5d, 0xbb, 0xdf,
	0x89, 0xf4, 0x39, 0x7c, 0x09, 0xcd, 0x72, 0xa8, 0xac, 0xa1, 0x65, 0xc0, 0x9f, 0xf0, 0x74, 0x94,
	0xd1, 0x7c, 0x73, 0x5c, 0xf9, 0x16, 0xae, 0x93, 0x62, 0xc7, 0x59, 0x46, 0x15, 0x2b, 0xf2, 0x38,
	0x5d, 0x57, 0x6b, 0xaf, 0x8c, 0x74, 0xbc, 0x26, 0x3d, 0xd0, 0x41, 0x9c, 0x22, 0x8f, 0xf5, 0xcc,
	0x86, 0x9e, 0xe9, 0x95, 0xe1, 0x18, 0xf9, 0xd7, 0x72, 0xf4, 0x27, 0x70, 0x23, 0x94, 0xfb, 0x4c,
	0x49, 0x32, 0x04, 0x37, 0x29, 0x76, 0x3b, 0xcc, 0x95, 0x5e, 0xee, 0xbd, 0x7f, 0x31, 0xa8, 0x9e,
	0x3f, 0x28, 0x9f, 0x3e, 0x18, 0x1d, 0x60, 0x74, 0xac, 0x0a, 0xff, 0x34, 0xc0, 0xad, 0x42, 0x12,
	0x42, 0x3b, 0xa1, 0x0a, 0x37, 0x27, 0x07, 0xf5, 0x9d, 0x04, 0xe0, 0xee, 0x50, 0x4a, 0xba, 0xc1,
	0xca, 0xc2, 0xf1, 0x5a, 0xba, 0xd9, 0x8b, 0x2c, 0xb0, 0x0f, 0x6e, 0xf6, 0x22, 0xab, 0x9f, 0xef,
	0xe8, 0x48, 0x9f, 0xc9, 0x2b, 0x00, 0xa9, 0xa8, 0x50, 0x71, 0xc6, 0x72, 0x0c, 0x9a, 0x5d, 0xab,
	0xdf, 0x8c, 0x3a, 0x3a, 0x99, 0xb3, 0x1c, 0xc9, 0x0d, 0xb4, 0x31, 0x4f, 0x0f, 0xb0, 0xa5, 0xa1,
	0x8b, 0x79, 0xaa, 0x51, 0xdd, 0x99, 0x6c, 0xa9, 0x08, 0x5c, 0xa3, 0x73, 0xb4, 0xa5, 0xe2, 0xd8,
	0xa9, 0x61, 0xbb, 0xee, 0xd4, 0xe8, 0x23, 0x80, 0xdc, 0x6f, 0x36, 0x28, 0x4b, 0x97, 0x41, 0x47,
	0xfb, 0x08, 0xce, 0x7d, 0x2c, 0x6b, 0x1e, 0x19, 0xb5, 0xe1, 0x2f, 0x80, 0x13, 0x21, 0x5d, 0xf0,
	0x52, 0x94, 0x89, 0x60, 0x5c, 0x0f, 0x3a, 0xa8, 0x31, 0x23, 0xf2, 0x19, 0x3c, 0x81, 0x3c, 0xa3,
	0x09, 0x6a, 0xf5, 0x0d, 0xbd, 0xea, 0xe6, 0x7c, 0x55, 0x74, 0x2a, 0x88, 0xcc, 0xea, 0xf0, 0x9f,
	0x05, 0x9e, 0x01, 0x8d, 0x7f, 0xcf, 0x49, 0x5f, 0xf7, 0xf1, 0x02, 0xfd, 0x13, 0x8c, 0xe8, 0x91,
	0x60, 0xfb, 0x92, 0x60, 0xe7, 0x92, 0xe0, 0xe6, 0x25, 0xc1, 0xad, 0x33, 0xc1, 0xbd, 0x6f, 0xe0,
	0xac, 0x1e, 0x38, 0x92, 0x36, 0x38, 0x8b, 0x2f, 0x8b, 0x89, 0xff, 0x84, 0x3c, 0x07, 0x7f, 0x3a,
	0x5b, 0xc5, 0x77, 0xb3, 0xf9, 0x24, 0x1e, 0x4f, 0x56, 0xb7, 0xb3, 0xf9, 0xd2, 0xb7, 0x48, 0x07,
	0x9a, 0x65, 0xb2, 0xf4, 0x1b, 0xe4, 0x19, 0x5c, 0x8d, 0xe6, 0xb7, 0x8b, 0x69, 0x4d, 0x6d, 0xe2,
	0x81, 0x1b, 0x4d, 0x96, 0xdf, 0xe7, 0xab, 0xa5, 0xef, 0xac, 0x5b, 0xfa, 0xa3, 0xfd, 0xf0, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x40, 0x33, 0x1e, 0x43, 0xd7, 0x03, 0x00, 0x00,
}
