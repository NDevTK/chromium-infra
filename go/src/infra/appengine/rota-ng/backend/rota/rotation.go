// Package rota handles the scheduling of oncall rotations.
package rota

import (
	"encoding/json"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

var mtvMidnight = func() time.Time {
	t, err := time.Parse(time.RFC822, "02 Jan 06 00:00 PDT")
	if err != nil {
		panic(err)
	}
	return t
}()

// JSONRota is used to convert the legacy JSON based sheriff rotation configuration.
type JSONRota struct {
	Configuration JSONConfiguration `json:"rotation_config"`
	PSTRotation   Members           `json:"rotation_list_pacific"`
	EURotation    Members           `json:"rotation_list_default"`
	OtherRotation Members           `json:"rotation_list_other"`
}

// JSONMultiConfigRota is used to convert the legacy JSON based sheriff rotation configuration.
type JSONMultiConfigRota struct {
	Configuration []JSONConfiguration `json:"rotation_config"`
	PSTRotation   Members             `json:"rotation_list_pacific"`
	EURotation    Members             `json:"rotation_list_default"`
}

// JSONConfiguration contains the configuration part of the rotation.
type JSONConfiguration struct {
	Description          string   `json:"event_description"`
	Rotation             string   `json:"event_title"`
	Calendar             string   `json:"calendar_name"`
	EmailBody            string   `json:"reminder_email_body"`
	EmailSubject         string   `json:"reminder_email_subject"`
	Owners               []string `json:"owners"`
	EmailDaysInAdvance   int      `json:"reminder_email_advance_days"`
	ExpirationThreshold  int      `json:"expiration_threshold"`
	OncallersPerRotation int      `json:"people_per_rotation"`
	RotationLength       int      `json:"rotation_length"`
}

// Configuration represents a rota configuration.
type Configuration struct {
	Config   Config
	Rotation Members
}

// Config contains the rota configuration.
type Config struct {
	Name           string
	Description    string
	Calendar       string
	Owners         []string
	Email          Email
	DaysToSchedule int
	Shifts         ShiftConfig
	Expiration     int
}

// ShiftConfig represents the duration of a shift
type ShiftConfig struct {
	// StartTime represents the start-time of the first shift.
	// Only the Time of day is considered.
	// Defaults to 00:00 PDT.
	StartTime time.Time
	// Length sets the number of days a shift lasts.
	Length int
	// Skip defines a number of days with no oncalls.
	Skip int
	// Shifts represents the shifts over a 24hour period.
	Shifts []Shift
	// ShiftMembers specifides number of members per shift.
	ShiftMembers int
}

// Shift represents a shift in a 24h rotation.
type Shift struct {
	// Name of the shift - Eg. "MTV Shift"
	Name string
	// Duration is the duration of the shift.
	Duration time.Duration
}

// ShiftEntry represents one shift.
type ShiftEntry struct {
	// Idx in the ShiftConfig this entry belongs to.
	Idx int
	// OnAll are the members on-call for this shift.
	OnCall    []Member
	StartTime time.Time
	EndTime   time.Time
	// Comment is an optional comment where the rota algo
	// can add some extra information.
	Comment string
}

// Email contains the Subject and Body templates for email generated by the rota.
type Email struct {
	// Subject is a string used as a template run against the Member structure to generate the e-mail Subject
	//  text.
	Subject string
	// Body is a string used as a template run againste the Member structure to generate the e-mail Body.
	Body string
	// DaysBeforeWarn sets the number of days before an ocall shift the notification e-mail is sent.
	DaysBeforeNotify int
}

// Members contains the members of the rotation.
type Members struct {
	Members []Member `json:"person"`
}

// Member represents one member of a rotation.
type Member struct {
	Name        string `json:"full_name"`
	Email       string `json:"email_address"`
	TZ          time.Location
	OOO         []OOO
	Preferences []Preference
	ShiftIdx    int
}

// OOO contains one Out-of-Office event.
type OOO struct {
	Start    time.Time
	Duration time.Duration
	Comment  string
}

// Preference is used for Members to signal shift preferences.
type Preference int

// Possible preferences for a Member.
const (
	NoPreferences Preference = iota
	NoWeekends
	NoMonday
	NoTuesday
	NoWednesday
	NoThursday
	NoFriday
	NoSaturday
	NoSunday
	NoOncall
)

const (
	defaultDaysToSchedule = 10
	pacificTZ             = "US/Pacific"
	euTZ                  = "UTC"
)

func handleJSON(data []byte) (*JSONRota, error) {
	var jsonRota JSONRota
	if err := json.Unmarshal(data, &jsonRota); err != nil {
		var multiConf JSONMultiConfigRota
		// Turns out some of the configurations contains a list of configurations [ ] while most
		//  contain a single config. The Go JSON encoder gets a bit stressed out by this so here we
		//  retry the encode into a slice of configs incase the one with just one configuration fails.
		if err := json.Unmarshal(data, &multiConf); err != nil {
			return nil, err
		}
		if len(multiConf.Configuration) != 1 {
			return nil, status.Errorf(codes.Unimplemented, "support for multiple configurations not implemented")
		}
		jsonRota.Configuration = multiConf.Configuration[0]
		jsonRota.PSTRotation = multiConf.PSTRotation
		jsonRota.EURotation = multiConf.EURotation
	}
	return &jsonRota, nil
}

// BuildConfigurationFromJSON converts the Sheriff json configuration
//  to the native rota configuration.
func BuildConfigurationFromJSON(data []byte) (*Configuration, error) {
	jsonRota, err := handleJSON(data)
	if err != nil {
		return nil, err
	}

	usLocation, err := time.LoadLocation(pacificTZ)
	if err != nil {
		return nil, err
	}
	euLocation, err := time.LoadLocation(euTZ)
	if err != nil {
		return nil, err
	}

	var mbs Members
	for _, m := range jsonRota.PSTRotation.Members {
		mbs.Members = append(mbs.Members, Member{
			Name:  m.Name,
			Email: m.Email,
			TZ:    *usLocation,
		})
	}
	for _, m := range append(jsonRota.EURotation.Members, jsonRota.OtherRotation.Members...) {
		mbs.Members = append(mbs.Members, Member{
			Name:  m.Name,
			Email: m.Email,
			TZ:    *euLocation,
		})
	}

	return &Configuration{
		Config: Config{
			Name:        jsonRota.Configuration.Rotation,
			Description: jsonRota.Configuration.Description,
			Calendar:    jsonRota.Configuration.Calendar,
			Expiration:  jsonRota.Configuration.ExpirationThreshold,
			Owners:      jsonRota.Configuration.Owners,
			Email: Email{
				Subject:          jsonRota.Configuration.EmailSubject,
				Body:             jsonRota.Configuration.EmailBody,
				DaysBeforeNotify: jsonRota.Configuration.EmailDaysInAdvance,
			},
			DaysToSchedule: defaultDaysToSchedule,
			Shifts: ShiftConfig{
				StartTime:    mtvMidnight,
				ShiftMembers: jsonRota.Configuration.OncallersPerRotation,
				Length:       jsonRota.Configuration.RotationLength,
				Shifts: []Shift{
					{
						Name:     "MTV all day",
						Duration: time.Duration(24 * time.Hour),
					},
				},
			},
		},
		Rotation: mbs,
	}, nil
}
