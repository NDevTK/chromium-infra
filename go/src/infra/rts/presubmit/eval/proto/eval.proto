// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package chrome.rts.presubmit.eval;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "infra/rts/presubmit/eval/proto;evalpb";

// A rejection of a code change due to test failures.
message Rejection {
  // The rejected patchsets.
  repeated GerritPatchset patchsets = 1;

  // When the code change was rejected.
  google.protobuf.Timestamp timestamp = 2;

  // List of test variants that caused the rejection.
  repeated TestVariant failed_test_variants = 3;
}

// One part of a split Rejection message.
//
// Multiple fragments are combined with proto.Merge() called on their
// "rejection" fields. Note that repeated fields are concatenated.
message RejectionFragment {
  // Rejection data in this fragment.
  // May be unset, e.g. if this is a terminal fragment.
  Rejection rejection = 1;

  // True if this is the last fragment of the Rejection in a sequence of
  // fragments. All fragments of the same rejection must be contiguous.
  //
  // Note that the following sequence of Records is valid:
  //  fragment for rejection R1
  //  test duration
  //  fragment for rejection R1, terminal
  //  fragment for rejection R2
  // Here there is a test duration record between rejection fragments.
  bool terminal = 2;
}

// How long a test took.
message TestDuration {
  // The patchsets that were tested.
  repeated GerritPatchset patchsets = 1;

  // The test variant that was measured.
  TestVariant test_variant = 2;

  // How long test execution took.
  google.protobuf.Duration duration = 3;
}

// A Gerrit CL.
message GerritChange {
  // Gerrit host, e.g. "chromium-review.googlesource.com".
  string host = 1;

  // Gerrit project, e.g. "chromium/src".
  // It is required.
  string project = 2;

  // Change number,
  // e.g. 123 for https://chromium.googlesource.com/c/123
  int64 number = 3;
}

// A Gerrit patchset.
message GerritPatchset {
  // The CL.
  GerritChange change = 1;

  // The patchset number.
  int64 patchset = 2;

  // The files changed in the patchset.
  repeated SourceFile changed_files = 3;
}

// Identifies a source file.
message SourceFile {
	// The repository identifier.
	// For googlesource.com repositories, it is a canonical URL, e.g.
	// https://chromium.googlesource.com/chromium/src
	string repo = 1;

	// The file relative to the repo root. Starts with "//".
	string path = 2;
}

// A single way to run a single test.
// For example, a particular test case on Windows 10.
message TestVariant {
  // Test identifier.
  // For Chromium, a ResultDB TestID.
  string id = 1;

  // One particular way to run this test, expressed as domain-specific key-value
  // pairs.
  // For Chromium, this is a ResultDB test variant.
  map<string, string> variant = 2;

  // Path of the file where the test is defined.
  string file_name = 3;
}

// One historical record.
// Used for streaming messages above.
message Record {
  oneof data {
    // A code change rejection due to test failures.
    RejectionFragment rejection_fragment = 1;

    // A record of test duration.
    TestDuration test_duration = 2;
  }
}
