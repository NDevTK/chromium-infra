// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/admin/v1/reporter.proto

package admin

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReportLaunchedRequest struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *ReportLaunchedRequest) Reset()                    { *m = ReportLaunchedRequest{} }
func (m *ReportLaunchedRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportLaunchedRequest) ProtoMessage()               {}
func (*ReportLaunchedRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ReportLaunchedRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

type ReportLaunchedResponse struct {
}

func (m *ReportLaunchedResponse) Reset()                    { *m = ReportLaunchedResponse{} }
func (m *ReportLaunchedResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportLaunchedResponse) ProtoMessage()               {}
func (*ReportLaunchedResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type ReportCompletedRequest struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *ReportCompletedRequest) Reset()                    { *m = ReportCompletedRequest{} }
func (m *ReportCompletedRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportCompletedRequest) ProtoMessage()               {}
func (*ReportCompletedRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ReportCompletedRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

type ReportCompletedResponse struct {
}

func (m *ReportCompletedResponse) Reset()                    { *m = ReportCompletedResponse{} }
func (m *ReportCompletedResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportCompletedResponse) ProtoMessage()               {}
func (*ReportCompletedResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type ReportResultsRequest struct {
	RunId    int64  `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	Analyzer string `protobuf:"bytes,2,opt,name=analyzer" json:"analyzer,omitempty"`
}

func (m *ReportResultsRequest) Reset()                    { *m = ReportResultsRequest{} }
func (m *ReportResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportResultsRequest) ProtoMessage()               {}
func (*ReportResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ReportResultsRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *ReportResultsRequest) GetAnalyzer() string {
	if m != nil {
		return m.Analyzer
	}
	return ""
}

type ReportResultsResponse struct {
}

func (m *ReportResultsResponse) Reset()                    { *m = ReportResultsResponse{} }
func (m *ReportResultsResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResultsResponse) ProtoMessage()               {}
func (*ReportResultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func init() {
	proto.RegisterType((*ReportLaunchedRequest)(nil), "admin.ReportLaunchedRequest")
	proto.RegisterType((*ReportLaunchedResponse)(nil), "admin.ReportLaunchedResponse")
	proto.RegisterType((*ReportCompletedRequest)(nil), "admin.ReportCompletedRequest")
	proto.RegisterType((*ReportCompletedResponse)(nil), "admin.ReportCompletedResponse")
	proto.RegisterType((*ReportResultsRequest)(nil), "admin.ReportResultsRequest")
	proto.RegisterType((*ReportResultsResponse)(nil), "admin.ReportResultsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reporter service

type ReporterClient interface {
	// ReportLaunch reports that Tricium has launched a workflow.
	ReportLaunched(ctx context.Context, in *ReportLaunchedRequest, opts ...grpc.CallOption) (*ReportLaunchedResponse, error)
	// ReportCompleted reports that a Tricium workflow has completed.
	ReportCompleted(ctx context.Context, in *ReportCompletedRequest, opts ...grpc.CallOption) (*ReportCompletedResponse, error)
	// ReportResults reports Tricium results.
	ReportResults(ctx context.Context, in *ReportResultsRequest, opts ...grpc.CallOption) (*ReportResultsResponse, error)
}
type reporterPRPCClient struct {
	client *prpc.Client
}

func NewReporterPRPCClient(client *prpc.Client) ReporterClient {
	return &reporterPRPCClient{client}
}

func (c *reporterPRPCClient) ReportLaunched(ctx context.Context, in *ReportLaunchedRequest, opts ...grpc.CallOption) (*ReportLaunchedResponse, error) {
	out := new(ReportLaunchedResponse)
	err := c.client.Call(ctx, "admin.Reporter", "ReportLaunched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterPRPCClient) ReportCompleted(ctx context.Context, in *ReportCompletedRequest, opts ...grpc.CallOption) (*ReportCompletedResponse, error) {
	out := new(ReportCompletedResponse)
	err := c.client.Call(ctx, "admin.Reporter", "ReportCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterPRPCClient) ReportResults(ctx context.Context, in *ReportResultsRequest, opts ...grpc.CallOption) (*ReportResultsResponse, error) {
	out := new(ReportResultsResponse)
	err := c.client.Call(ctx, "admin.Reporter", "ReportResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type reporterClient struct {
	cc *grpc.ClientConn
}

func NewReporterClient(cc *grpc.ClientConn) ReporterClient {
	return &reporterClient{cc}
}

func (c *reporterClient) ReportLaunched(ctx context.Context, in *ReportLaunchedRequest, opts ...grpc.CallOption) (*ReportLaunchedResponse, error) {
	out := new(ReportLaunchedResponse)
	err := grpc.Invoke(ctx, "/admin.Reporter/ReportLaunched", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) ReportCompleted(ctx context.Context, in *ReportCompletedRequest, opts ...grpc.CallOption) (*ReportCompletedResponse, error) {
	out := new(ReportCompletedResponse)
	err := grpc.Invoke(ctx, "/admin.Reporter/ReportCompleted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) ReportResults(ctx context.Context, in *ReportResultsRequest, opts ...grpc.CallOption) (*ReportResultsResponse, error) {
	out := new(ReportResultsResponse)
	err := grpc.Invoke(ctx, "/admin.Reporter/ReportResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reporter service

type ReporterServer interface {
	// ReportLaunch reports that Tricium has launched a workflow.
	ReportLaunched(context.Context, *ReportLaunchedRequest) (*ReportLaunchedResponse, error)
	// ReportCompleted reports that a Tricium workflow has completed.
	ReportCompleted(context.Context, *ReportCompletedRequest) (*ReportCompletedResponse, error)
	// ReportResults reports Tricium results.
	ReportResults(context.Context, *ReportResultsRequest) (*ReportResultsResponse, error)
}

func RegisterReporterServer(s prpc.Registrar, srv ReporterServer) {
	s.RegisterService(&_Reporter_serviceDesc, srv)
}

func _Reporter_ReportLaunched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportLaunchedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).ReportLaunched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Reporter/ReportLaunched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).ReportLaunched(ctx, req.(*ReportLaunchedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_ReportCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).ReportCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Reporter/ReportCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).ReportCompleted(ctx, req.(*ReportCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_ReportResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).ReportResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Reporter/ReportResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).ReportResults(ctx, req.(*ReportResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Reporter",
	HandlerType: (*ReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportLaunched",
			Handler:    _Reporter_ReportLaunched_Handler,
		},
		{
			MethodName: "ReportCompleted",
			Handler:    _Reporter_ReportCompleted_Handler,
		},
		{
			MethodName: "ReportResults",
			Handler:    _Reporter_ReportResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/reporter.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/reporter.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xa9, 0xb2, 0x31, 0x0f, 0xa8, 0x10, 0x9c, 0xab, 0x75, 0xca, 0xe8, 0xd5, 0xbc, 0x69,
	0x50, 0x1f, 0xc1, 0xab, 0x89, 0x82, 0xe4, 0x05, 0x24, 0xae, 0x47, 0x0c, 0xb4, 0x49, 0x3c, 0x49,
	0x04, 0x7d, 0x71, 0x6f, 0x85, 0xb6, 0x1b, 0xa4, 0xae, 0x7a, 0x19, 0xbe, 0xfc, 0x5f, 0xf8, 0x7f,
	0x02, 0x57, 0x4a, 0xbf, 0x92, 0xe4, 0x9e, 0xd4, 0x5a, 0x85, 0x9a, 0x4b, 0xab, 0xb8, 0x2c, 0x6b,
	0xa5, 0xf9, 0xc7, 0x35, 0x27, 0xb4, 0x86, 0x3c, 0x52, 0x61, 0xc9, 0x78, 0xc3, 0x46, 0x0d, 0xc8,
	0x0b, 0x98, 0x8a, 0x06, 0x3c, 0xc8, 0xa0, 0xd7, 0x6f, 0x58, 0x0a, 0x7c, 0x0f, 0xe8, 0x3c, 0x9b,
	0xc2, 0x98, 0x82, 0x7e, 0x56, 0x65, 0x9a, 0x2c, 0x92, 0xe5, 0xbe, 0x18, 0x51, 0xd0, 0xab, 0x32,
	0x4f, 0xe1, 0xb4, 0x7f, 0xdf, 0x59, 0xa3, 0x1d, 0xe6, 0x7c, 0x43, 0xee, 0x4c, 0x6d, 0x2b, 0xf4,
	0xff, 0xaa, 0xce, 0x60, 0xf6, 0x2b, 0xd0, 0xb9, 0x56, 0x70, 0xd2, 0x22, 0x81, 0x2e, 0x54, 0xde,
	0xfd, 0x6d, 0x62, 0x19, 0x4c, 0xa4, 0x96, 0xd5, 0xe7, 0x17, 0x52, 0xba, 0xb7, 0x48, 0x96, 0x07,
	0x62, 0x7b, 0xce, 0x67, 0x9b, 0x82, 0x5b, 0x55, 0xfb, 0xc6, 0xcd, 0x77, 0x02, 0x13, 0xd1, 0x6d,
	0xc2, 0x1e, 0xe1, 0x28, 0xae, 0xc5, 0xe6, 0x45, 0x33, 0x50, 0xb1, 0x73, 0x9d, 0xec, 0x62, 0x80,
	0xb6, 0x6e, 0xf6, 0x04, 0xc7, 0xbd, 0x6a, 0x2c, 0x4e, 0xf4, 0x37, 0xca, 0x2e, 0x87, 0x70, 0x67,
	0xbc, 0x87, 0xc3, 0xa8, 0x06, 0x3b, 0x8f, 0x02, 0xf1, 0x4e, 0xd9, 0x7c, 0x37, 0x6c, 0x5d, 0x2f,
	0xe3, 0xe6, 0x07, 0xdc, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x8d, 0xc8, 0xb2, 0x2e, 0x02,
	0x00, 0x00,
}
