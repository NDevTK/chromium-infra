// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package repoimport is a generated GoMock package.
package repoimport

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "infra/appengine/cr-rev/common"
	reflect "reflect"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockController) Index(repo common.GitRepository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Index", repo)
}

// Index indicates an expected call of Index.
func (mr *MockControllerMockRecorder) Index(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockController)(nil).Index), repo)
}

// Start mocks base method.
func (m *MockController) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockControllerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockController)(nil).Start), ctx)
}
