// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/admin/v1/workflow.proto

package admin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tricium2 "infra/tricium/api/v1"
import tricium "infra/tricium/api/v1"
import tricium1 "infra/tricium/api/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Tricium workflow configuration.
//
// Workflow configurations are typically generated from a Tricium configuration.
type Workflow struct {
	ServiceAccount string    `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount" json:"service_account,omitempty"`
	Workers        []*Worker `protobuf:"bytes,2,rep,name=workers" json:"workers,omitempty"`
	SwarmingServer string    `protobuf:"bytes,3,opt,name=swarming_server,json=swarmingServer" json:"swarming_server,omitempty"`
	IsolateServer  string    `protobuf:"bytes,4,opt,name=isolate_server,json=isolateServer" json:"isolate_server,omitempty"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Workflow) GetServiceAccount() string {
	if m != nil {
		return m.ServiceAccount
	}
	return ""
}

func (m *Workflow) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *Workflow) GetSwarmingServer() string {
	if m != nil {
		return m.SwarmingServer
	}
	return ""
}

func (m *Workflow) GetIsolateServer() string {
	if m != nil {
		return m.IsolateServer
	}
	return ""
}

// A Tricium worker includes the details needed to execute an analyzer on a
// specific platform as swarming task.
type Worker struct {
	// Name of worker is a mangled name from the analyzer name and the platform
	// for which results are provided for, e.g, ‘GitFileIsolator_LINUX’.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Includes data dependencies for runtime type checking.
	// Platform-specific details are provided when required by the corresponding
	// data type.
	Needs               tricium.Data_Type      `protobuf:"varint,2,opt,name=needs,enum=tricium.Data_Type" json:"needs,omitempty"`
	NeedsForPlatform    tricium1.Platform_Name `protobuf:"varint,3,opt,name=needs_for_platform,json=needsForPlatform,enum=tricium.Platform_Name" json:"needs_for_platform,omitempty"`
	Provides            tricium.Data_Type      `protobuf:"varint,4,opt,name=provides,enum=tricium.Data_Type" json:"provides,omitempty"`
	ProvidesForPlatform tricium1.Platform_Name `protobuf:"varint,5,opt,name=provides_for_platform,json=providesForPlatform,enum=tricium.Platform_Name" json:"provides_for_platform,omitempty"`
	// Workers to run after this one.
	Next []string `protobuf:"bytes,6,rep,name=next" json:"next,omitempty"`
	// Name of the runtime platform configuration.
	RuntimePlatform tricium1.Platform_Name `protobuf:"varint,7,opt,name=runtime_platform,json=runtimePlatform,enum=tricium.Platform_Name" json:"runtime_platform,omitempty"`
	// Swarming dimensions for execution of the worker. These should be on the
	// form "key:value", using keys and values known to the swarming service.
	Dimensions []string `protobuf:"bytes,8,rep,name=dimensions" json:"dimensions,omitempty"`
	// List of cipd packages needed on the swarming task use to execute the
	// worker.
	CipdPackages []*tricium2.CipdPackage `protobuf:"bytes,9,rep,name=cipd_packages,json=cipdPackages" json:"cipd_packages,omitempty"`
	// Command use to execute the worker.
	Cmd *tricium2.Cmd `protobuf:"bytes,10,opt,name=cmd" json:"cmd,omitempty"`
	// Deadline for execution of the worker in minutes.  Note that this time
	// should include the overhead of triggering the corresponding swarming task
	// and to collect result from it.
	Deadline int32 `protobuf:"varint,11,opt,name=deadline" json:"deadline,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Worker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Worker) GetNeeds() tricium.Data_Type {
	if m != nil {
		return m.Needs
	}
	return tricium.Data_NONE
}

func (m *Worker) GetNeedsForPlatform() tricium1.Platform_Name {
	if m != nil {
		return m.NeedsForPlatform
	}
	return tricium1.Platform_ANY
}

func (m *Worker) GetProvides() tricium.Data_Type {
	if m != nil {
		return m.Provides
	}
	return tricium.Data_NONE
}

func (m *Worker) GetProvidesForPlatform() tricium1.Platform_Name {
	if m != nil {
		return m.ProvidesForPlatform
	}
	return tricium1.Platform_ANY
}

func (m *Worker) GetNext() []string {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *Worker) GetRuntimePlatform() tricium1.Platform_Name {
	if m != nil {
		return m.RuntimePlatform
	}
	return tricium1.Platform_ANY
}

func (m *Worker) GetDimensions() []string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Worker) GetCipdPackages() []*tricium2.CipdPackage {
	if m != nil {
		return m.CipdPackages
	}
	return nil
}

func (m *Worker) GetCmd() *tricium2.Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Worker) GetDeadline() int32 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func init() {
	proto.RegisterType((*Workflow)(nil), "admin.Workflow")
	proto.RegisterType((*Worker)(nil), "admin.Worker")
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/workflow.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x3f, 0x6f, 0xdb, 0x30,
	0x10, 0xc5, 0xa1, 0x2a, 0x76, 0x9c, 0x73, 0xec, 0x04, 0xec, 0x1f, 0x08, 0x1e, 0x52, 0x35, 0x45,
	0x11, 0x75, 0x91, 0x10, 0x77, 0xea, 0x18, 0x34, 0xe8, 0xd0, 0xa1, 0x08, 0xd4, 0x02, 0x19, 0x05,
	0x96, 0x3c, 0x19, 0x44, 0x4c, 0x52, 0xa0, 0x68, 0x39, 0xfd, 0x4e, 0xfd, 0x7c, 0x9d, 0x0b, 0x51,
	0x94, 0x9c, 0x22, 0x86, 0x37, 0xf2, 0xdd, 0xef, 0xde, 0x3d, 0x1e, 0x08, 0x1f, 0x85, 0x2a, 0x0d,
	0xcd, 0xac, 0x11, 0x4c, 0x6c, 0x64, 0x46, 0x2b, 0x91, 0x51, 0x2e, 0x85, 0xca, 0x9a, 0xeb, 0x6c,
	0xab, 0xcd, 0x43, 0xb9, 0xd6, 0xdb, 0xb4, 0x32, 0xda, 0x6a, 0x32, 0x72, 0x85, 0xc5, 0xbb, 0xe7,
	0x1d, 0xcd, 0x75, 0xc6, 0xb4, 0x2a, 0xc5, 0xaa, 0x23, 0x17, 0x6f, 0xf7, 0x22, 0x9c, 0x5a, 0xea,
	0x81, 0xf7, 0x7b, 0x81, 0x6a, 0x4d, 0x6d, 0xa9, 0x8d, 0xec, 0xa0, 0xcb, 0x3f, 0x01, 0x4c, 0xee,
	0x7d, 0x04, 0x72, 0x05, 0x67, 0x35, 0x9a, 0x46, 0x30, 0x2c, 0x28, 0x63, 0x7a, 0xa3, 0x6c, 0x14,
	0xc4, 0x41, 0x72, 0x92, 0xcf, 0xbd, 0x7c, 0xd3, 0xa9, 0xe4, 0x0a, 0x8e, 0xdb, 0xdc, 0x68, 0xea,
	0xe8, 0x45, 0x1c, 0x26, 0xd3, 0xe5, 0x2c, 0x75, 0xb9, 0xd3, 0x7b, 0xa7, 0xe6, 0x7d, 0xd5, 0x39,
	0x6e, 0xa9, 0x91, 0x42, 0xad, 0x8a, 0xd6, 0x03, 0x4d, 0x14, 0x7a, 0x47, 0x2f, 0xff, 0x70, 0x2a,
	0xf9, 0x00, 0x73, 0x51, 0xeb, 0x35, 0xb5, 0xd8, 0x73, 0x47, 0x8e, 0x9b, 0x79, 0xb5, 0xc3, 0x2e,
	0xff, 0x86, 0x30, 0xee, 0x66, 0x10, 0x02, 0x47, 0x8a, 0x4a, 0xf4, 0x09, 0xdd, 0x99, 0x24, 0x30,
	0x52, 0x88, 0xbc, 0x4d, 0x15, 0x24, 0xf3, 0x25, 0x49, 0xfd, 0xe3, 0xd3, 0xdb, 0x76, 0x2d, 0x3f,
	0x7f, 0x57, 0x98, 0x77, 0x00, 0xb9, 0x05, 0xe2, 0x0e, 0x45, 0xa9, 0x4d, 0xd1, 0xef, 0xc4, 0x65,
	0x9b, 0x2f, 0xdf, 0x0c, 0x6d, 0x77, 0xfd, 0xb2, 0xbe, 0x53, 0x89, 0xf9, 0xb9, 0xeb, 0xf8, 0xaa,
	0x4d, 0x2f, 0x93, 0x14, 0x26, 0x95, 0xd1, 0x8d, 0xe0, 0x58, 0xbb, 0xbc, 0xfb, 0x47, 0x0e, 0x0c,
	0xf9, 0x06, 0xaf, 0xfb, 0xf3, 0xff, 0x83, 0x47, 0x07, 0x07, 0xbf, 0xec, 0x9b, 0x9e, 0xce, 0x6e,
	0xdf, 0x8f, 0x8f, 0x36, 0x1a, 0xc7, 0xa1, 0x7b, 0x3f, 0x3e, 0x5a, 0x72, 0x03, 0xe7, 0x66, 0xa3,
	0xac, 0x90, 0xb8, 0xb3, 0x3e, 0x3e, 0x68, 0x7d, 0xe6, 0xf9, 0xc1, 0xf6, 0x02, 0x80, 0x0b, 0x89,
	0xaa, 0x16, 0x5a, 0xd5, 0xd1, 0xc4, 0x99, 0x3f, 0x51, 0xc8, 0x67, 0x98, 0x31, 0x51, 0xf1, 0xa2,
	0xa2, 0xec, 0x81, 0xae, 0xb0, 0x8e, 0x4e, 0xdc, 0x07, 0x78, 0x35, 0xf8, 0x7f, 0x11, 0x15, 0xbf,
	0xeb, 0x8a, 0xf9, 0x29, 0xdb, 0x5d, 0x6a, 0x72, 0x01, 0x21, 0x93, 0x3c, 0x82, 0x38, 0x48, 0xa6,
	0xcb, 0xd3, 0x5d, 0x83, 0xe4, 0x79, 0x5b, 0x20, 0x0b, 0x98, 0x70, 0xa4, 0x7c, 0x2d, 0x14, 0x46,
	0xd3, 0x38, 0x48, 0x46, 0xf9, 0x70, 0xff, 0x35, 0x76, 0xdf, 0xf5, 0xd3, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7f, 0x4c, 0xa6, 0x33, 0x4b, 0x03, 0x00, 0x00,
}
