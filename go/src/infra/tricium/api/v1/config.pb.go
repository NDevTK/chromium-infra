// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/v1/config.proto

/*
Package tricium is a generated protocol buffer package.

It is generated from these files:
	infra/tricium/api/v1/config.proto
	infra/tricium/api/v1/data.proto
	infra/tricium/api/v1/function.proto
	infra/tricium/api/v1/platform.proto
	infra/tricium/api/v1/tricium.proto

It has these top-level messages:
	ServiceConfig
	ProjectDetails
	ProjectConfig
	RepoDetails
	GitRepoDetails
	GerritDetails
	Acl
	Selection
	Config
	Data
	Function
	ConfigDef
	Impl
	Recipe
	Property
	Cmd
	CipdPackage
	Platform
	AnalyzeRequest
	AnalyzeResponse
	ProgressRequest
	ProgressResponse
	AnalyzerProgress
	ResultsRequest
	ResultsResponse
	FeedbackRequest
	FeedbackResponse
	ReportNotUsefulRequest
	ReportNotUsefulResponse
	GerritConsumerDetails
*/
package tricium

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Supported kinds of repositories.
type RepoDetails_Kind int32

const (
	RepoDetails_GIT RepoDetails_Kind = 0
)

var RepoDetails_Kind_name = map[int32]string{
	0: "GIT",
}
var RepoDetails_Kind_value = map[string]int32{
	"GIT": 0,
}

func (x RepoDetails_Kind) String() string {
	return proto.EnumName(RepoDetails_Kind_name, int32(x))
}
func (RepoDetails_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Roles relevant to Tricium.
type Acl_Role int32

const (
	// Can read progress/results.
	Acl_READER Acl_Role = 0
	// Can request analysis.
	Acl_REQUESTER Acl_Role = 1
)

var Acl_Role_name = map[int32]string{
	0: "READER",
	1: "REQUESTER",
}
var Acl_Role_value = map[string]int32{
	"READER":    0,
	"REQUESTER": 1,
}

func (x Acl_Role) String() string {
	return proto.EnumName(Acl_Role_name, int32(x))
}
func (Acl_Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// Tricium service configuration.
//
// Listing supported platforms and analyzers shared between projects connected
// to Tricium.
type ServiceConfig struct {
	// Supported platforms.
	Platforms []*Platform_Details `protobuf:"bytes,1,rep,name=platforms" json:"platforms,omitempty"`
	// Supported data types.
	DataDetails []*Data_TypeDetails `protobuf:"bytes,2,rep,name=data_details,json=dataDetails" json:"data_details,omitempty"`
	// List of shared functions.
	Functions []*Function `protobuf:"bytes,3,rep,name=functions" json:"functions,omitempty"`
	// Details for connected projects.
	Projects []*ProjectDetails `protobuf:"bytes,4,rep,name=projects" json:"projects,omitempty"`
	// Base recipe command used for workers implemented as recipes.
	//
	// Specific recipe details for the worker will be added as flags at the
	// end of the argument list.
	RecipeCmd *Cmd `protobuf:"bytes,5,opt,name=recipe_cmd,json=recipeCmd" json:"recipe_cmd,omitempty"`
	// Base recipe packages used for workers implemented as recipes.
	//
	// These packages will be adjusted for the platform in question, by appending
	// platform name details to the end of the package name.
	RecipePackages []*CipdPackage `protobuf:"bytes,6,rep,name=recipe_packages,json=recipePackages" json:"recipe_packages,omitempty"`
	// Swarming server to use for this service instance.
	//
	// This should be a full URL with no trailing slash.
	SwarmingServer string `protobuf:"bytes,7,opt,name=swarming_server,json=swarmingServer" json:"swarming_server,omitempty"`
	// Isolate server to use for this service instance.
	//
	// This should be a full URL with no trailing slash.
	IsolateServer string `protobuf:"bytes,8,opt,name=isolate_server,json=isolateServer" json:"isolate_server,omitempty"`
}

func (m *ServiceConfig) Reset()                    { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()               {}
func (*ServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceConfig) GetPlatforms() []*Platform_Details {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *ServiceConfig) GetDataDetails() []*Data_TypeDetails {
	if m != nil {
		return m.DataDetails
	}
	return nil
}

func (m *ServiceConfig) GetFunctions() []*Function {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *ServiceConfig) GetProjects() []*ProjectDetails {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ServiceConfig) GetRecipeCmd() *Cmd {
	if m != nil {
		return m.RecipeCmd
	}
	return nil
}

func (m *ServiceConfig) GetRecipePackages() []*CipdPackage {
	if m != nil {
		return m.RecipePackages
	}
	return nil
}

func (m *ServiceConfig) GetSwarmingServer() string {
	if m != nil {
		return m.SwarmingServer
	}
	return ""
}

func (m *ServiceConfig) GetIsolateServer() string {
	if m != nil {
		return m.IsolateServer
	}
	return ""
}

type ProjectDetails struct {
	// Project name used to map these project details to the config for a project.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// General service account for this project.
	// Used for any service interaction, with the exception of swarming.
	ServiceAccount string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount" json:"service_account,omitempty"`
	// Project-specific swarming service account.
	SwarmingServiceAccount string `protobuf:"bytes,3,opt,name=swarming_service_account,json=swarmingServiceAccount" json:"swarming_service_account,omitempty"`
	// Details of the repository connected to the project. This should be the
	// repository hosting the files that should be analyzed for this project.
	RepoDetails *RepoDetails `protobuf:"bytes,4,opt,name=repo_details,json=repoDetails" json:"repo_details,omitempty"`
	// Gerrit details for a project.
	//
	// This field should only be included if there is a Gerrit host for a
	// project and that host should be polled for changes and used for
	// reporting of analyzer progress and results.
	GerritDetails *GerritDetails `protobuf:"bytes,5,opt,name=gerrit_details,json=gerritDetails" json:"gerrit_details,omitempty"`
}

func (m *ProjectDetails) Reset()                    { *m = ProjectDetails{} }
func (m *ProjectDetails) String() string            { return proto.CompactTextString(m) }
func (*ProjectDetails) ProtoMessage()               {}
func (*ProjectDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProjectDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectDetails) GetServiceAccount() string {
	if m != nil {
		return m.ServiceAccount
	}
	return ""
}

func (m *ProjectDetails) GetSwarmingServiceAccount() string {
	if m != nil {
		return m.SwarmingServiceAccount
	}
	return ""
}

func (m *ProjectDetails) GetRepoDetails() *RepoDetails {
	if m != nil {
		return m.RepoDetails
	}
	return nil
}

func (m *ProjectDetails) GetGerritDetails() *GerritDetails {
	if m != nil {
		return m.GerritDetails
	}
	return nil
}

// Tricium project configuration.
//
// Specifies details needed to connect a project to Tricium.
// Adds project-specific functions and selects shared function
// implementations.
type ProjectConfig struct {
	// Project name,
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Access control rules for the project.
	Acls []*Acl `protobuf:"bytes,2,rep,name=acls" json:"acls,omitempty"`
	// Project-specific function details.
	//
	// This includes project-specific analyzer implementations and full
	// project-specific analyzer specifications.
	Functions []*Function `protobuf:"bytes,3,rep,name=functions" json:"functions,omitempty"`
	// Selection of function implementations to run for this project.
	Selections []*Selection `protobuf:"bytes,4,rep,name=selections" json:"selections,omitempty"`
}

func (m *ProjectConfig) Reset()                    { *m = ProjectConfig{} }
func (m *ProjectConfig) String() string            { return proto.CompactTextString(m) }
func (*ProjectConfig) ProtoMessage()               {}
func (*ProjectConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProjectConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectConfig) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

func (m *ProjectConfig) GetFunctions() []*Function {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *ProjectConfig) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

// Repository details for a project.
type RepoDetails struct {
	Kind RepoDetails_Kind `protobuf:"varint,1,opt,name=kind,enum=tricium.RepoDetails_Kind" json:"kind,omitempty"`
	// If repository kind is GIT then provide Git details.
	GitDetails *GitRepoDetails `protobuf:"bytes,2,opt,name=git_details,json=gitDetails" json:"git_details,omitempty"`
}

func (m *RepoDetails) Reset()                    { *m = RepoDetails{} }
func (m *RepoDetails) String() string            { return proto.CompactTextString(m) }
func (*RepoDetails) ProtoMessage()               {}
func (*RepoDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RepoDetails) GetKind() RepoDetails_Kind {
	if m != nil {
		return m.Kind
	}
	return RepoDetails_GIT
}

func (m *RepoDetails) GetGitDetails() *GitRepoDetails {
	if m != nil {
		return m.GitDetails
	}
	return nil
}

// Git repository details.
type GitRepoDetails struct {
	// URL to repository.
	Repository string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	// Default ref to use to get files to analyze.
	Ref string `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
}

func (m *GitRepoDetails) Reset()                    { *m = GitRepoDetails{} }
func (m *GitRepoDetails) String() string            { return proto.CompactTextString(m) }
func (*GitRepoDetails) ProtoMessage()               {}
func (*GitRepoDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GitRepoDetails) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *GitRepoDetails) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

// Gerrit details for a project.
type GerritDetails struct {
	// The Gerrit host to connect to.
	//
	// Value must not include protocol.
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// Gerrit project name.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
}

func (m *GerritDetails) Reset()                    { *m = GerritDetails{} }
func (m *GerritDetails) String() string            { return proto.CompactTextString(m) }
func (*GerritDetails) ProtoMessage()               {}
func (*GerritDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GerritDetails) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GerritDetails) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// Access control rules.
type Acl struct {
	// Role of a group or identity.
	Role Acl_Role `protobuf:"varint,1,opt,name=role,enum=tricium.Acl_Role" json:"role,omitempty"`
	// Name of group, as defined in the auth service. Specify either group or
	// identity, not both.
	Group string `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	// Identity, as defined by the auth service. Can be either an email address
	// or an indentity string, for instance, "anonymous:anonymous" for anonymous
	// users. Specify either group or identity, not both.
	Identity string `protobuf:"bytes,3,opt,name=identity" json:"identity,omitempty"`
}

func (m *Acl) Reset()                    { *m = Acl{} }
func (m *Acl) String() string            { return proto.CompactTextString(m) }
func (*Acl) ProtoMessage()               {}
func (*Acl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Acl) GetRole() Acl_Role {
	if m != nil {
		return m.Role
	}
	return Acl_READER
}

func (m *Acl) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Acl) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// Selection of function implementations to run for a project.
type Selection struct {
	// Name of function to run.
	Function string `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	// Name of platform to retrieve results from.
	Platform Platform_Name `protobuf:"varint,2,opt,name=platform,enum=tricium.Platform_Name" json:"platform,omitempty"`
	// Function configuration to use on this platform.
	Configs []*Config `protobuf:"bytes,3,rep,name=configs" json:"configs,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Selection) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *Selection) GetPlatform() Platform_Name {
	if m != nil {
		return m.Platform
	}
	return Platform_ANY
}

func (m *Selection) GetConfigs() []*Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

// Function configuration used when selecting a function implementation.
type Config struct {
	// Name of the configuration option.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Value of the configuration.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Config) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Config) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceConfig)(nil), "tricium.ServiceConfig")
	proto.RegisterType((*ProjectDetails)(nil), "tricium.ProjectDetails")
	proto.RegisterType((*ProjectConfig)(nil), "tricium.ProjectConfig")
	proto.RegisterType((*RepoDetails)(nil), "tricium.RepoDetails")
	proto.RegisterType((*GitRepoDetails)(nil), "tricium.GitRepoDetails")
	proto.RegisterType((*GerritDetails)(nil), "tricium.GerritDetails")
	proto.RegisterType((*Acl)(nil), "tricium.Acl")
	proto.RegisterType((*Selection)(nil), "tricium.Selection")
	proto.RegisterType((*Config)(nil), "tricium.Config")
	proto.RegisterEnum("tricium.RepoDetails_Kind", RepoDetails_Kind_name, RepoDetails_Kind_value)
	proto.RegisterEnum("tricium.Acl_Role", Acl_Role_name, Acl_Role_value)
}

func init() { proto.RegisterFile("infra/tricium/api/v1/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xdb, 0x38,
	0x10, 0x8d, 0x62, 0xc5, 0x1f, 0xe3, 0x58, 0x76, 0x88, 0x20, 0xab, 0xcd, 0x61, 0xd7, 0xd1, 0x22,
	0xd8, 0x14, 0x45, 0x6d, 0xd4, 0x39, 0x24, 0x87, 0xe6, 0xe0, 0x26, 0x6e, 0x50, 0x14, 0x28, 0x52,
	0x3a, 0x3d, 0x1b, 0xaa, 0x44, 0xab, 0x6c, 0x24, 0x51, 0xa0, 0x68, 0x17, 0x39, 0xf6, 0xd2, 0xfe,
	0x95, 0xa2, 0x7f, 0xb2, 0x85, 0xf8, 0x21, 0xc9, 0x45, 0x10, 0xa0, 0x37, 0xce, 0xbc, 0xf7, 0xc8,
	0xe1, 0x9b, 0x21, 0xe1, 0x88, 0xa6, 0x4b, 0xee, 0x8f, 0x05, 0xa7, 0x01, 0x5d, 0x25, 0x63, 0x3f,
	0xa3, 0xe3, 0xf5, 0xf3, 0x71, 0xc0, 0xd2, 0x25, 0x8d, 0x46, 0x19, 0x67, 0x82, 0xa1, 0x96, 0x06,
	0x0f, 0xff, 0x7d, 0x90, 0x1b, 0xfa, 0xc2, 0x57, 0xcc, 0xc3, 0xff, 0x1e, 0x24, 0x2c, 0x57, 0x69,
	0x20, 0x28, 0x4b, 0x1f, 0x25, 0x65, 0xb1, 0x2f, 0x96, 0x8c, 0x27, 0x8a, 0xe4, 0x7d, 0x6f, 0x40,
	0x6f, 0x4e, 0xf8, 0x9a, 0x06, 0xe4, 0x52, 0xd6, 0x82, 0xce, 0xa0, 0x63, 0x38, 0xb9, 0x6b, 0x0d,
	0x1b, 0x27, 0xdd, 0xc9, 0xdf, 0x23, 0xbd, 0xc9, 0xe8, 0xc6, 0xa8, 0xaf, 0x88, 0xf0, 0x69, 0x9c,
	0xe3, 0x8a, 0x8b, 0x5e, 0xc0, 0x6e, 0x51, 0xe2, 0x22, 0x54, 0x90, 0xbb, 0xfd, 0x9b, 0xf6, 0xaa,
	0xa8, 0xff, 0xf6, 0x3e, 0x23, 0x46, 0xdb, 0x2d, 0xe8, 0x3a, 0x40, 0x63, 0xe8, 0x98, 0xfa, 0x73,
	0xb7, 0x21, 0xa5, 0x7b, 0xa5, 0xf4, 0x95, 0x46, 0x70, 0xc5, 0x41, 0xa7, 0xd0, 0xce, 0x38, 0xfb,
	0x44, 0x02, 0x91, 0xbb, 0xb6, 0xe4, 0xff, 0x55, 0x95, 0xa9, 0x00, 0x73, 0x50, 0x49, 0x44, 0x4f,
	0x01, 0x38, 0x09, 0x68, 0x46, 0x16, 0x41, 0x12, 0xba, 0x3b, 0x43, 0xeb, 0xa4, 0x3b, 0xd9, 0x2d,
	0x65, 0x97, 0x49, 0x88, 0x3b, 0x0a, 0xbf, 0x4c, 0x42, 0x74, 0x01, 0x7d, 0x4d, 0xce, 0xfc, 0xe0,
	0xce, 0x8f, 0x48, 0xee, 0x36, 0xe5, 0x41, 0xfb, 0x95, 0x82, 0x66, 0xe1, 0x8d, 0x02, 0xb1, 0xa3,
	0xc8, 0x3a, 0xcc, 0xd1, 0xff, 0xd0, 0xcf, 0x3f, 0xfb, 0x3c, 0xa1, 0x69, 0xb4, 0xc8, 0x09, 0x5f,
	0x13, 0xee, 0xb6, 0x86, 0xd6, 0x49, 0x07, 0x3b, 0x26, 0x3d, 0x97, 0x59, 0x74, 0x0c, 0x0e, 0xcd,
	0x59, 0xec, 0x0b, 0x62, 0x78, 0x6d, 0xc9, 0xeb, 0xe9, 0xac, 0xa2, 0x79, 0x3f, 0x2d, 0x70, 0x36,
	0x2f, 0x86, 0x10, 0xd8, 0xa9, 0x9f, 0x10, 0xd7, 0x92, 0x7c, 0xb9, 0x96, 0xc7, 0xaa, 0x86, 0x2e,
	0xfc, 0x20, 0x60, 0xab, 0x54, 0xb8, 0xdb, 0xfa, 0x58, 0x95, 0x9e, 0xaa, 0x2c, 0x3a, 0x07, 0x77,
	0xa3, 0xbe, 0xba, 0xa2, 0x21, 0x15, 0x07, 0xf5, 0x42, 0x6b, 0xca, 0x33, 0xd8, 0xe5, 0x24, 0x63,
	0x65, 0xa7, 0x6d, 0xe9, 0x63, 0xe5, 0x0a, 0x26, 0x19, 0x2b, 0x9b, 0xcc, 0xab, 0x00, 0x5d, 0x80,
	0x13, 0x11, 0xce, 0xa9, 0x28, 0xa5, 0xaa, 0x05, 0x07, 0xa5, 0xf4, 0x5a, 0xc2, 0x46, 0xdc, 0x8b,
	0xea, 0xa1, 0xf7, 0xc3, 0x82, 0x9e, 0x76, 0x40, 0x0f, 0xeb, 0x43, 0x06, 0x0c, 0xc1, 0xf6, 0x83,
	0x72, 0xfe, 0xaa, 0xee, 0x4e, 0x83, 0x18, 0x4b, 0xe4, 0xcf, 0x67, 0x6d, 0x02, 0x90, 0x93, 0x98,
	0x68, 0x85, 0x9a, 0x36, 0x54, 0x2a, 0xe6, 0x06, 0xc2, 0x35, 0x96, 0xf7, 0xcd, 0x82, 0x6e, 0xcd,
	0x08, 0xf4, 0x0c, 0xec, 0x3b, 0x9a, 0x86, 0xb2, 0x54, 0xa7, 0xf6, 0x2c, 0x6a, 0x9c, 0xd1, 0x1b,
	0x9a, 0x86, 0x58, 0xd2, 0xd0, 0x39, 0x74, 0xa3, 0x9a, 0x4f, 0xdb, 0xd2, 0xa7, 0x6a, 0xc2, 0xaf,
	0xa9, 0xa8, 0xbb, 0x0c, 0x51, 0xe5, 0x52, 0x1f, 0xec, 0x62, 0x1f, 0xd4, 0x82, 0xc6, 0xf5, 0xeb,
	0xdb, 0xc1, 0x96, 0xf7, 0x12, 0x9c, 0x4d, 0x3a, 0xfa, 0xa7, 0x78, 0x06, 0x19, 0xcb, 0xa9, 0x60,
	0xfc, 0x5e, 0x9b, 0x57, 0xcb, 0xa0, 0x01, 0x34, 0x38, 0x59, 0xea, 0xb9, 0x29, 0x96, 0xde, 0x05,
	0xf4, 0x36, 0x5a, 0x53, 0x38, 0xff, 0x91, 0xe5, 0xc2, 0x38, 0x5f, 0xac, 0x91, 0x0b, 0x2d, 0xfd,
	0xd2, 0xb4, 0xd4, 0x84, 0xde, 0x17, 0x0b, 0x1a, 0xd3, 0x20, 0x46, 0xc7, 0x60, 0x73, 0x16, 0x13,
	0x6d, 0xc2, 0x5e, 0xbd, 0x37, 0x23, 0xcc, 0x62, 0x82, 0x25, 0x8c, 0xf6, 0x61, 0x27, 0xe2, 0x6c,
	0x95, 0xe9, 0x6d, 0x54, 0x80, 0x0e, 0xa1, 0x4d, 0x43, 0x92, 0x0a, 0x2a, 0xee, 0xf5, 0x80, 0x96,
	0xb1, 0x77, 0x04, 0x76, 0xa1, 0x47, 0x00, 0x4d, 0x3c, 0x9b, 0x5e, 0xcd, 0xf0, 0x60, 0x0b, 0xf5,
	0xa0, 0x83, 0x67, 0xef, 0xde, 0xcf, 0xe6, 0xb7, 0x33, 0x3c, 0xb0, 0xbc, 0xaf, 0x16, 0x74, 0xca,
	0x56, 0x15, 0x9b, 0x99, 0xfe, 0xea, 0x3b, 0x94, 0x31, 0x9a, 0x40, 0xdb, 0x7c, 0x6b, 0xb2, 0x02,
	0xa7, 0x36, 0xa0, 0xe5, 0x0f, 0xf8, 0xd6, 0x4f, 0x08, 0x2e, 0x79, 0xe8, 0x09, 0xb4, 0xd4, 0x67,
	0x6e, 0x26, 0xaa, 0x5f, 0x7d, 0x12, 0x32, 0x8f, 0x0d, 0xee, 0x4d, 0xa0, 0xf9, 0xc8, 0xf8, 0xee,
	0xc3, 0xce, 0xda, 0x8f, 0x57, 0xc4, 0xdc, 0x5d, 0x06, 0x1f, 0x9a, 0xf2, 0xbb, 0x3e, 0xfd, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x71, 0xbd, 0xb9, 0x47, 0x06, 0x00, 0x00,
}
