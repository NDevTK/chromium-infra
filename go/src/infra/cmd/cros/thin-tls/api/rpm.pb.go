// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpm.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetRpmRequest_State int32

const (
	SetRpmRequest_STATE_UNKNOWN SetRpmRequest_State = 0
	SetRpmRequest_STATE_ON      SetRpmRequest_State = 1
	SetRpmRequest_STATE_OFF     SetRpmRequest_State = 2
	SetRpmRequest_STATE_CYCLE   SetRpmRequest_State = 3
)

var SetRpmRequest_State_name = map[int32]string{
	0: "STATE_UNKNOWN",
	1: "STATE_ON",
	2: "STATE_OFF",
	3: "STATE_CYCLE",
}

var SetRpmRequest_State_value = map[string]int32{
	"STATE_UNKNOWN": 0,
	"STATE_ON":      1,
	"STATE_OFF":     2,
	"STATE_CYCLE":   3,
}

func (x SetRpmRequest_State) String() string {
	return proto.EnumName(SetRpmRequest_State_name, int32(x))
}

func (SetRpmRequest_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f55d70d9c94b556, []int{0, 0}
}

type SetRpmResponse_Status int32

const (
	SetRpmResponse_STATUS_UNKNOWN     SetRpmResponse_Status = 0
	SetRpmResponse_STATUS_OK          SetRpmResponse_Status = 1
	SetRpmResponse_STATUS_TIMEOUT     SetRpmResponse_Status = 2
	SetRpmResponse_STATUS_BAD_REQUEST SetRpmResponse_Status = 3
)

var SetRpmResponse_Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_OK",
	2: "STATUS_TIMEOUT",
	3: "STATUS_BAD_REQUEST",
}

var SetRpmResponse_Status_value = map[string]int32{
	"STATUS_UNKNOWN":     0,
	"STATUS_OK":          1,
	"STATUS_TIMEOUT":     2,
	"STATUS_BAD_REQUEST": 3,
}

func (x SetRpmResponse_Status) String() string {
	return proto.EnumName(SetRpmResponse_Status_name, int32(x))
}

func (SetRpmResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f55d70d9c94b556, []int{1, 0}
}

type SetRpmRequest struct {
	State                SetRpmRequest_State `protobuf:"varint,1,opt,name=state,proto3,enum=cros.tls.experimental.SetRpmRequest_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SetRpmRequest) Reset()         { *m = SetRpmRequest{} }
func (m *SetRpmRequest) String() string { return proto.CompactTextString(m) }
func (*SetRpmRequest) ProtoMessage()    {}
func (*SetRpmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f55d70d9c94b556, []int{0}
}

func (m *SetRpmRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRpmRequest.Unmarshal(m, b)
}
func (m *SetRpmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRpmRequest.Marshal(b, m, deterministic)
}
func (m *SetRpmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRpmRequest.Merge(m, src)
}
func (m *SetRpmRequest) XXX_Size() int {
	return xxx_messageInfo_SetRpmRequest.Size(m)
}
func (m *SetRpmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRpmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRpmRequest proto.InternalMessageInfo

func (m *SetRpmRequest) GetState() SetRpmRequest_State {
	if m != nil {
		return m.State
	}
	return SetRpmRequest_STATE_UNKNOWN
}

type SetRpmResponse struct {
	Status               SetRpmResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=cros.tls.experimental.SetRpmResponse_Status" json:"status,omitempty"`
	Explanation          string                `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SetRpmResponse) Reset()         { *m = SetRpmResponse{} }
func (m *SetRpmResponse) String() string { return proto.CompactTextString(m) }
func (*SetRpmResponse) ProtoMessage()    {}
func (*SetRpmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f55d70d9c94b556, []int{1}
}

func (m *SetRpmResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRpmResponse.Unmarshal(m, b)
}
func (m *SetRpmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRpmResponse.Marshal(b, m, deterministic)
}
func (m *SetRpmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRpmResponse.Merge(m, src)
}
func (m *SetRpmResponse) XXX_Size() int {
	return xxx_messageInfo_SetRpmResponse.Size(m)
}
func (m *SetRpmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRpmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRpmResponse proto.InternalMessageInfo

func (m *SetRpmResponse) GetStatus() SetRpmResponse_Status {
	if m != nil {
		return m.Status
	}
	return SetRpmResponse_STATUS_UNKNOWN
}

func (m *SetRpmResponse) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

func init() {
	proto.RegisterEnum("cros.tls.experimental.SetRpmRequest_State", SetRpmRequest_State_name, SetRpmRequest_State_value)
	proto.RegisterEnum("cros.tls.experimental.SetRpmResponse_Status", SetRpmResponse_Status_name, SetRpmResponse_Status_value)
	proto.RegisterType((*SetRpmRequest)(nil), "cros.tls.experimental.SetRpmRequest")
	proto.RegisterType((*SetRpmResponse)(nil), "cros.tls.experimental.SetRpmResponse")
}

func init() { proto.RegisterFile("rpm.proto", fileDescriptor_3f55d70d9c94b556) }

var fileDescriptor_3f55d70d9c94b556 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xcd, 0xca, 0x8a, 0x3b, 0x73, 0x33, 0x1e, 0x50, 0x86, 0x57, 0xa3, 0x28, 0x0c, 0x91,
	0x5c, 0xcc, 0x17, 0x70, 0x7f, 0x3a, 0x94, 0x69, 0x8b, 0x49, 0xc3, 0x50, 0x84, 0x51, 0x25, 0x17,
	0x83, 0xb5, 0x8d, 0x4d, 0x06, 0x7b, 0x17, 0x9f, 0xca, 0x37, 0x92, 0x2d, 0x15, 0x26, 0x08, 0xee,
	0xf2, 0xfb, 0xc8, 0x8f, 0xf3, 0x3b, 0x39, 0xd0, 0x28, 0x75, 0xc6, 0x74, 0x59, 0xd8, 0x02, 0x4f,
	0xdf, 0xcb, 0xc2, 0x30, 0xbb, 0x34, 0x4c, 0xad, 0xb5, 0x2a, 0x17, 0x99, 0xca, 0x6d, 0xba, 0x0c,
	0x3e, 0x09, 0xb4, 0x84, 0xb2, 0x5c, 0x67, 0x5c, 0x7d, 0xac, 0x94, 0xb1, 0x78, 0x0b, 0x75, 0x63,
	0x53, 0xab, 0x3a, 0xa4, 0x4b, 0x7a, 0xed, 0xfe, 0x15, 0xfb, 0x13, 0x64, 0xbf, 0x20, 0x26, 0x36,
	0x04, 0x77, 0x60, 0x70, 0x07, 0xf5, 0x6d, 0xc6, 0x13, 0x68, 0x89, 0x64, 0x90, 0x84, 0x73, 0x19,
	0x4d, 0xa3, 0x78, 0x16, 0xd1, 0x03, 0x3c, 0x82, 0x43, 0x57, 0xc5, 0x11, 0x25, 0xd8, 0x82, 0x46,
	0x95, 0x26, 0x13, 0x5a, 0xc3, 0x63, 0x68, 0xba, 0x38, 0x7a, 0x1e, 0x3d, 0x84, 0xd4, 0x0b, 0xbe,
	0x08, 0xb4, 0x7f, 0x06, 0x19, 0x5d, 0xe4, 0x46, 0xe1, 0x18, 0xfc, 0xcd, 0x94, 0x95, 0xa9, 0xfc,
	0xae, 0xff, 0xf1, 0x73, 0xd8, 0x56, 0x70, 0x65, 0x78, 0xc5, 0x62, 0x17, 0x9a, 0x6a, 0xad, 0x97,
	0x69, 0x9e, 0xda, 0x45, 0x91, 0x77, 0x6a, 0x5d, 0xd2, 0x6b, 0xf0, 0xdd, 0x2a, 0x98, 0x81, 0xef,
	0x18, 0x44, 0x68, 0x6f, 0xac, 0xa4, 0xd8, 0x59, 0xa3, 0x12, 0x97, 0x62, 0x1e, 0x4f, 0x29, 0xd9,
	0x79, 0x92, 0xdc, 0x3f, 0x86, 0xb1, 0x4c, 0x68, 0x0d, 0xcf, 0x00, 0xab, 0x6e, 0x38, 0x18, 0xcf,
	0x79, 0xf8, 0x24, 0x43, 0x91, 0x50, 0xaf, 0xff, 0x0a, 0x1e, 0xd7, 0x19, 0x4a, 0xf0, 0x9d, 0x22,
	0x5e, 0xec, 0xf3, 0xc3, 0xe7, 0x97, 0x7b, 0xed, 0x39, 0xac, 0xbf, 0x78, 0xa9, 0x5e, 0xbc, 0xf9,
	0xdb, 0xa3, 0xdf, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0xad, 0xef, 0xd2, 0x1e, 0x01, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpmClient is the client API for Rpm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpmClient interface {
	SetRpm(ctx context.Context, in *SetRpmRequest, opts ...grpc.CallOption) (*SetRpmResponse, error)
}

type rpmClient struct {
	cc *grpc.ClientConn
}

func NewRpmClient(cc *grpc.ClientConn) RpmClient {
	return &rpmClient{cc}
}

func (c *rpmClient) SetRpm(ctx context.Context, in *SetRpmRequest, opts ...grpc.CallOption) (*SetRpmResponse, error) {
	out := new(SetRpmResponse)
	err := c.cc.Invoke(ctx, "/cros.tls.experimental.Rpm/SetRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpmServer is the server API for Rpm service.
type RpmServer interface {
	SetRpm(context.Context, *SetRpmRequest) (*SetRpmResponse, error)
}

// UnimplementedRpmServer can be embedded to have forward compatible implementations.
type UnimplementedRpmServer struct {
}

func (*UnimplementedRpmServer) SetRpm(ctx context.Context, req *SetRpmRequest) (*SetRpmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRpm not implemented")
}

func RegisterRpmServer(s *grpc.Server, srv RpmServer) {
	s.RegisterService(&_Rpm_serviceDesc, srv)
}

func _Rpm_SetRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRpmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpmServer).SetRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cros.tls.experimental.Rpm/SetRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpmServer).SetRpm(ctx, req.(*SetRpmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cros.tls.experimental.Rpm",
	HandlerType: (*RpmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRpm",
			Handler:    _Rpm_SetRpm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpm.proto",
}
