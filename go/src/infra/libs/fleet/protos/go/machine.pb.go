// Code generated by protoc-gen-go. DO NOT EDIT.
// source: machine.proto

package fleet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 5
type Machine struct {
	// A unique ID for the machine.
	Id       *MachineID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location *Location  `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are valid to be assigned to Device:
	//	*Machine_ChromeMachine
	//	*Machine_ChromeosMachine
	Device               isMachine_Device `protobuf_oneof:"device"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Machine) Reset()         { *m = Machine{} }
func (m *Machine) String() string { return proto.CompactTextString(m) }
func (*Machine) ProtoMessage()    {}
func (*Machine) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b4e4a03b74bd47d, []int{0}
}

func (m *Machine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Machine.Unmarshal(m, b)
}
func (m *Machine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Machine.Marshal(b, m, deterministic)
}
func (m *Machine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Machine.Merge(m, src)
}
func (m *Machine) XXX_Size() int {
	return xxx_messageInfo_Machine.Size(m)
}
func (m *Machine) XXX_DiscardUnknown() {
	xxx_messageInfo_Machine.DiscardUnknown(m)
}

var xxx_messageInfo_Machine proto.InternalMessageInfo

func (m *Machine) GetId() *MachineID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Machine) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type isMachine_Device interface {
	isMachine_Device()
}

type Machine_ChromeMachine struct {
	ChromeMachine *ChromeMachine `protobuf:"bytes,3,opt,name=chrome_machine,json=chromeMachine,proto3,oneof"`
}

type Machine_ChromeosMachine struct {
	ChromeosMachine *ChromeOSMachine `protobuf:"bytes,4,opt,name=chromeos_machine,json=chromeosMachine,proto3,oneof"`
}

func (*Machine_ChromeMachine) isMachine_Device() {}

func (*Machine_ChromeosMachine) isMachine_Device() {}

func (m *Machine) GetDevice() isMachine_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Machine) GetChromeMachine() *ChromeMachine {
	if x, ok := m.GetDevice().(*Machine_ChromeMachine); ok {
		return x.ChromeMachine
	}
	return nil
}

func (m *Machine) GetChromeosMachine() *ChromeOSMachine {
	if x, ok := m.GetDevice().(*Machine_ChromeosMachine); ok {
		return x.ChromeosMachine
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Machine) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Machine_ChromeMachine)(nil),
		(*Machine_ChromeosMachine)(nil),
	}
}

type ChromeMachine struct {
	// Descriptive name of Chrome Machine
	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Platform   *ChromePlatform `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	MacAddress string          `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NicName    string          `protobuf:"bytes,4,opt,name=nic_name,json=nicName,proto3" json:"nic_name,omitempty"`
	// Interface of its connected devices.
	KvmInterface           *KVMInterface    `protobuf:"bytes,5,opt,name=kvm_interface,json=kvmInterface,proto3" json:"kvm_interface,omitempty"`
	RpmInterface           *RPMInterface    `protobuf:"bytes,6,opt,name=rpm_interface,json=rpmInterface,proto3" json:"rpm_interface,omitempty"`
	NetworkDeviceInterface *SwitchInterface `protobuf:"bytes,7,opt,name=network_device_interface,json=networkDeviceInterface,proto3" json:"network_device_interface,omitempty"`
	Drac                   *Drac            `protobuf:"bytes,8,opt,name=drac,proto3" json:"drac,omitempty"`
	// Usually it's a buganizer bug.
	DeploymentTicket     string   `protobuf:"bytes,9,opt,name=deployment_ticket,json=deploymentTicket,proto3" json:"deployment_ticket,omitempty"`
	Description          string   `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChromeMachine) Reset()         { *m = ChromeMachine{} }
func (m *ChromeMachine) String() string { return proto.CompactTextString(m) }
func (*ChromeMachine) ProtoMessage()    {}
func (*ChromeMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b4e4a03b74bd47d, []int{1}
}

func (m *ChromeMachine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeMachine.Unmarshal(m, b)
}
func (m *ChromeMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeMachine.Marshal(b, m, deterministic)
}
func (m *ChromeMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeMachine.Merge(m, src)
}
func (m *ChromeMachine) XXX_Size() int {
	return xxx_messageInfo_ChromeMachine.Size(m)
}
func (m *ChromeMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeMachine.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeMachine proto.InternalMessageInfo

func (m *ChromeMachine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChromeMachine) GetPlatform() *ChromePlatform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *ChromeMachine) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *ChromeMachine) GetNicName() string {
	if m != nil {
		return m.NicName
	}
	return ""
}

func (m *ChromeMachine) GetKvmInterface() *KVMInterface {
	if m != nil {
		return m.KvmInterface
	}
	return nil
}

func (m *ChromeMachine) GetRpmInterface() *RPMInterface {
	if m != nil {
		return m.RpmInterface
	}
	return nil
}

func (m *ChromeMachine) GetNetworkDeviceInterface() *SwitchInterface {
	if m != nil {
		return m.NetworkDeviceInterface
	}
	return nil
}

func (m *ChromeMachine) GetDrac() *Drac {
	if m != nil {
		return m.Drac
	}
	return nil
}

func (m *ChromeMachine) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

func (m *ChromeMachine) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ChromeOSMachine struct {
	// All infos come from HaRT system.
	// used by referencing device config.
	ReferenceBoard string `protobuf:"bytes,1,opt,name=reference_board,json=referenceBoard,proto3" json:"reference_board,omitempty"`
	// used by ChromeOS build system.
	BuildTarget string `protobuf:"bytes,2,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	Model       string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Chromebook, labstation, servo, …
	DeviceType ChromeOSDeviceType `protobuf:"varint,4,opt,name=device_type,json=deviceType,proto3,enum=fleet.ChromeOSDeviceType" json:"device_type,omitempty"`
	// Used internally, Different boards/models could share the same name.
	GoogleCodeName string `protobuf:"bytes,5,opt,name=google_code_name,json=googleCodeName,proto3" json:"google_code_name,omitempty"`
	// HaRT doesn’t guarantee its existence.
	MacAddress           string   `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChromeOSMachine) Reset()         { *m = ChromeOSMachine{} }
func (m *ChromeOSMachine) String() string { return proto.CompactTextString(m) }
func (*ChromeOSMachine) ProtoMessage()    {}
func (*ChromeOSMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b4e4a03b74bd47d, []int{2}
}

func (m *ChromeOSMachine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSMachine.Unmarshal(m, b)
}
func (m *ChromeOSMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSMachine.Marshal(b, m, deterministic)
}
func (m *ChromeOSMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSMachine.Merge(m, src)
}
func (m *ChromeOSMachine) XXX_Size() int {
	return xxx_messageInfo_ChromeOSMachine.Size(m)
}
func (m *ChromeOSMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSMachine.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSMachine proto.InternalMessageInfo

func (m *ChromeOSMachine) GetReferenceBoard() string {
	if m != nil {
		return m.ReferenceBoard
	}
	return ""
}

func (m *ChromeOSMachine) GetBuildTarget() string {
	if m != nil {
		return m.BuildTarget
	}
	return ""
}

func (m *ChromeOSMachine) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ChromeOSMachine) GetDeviceType() ChromeOSDeviceType {
	if m != nil {
		return m.DeviceType
	}
	return ChromeOSDeviceType_DEVICE_INVALID
}

func (m *ChromeOSMachine) GetGoogleCodeName() string {
	if m != nil {
		return m.GoogleCodeName
	}
	return ""
}

func (m *ChromeOSMachine) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Machine)(nil), "fleet.Machine")
	proto.RegisterType((*ChromeMachine)(nil), "fleet.ChromeMachine")
	proto.RegisterType((*ChromeOSMachine)(nil), "fleet.ChromeOSMachine")
}

func init() { proto.RegisterFile("machine.proto", fileDescriptor_4b4e4a03b74bd47d) }

var fileDescriptor_4b4e4a03b74bd47d = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x25, 0x6d, 0x9e, 0x37, 0xcd, 0xa3, 0xd3, 0x87, 0xdc, 0x6e, 0x5a, 0xba, 0xa1, 0x52, 0xa5,
	0x48, 0x94, 0x0d, 0x02, 0xb1, 0xa0, 0xed, 0x82, 0x0a, 0x0a, 0x91, 0x1b, 0xb1, 0x60, 0x63, 0x4d,
	0x66, 0x6e, 0x92, 0x51, 0x6c, 0x8f, 0x35, 0x19, 0x52, 0xe5, 0x0f, 0xf9, 0x12, 0x3e, 0x82, 0x15,
	0xca, 0x9d, 0x89, 0x63, 0x67, 0xe7, 0x39, 0xf7, 0x9e, 0x73, 0xee, 0xcb, 0xd0, 0x49, 0xb8, 0x98,
	0xa9, 0x14, 0x07, 0x99, 0xd1, 0x56, 0xb3, 0xda, 0x24, 0x46, 0xb4, 0xe7, 0x47, 0x62, 0x66, 0x74,
	0x82, 0x91, 0xd0, 0xe9, 0x44, 0x4d, 0x5d, 0xec, 0xfc, 0xc4, 0x81, 0x7a, 0x51, 0x86, 0xbb, 0xb1,
	0x16, 0xdc, 0x2a, 0x9d, 0xfa, 0x77, 0xdf, 0x2b, 0x46, 0x4a, 0x7a, 0xe4, 0x30, 0x43, 0xa3, 0xb2,
	0x19, 0x1a, 0x1e, 0x2f, 0x1c, 0x74, 0xf5, 0xb7, 0x02, 0x8d, 0x27, 0x97, 0xc7, 0x2e, 0x61, 0x4f,
	0xc9, 0xa0, 0x72, 0x59, 0xb9, 0x6e, 0xdf, 0xf6, 0x07, 0x54, 0xc0, 0xc0, 0xc7, 0x1e, 0x1f, 0xc2,
	0x3d, 0x25, 0xd9, 0x0d, 0x34, 0x37, 0x26, 0xc1, 0x1e, 0xe5, 0xf5, 0x7c, 0xde, 0x37, 0x0f, 0x87,
	0x79, 0x02, 0xfb, 0x04, 0x5d, 0x5f, 0xbd, 0x2f, 0x24, 0xd8, 0x27, 0xca, 0xb1, 0xa7, 0xdc, 0x53,
	0xd0, 0x1b, 0x7c, 0x79, 0x15, 0x76, 0x44, 0x11, 0x60, 0xf7, 0xd0, 0xcf, 0xfb, 0xdc, 0x08, 0x54,
	0x49, 0xe0, 0xb4, 0x24, 0xf0, 0xe3, 0x79, 0x2b, 0xd1, 0xdb, 0x30, 0x3c, 0x74, 0xd7, 0x84, 0xba,
	0xc4, 0xa5, 0x12, 0x78, 0xf5, 0x67, 0x1f, 0x3a, 0x25, 0x47, 0xc6, 0xa0, 0x9a, 0xf2, 0x04, 0xa9,
	0xe1, 0x56, 0x48, 0xdf, 0xec, 0x2d, 0x34, 0xb3, 0x98, 0xdb, 0x89, 0x36, 0x89, 0x6f, 0xf0, 0xa4,
	0x64, 0x36, 0xf4, 0xc1, 0x30, 0x4f, 0x63, 0x17, 0xd0, 0x4e, 0xb8, 0x88, 0xb8, 0x94, 0x06, 0x17,
	0x0b, 0xea, 0xb1, 0x15, 0x42, 0xc2, 0xc5, 0x67, 0x87, 0xb0, 0x33, 0x68, 0xa6, 0x4a, 0x44, 0xe4,
	0x55, 0xa5, 0x68, 0x23, 0x55, 0xe2, 0xfb, 0xda, 0xee, 0x3d, 0x74, 0xe6, 0xcb, 0x24, 0x52, 0xa9,
	0x45, 0x33, 0xe1, 0x02, 0x83, 0x1a, 0x79, 0x1e, 0x79, 0xcf, 0xaf, 0x3f, 0x9f, 0x1e, 0x37, 0xa1,
	0xf0, 0x60, 0xbe, 0x4c, 0xf2, 0xd7, 0x9a, 0x69, 0xb2, 0x22, 0xb3, 0x5e, 0x62, 0x86, 0xc3, 0x22,
	0xd3, 0x64, 0x05, 0xe6, 0x10, 0x82, 0x14, 0xed, 0x8b, 0x36, 0xf3, 0xc8, 0x8d, 0xa6, 0x20, 0xd2,
	0x28, 0xcd, 0xf7, 0xf9, 0x45, 0x59, 0x31, 0xdb, 0xea, 0x9c, 0x7a, 0xde, 0x03, 0xd1, 0xb6, 0x8a,
	0x17, 0x50, 0x95, 0x86, 0x8b, 0xa0, 0x49, 0xec, 0xb6, 0x67, 0x3f, 0x18, 0x2e, 0x42, 0x0a, 0xb0,
	0x1b, 0x38, 0x94, 0x98, 0xc5, 0x7a, 0x95, 0x60, 0x6a, 0x23, 0xab, 0xc4, 0x1c, 0x6d, 0xd0, 0xa2,
	0x51, 0xf4, 0xb7, 0x81, 0x11, 0xe1, 0xec, 0x12, 0xda, 0x12, 0x17, 0xc2, 0xa8, 0x8c, 0xce, 0x0c,
	0x28, 0xad, 0x08, 0x5d, 0xfd, 0xab, 0x40, 0x6f, 0x67, 0xf7, 0xec, 0x0d, 0xf4, 0x0c, 0x4e, 0xd0,
	0x60, 0x2a, 0x30, 0x1a, 0x6b, 0x6e, 0xa4, 0xdf, 0x6b, 0x37, 0x87, 0xef, 0xd6, 0x28, 0x7b, 0x0d,
	0x07, 0xe3, 0xdf, 0x2a, 0x96, 0x91, 0xe5, 0x66, 0x8a, 0x96, 0xb6, 0xdc, 0x0a, 0xdb, 0x84, 0x8d,
	0x08, 0x62, 0xc7, 0x50, 0x4b, 0xb4, 0xc4, 0xd8, 0xef, 0xd2, 0x3d, 0xd8, 0x87, 0x75, 0x5d, 0x34,
	0x2f, 0xbb, 0xca, 0xdc, 0x26, 0xbb, 0xb7, 0x67, 0x3b, 0xa7, 0xe8, 0x46, 0x33, 0x5a, 0x65, 0x18,
	0x82, 0xcc, 0xbf, 0xd9, 0x35, 0xf4, 0xa7, 0x5a, 0x4f, 0xe3, 0xf5, 0x8f, 0x2c, 0xd1, 0x9d, 0x42,
	0xcd, 0x95, 0xe7, 0xf0, 0x7b, 0x2d, 0x91, 0x2e, 0x62, 0xe7, 0x9a, 0xea, 0xbb, 0xd7, 0x74, 0xd7,
	0xfa, 0xd5, 0x18, 0x7c, 0x24, 0xd3, 0x71, 0x9d, 0x7e, 0xe1, 0x77, 0xff, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xec, 0xb8, 0xcf, 0xf8, 0x3b, 0x04, 0x00, 0x00,
}
