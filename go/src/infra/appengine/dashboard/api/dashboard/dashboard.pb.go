// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/dashboard/api/dashboard/dashboard.proto

/*
Package dashboard is a generated protocol buffer package.

It is generated from these files:
	infra/appengine/dashboard/api/dashboard/dashboard.proto

It has these top-level messages:
	UpdateOpenIncidentsRequest
	UpdateOpenIncidentsResponse
	GetAllServicesDataRequest
	GetAllServicesDataResponse
	ChopsIncident
	ChopsService
*/
package dashboard

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Severity int32

const (
	Severity_RED    Severity = 0
	Severity_YELLOW Severity = 1
)

var Severity_name = map[int32]string{
	0: "RED",
	1: "YELLOW",
}
var Severity_value = map[string]int32{
	"RED":    0,
	"YELLOW": 1,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}
func (Severity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UpdateOpenIncidentsRequest struct {
	ChopsService *ChopsService `protobuf:"bytes,1,opt,name=chops_service,json=chopsService" json:"chops_service,omitempty"`
}

func (m *UpdateOpenIncidentsRequest) Reset()                    { *m = UpdateOpenIncidentsRequest{} }
func (m *UpdateOpenIncidentsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateOpenIncidentsRequest) ProtoMessage()               {}
func (*UpdateOpenIncidentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateOpenIncidentsRequest) GetChopsService() *ChopsService {
	if m != nil {
		return m.ChopsService
	}
	return nil
}

type UpdateOpenIncidentsResponse struct {
	OpenIncidents []*ChopsIncident `protobuf:"bytes,1,rep,name=open_incidents,json=openIncidents" json:"open_incidents,omitempty"`
}

func (m *UpdateOpenIncidentsResponse) Reset()                    { *m = UpdateOpenIncidentsResponse{} }
func (m *UpdateOpenIncidentsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateOpenIncidentsResponse) ProtoMessage()               {}
func (*UpdateOpenIncidentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateOpenIncidentsResponse) GetOpenIncidents() []*ChopsIncident {
	if m != nil {
		return m.OpenIncidents
	}
	return nil
}

type GetAllServicesDataRequest struct {
	// A unix timestamp to indicate the upper limit of the seven-day query range.
	// A value of 0 indicates interest in incidents that occurred in the last 7 days.
	UptoTime int64 `protobuf:"varint,1,opt,name=upto_time,json=uptoTime" json:"upto_time,omitempty"`
}

func (m *GetAllServicesDataRequest) Reset()                    { *m = GetAllServicesDataRequest{} }
func (m *GetAllServicesDataRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllServicesDataRequest) ProtoMessage()               {}
func (*GetAllServicesDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetAllServicesDataRequest) GetUptoTime() int64 {
	if m != nil {
		return m.UptoTime
	}
	return 0
}

type GetAllServicesDataResponse struct {
	Services       []*ChopsService `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	NonslaServices []*ChopsService `protobuf:"bytes,2,rep,name=nonsla_services,json=nonslaServices" json:"nonsla_services,omitempty"`
}

func (m *GetAllServicesDataResponse) Reset()                    { *m = GetAllServicesDataResponse{} }
func (m *GetAllServicesDataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllServicesDataResponse) ProtoMessage()               {}
func (*GetAllServicesDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetAllServicesDataResponse) GetServices() []*ChopsService {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *GetAllServicesDataResponse) GetNonslaServices() []*ChopsService {
	if m != nil {
		return m.NonslaServices
	}
	return nil
}

type ChopsIncident struct {
	Id        string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Open      bool     `protobuf:"varint,2,opt,name=open" json:"open,omitempty"`
	StartTime int64    `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Severity  Severity `protobuf:"varint,5,opt,name=severity,enum=dashboard.Severity" json:"severity,omitempty"`
}

func (m *ChopsIncident) Reset()                    { *m = ChopsIncident{} }
func (m *ChopsIncident) String() string            { return proto.CompactTextString(m) }
func (*ChopsIncident) ProtoMessage()               {}
func (*ChopsIncident) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChopsIncident) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChopsIncident) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (m *ChopsIncident) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ChopsIncident) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ChopsIncident) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_RED
}

type ChopsService struct {
	Name      string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Incidents []*ChopsIncident `protobuf:"bytes,2,rep,name=incidents" json:"incidents,omitempty"`
	Sla       string           `protobuf:"bytes,3,opt,name=sla" json:"sla,omitempty"`
}

func (m *ChopsService) Reset()                    { *m = ChopsService{} }
func (m *ChopsService) String() string            { return proto.CompactTextString(m) }
func (*ChopsService) ProtoMessage()               {}
func (*ChopsService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChopsService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChopsService) GetIncidents() []*ChopsIncident {
	if m != nil {
		return m.Incidents
	}
	return nil
}

func (m *ChopsService) GetSla() string {
	if m != nil {
		return m.Sla
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateOpenIncidentsRequest)(nil), "dashboard.UpdateOpenIncidentsRequest")
	proto.RegisterType((*UpdateOpenIncidentsResponse)(nil), "dashboard.UpdateOpenIncidentsResponse")
	proto.RegisterType((*GetAllServicesDataRequest)(nil), "dashboard.GetAllServicesDataRequest")
	proto.RegisterType((*GetAllServicesDataResponse)(nil), "dashboard.GetAllServicesDataResponse")
	proto.RegisterType((*ChopsIncident)(nil), "dashboard.ChopsIncident")
	proto.RegisterType((*ChopsService)(nil), "dashboard.ChopsService")
	proto.RegisterEnum("dashboard.Severity", Severity_name, Severity_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChopsServiceStatus service

type ChopsServiceStatusClient interface {
	UpdateOpenIncidents(ctx context.Context, in *UpdateOpenIncidentsRequest, opts ...grpc.CallOption) (*UpdateOpenIncidentsResponse, error)
	GetAllServicesData(ctx context.Context, in *GetAllServicesDataRequest, opts ...grpc.CallOption) (*GetAllServicesDataResponse, error)
}
type chopsServiceStatusPRPCClient struct {
	client *prpc.Client
}

func NewChopsServiceStatusPRPCClient(client *prpc.Client) ChopsServiceStatusClient {
	return &chopsServiceStatusPRPCClient{client}
}

func (c *chopsServiceStatusPRPCClient) UpdateOpenIncidents(ctx context.Context, in *UpdateOpenIncidentsRequest, opts ...grpc.CallOption) (*UpdateOpenIncidentsResponse, error) {
	out := new(UpdateOpenIncidentsResponse)
	err := c.client.Call(ctx, "dashboard.ChopsServiceStatus", "UpdateOpenIncidents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chopsServiceStatusPRPCClient) GetAllServicesData(ctx context.Context, in *GetAllServicesDataRequest, opts ...grpc.CallOption) (*GetAllServicesDataResponse, error) {
	out := new(GetAllServicesDataResponse)
	err := c.client.Call(ctx, "dashboard.ChopsServiceStatus", "GetAllServicesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type chopsServiceStatusClient struct {
	cc *grpc.ClientConn
}

func NewChopsServiceStatusClient(cc *grpc.ClientConn) ChopsServiceStatusClient {
	return &chopsServiceStatusClient{cc}
}

func (c *chopsServiceStatusClient) UpdateOpenIncidents(ctx context.Context, in *UpdateOpenIncidentsRequest, opts ...grpc.CallOption) (*UpdateOpenIncidentsResponse, error) {
	out := new(UpdateOpenIncidentsResponse)
	err := grpc.Invoke(ctx, "/dashboard.ChopsServiceStatus/UpdateOpenIncidents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chopsServiceStatusClient) GetAllServicesData(ctx context.Context, in *GetAllServicesDataRequest, opts ...grpc.CallOption) (*GetAllServicesDataResponse, error) {
	out := new(GetAllServicesDataResponse)
	err := grpc.Invoke(ctx, "/dashboard.ChopsServiceStatus/GetAllServicesData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChopsServiceStatus service

type ChopsServiceStatusServer interface {
	UpdateOpenIncidents(context.Context, *UpdateOpenIncidentsRequest) (*UpdateOpenIncidentsResponse, error)
	GetAllServicesData(context.Context, *GetAllServicesDataRequest) (*GetAllServicesDataResponse, error)
}

func RegisterChopsServiceStatusServer(s prpc.Registrar, srv ChopsServiceStatusServer) {
	s.RegisterService(&_ChopsServiceStatus_serviceDesc, srv)
}

func _ChopsServiceStatus_UpdateOpenIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenIncidentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChopsServiceStatusServer).UpdateOpenIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.ChopsServiceStatus/UpdateOpenIncidents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChopsServiceStatusServer).UpdateOpenIncidents(ctx, req.(*UpdateOpenIncidentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChopsServiceStatus_GetAllServicesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllServicesDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChopsServiceStatusServer).GetAllServicesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.ChopsServiceStatus/GetAllServicesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChopsServiceStatusServer).GetAllServicesData(ctx, req.(*GetAllServicesDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChopsServiceStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.ChopsServiceStatus",
	HandlerType: (*ChopsServiceStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateOpenIncidents",
			Handler:    _ChopsServiceStatus_UpdateOpenIncidents_Handler,
		},
		{
			MethodName: "GetAllServicesData",
			Handler:    _ChopsServiceStatus_GetAllServicesData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/dashboard/api/dashboard/dashboard.proto",
}

func init() {
	proto.RegisterFile("infra/appengine/dashboard/api/dashboard/dashboard.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0xc7, 0xbb, 0x49, 0x6d, 0x93, 0x69, 0xef, 0x3c, 0xa6, 0x0f, 0xa6, 0x57, 0xc4, 0x23, 0x58,
	0x39, 0x7c, 0xe8, 0xc1, 0x15, 0xd4, 0x07, 0x41, 0xc5, 0x16, 0x11, 0x0a, 0x85, 0x3d, 0x45, 0xf4,
	0xc1, 0xb0, 0x4d, 0xb6, 0x76, 0x21, 0xdd, 0x5d, 0xb3, 0x7b, 0x07, 0xfe, 0x1d, 0xbe, 0xfb, 0xbf,
	0xf9, 0x9f, 0x48, 0x36, 0x3f, 0x2e, 0xea, 0x5d, 0xef, 0x6d, 0x32, 0xdf, 0x99, 0xd9, 0xcf, 0x77,
	0x77, 0x02, 0xcf, 0x85, 0xbc, 0x2e, 0xd8, 0x84, 0x69, 0xcd, 0xe5, 0x37, 0x21, 0xf9, 0x24, 0x63,
	0xe6, 0xe6, 0x4a, 0xb1, 0x22, 0x9b, 0x30, 0x2d, 0x3a, 0x5f, 0x6d, 0x74, 0xa2, 0x0b, 0x65, 0x15,
	0x86, 0x6d, 0x22, 0xfe, 0x02, 0xc3, 0x8f, 0x3a, 0x63, 0x96, 0x5f, 0x6a, 0x2e, 0xdf, 0xcb, 0x54,
	0x64, 0x5c, 0x5a, 0x43, 0xf9, 0xf7, 0x39, 0x37, 0x16, 0x5f, 0x42, 0x2f, 0xbd, 0x51, 0xda, 0x24,
	0x86, 0x17, 0x0b, 0x91, 0xf2, 0x88, 0x8c, 0xc8, 0x78, 0x6f, 0xfa, 0xe0, 0x64, 0x39, 0xf1, 0x6d,
	0xa9, 0xcf, 0x2a, 0x99, 0xee, 0xa7, 0x9d, 0xaf, 0xf8, 0x2b, 0x1c, 0xad, 0x9c, 0x6d, 0xb4, 0x92,
	0x86, 0xe3, 0x2b, 0xe8, 0x2b, 0xcd, 0x65, 0x22, 0x1a, 0x25, 0x22, 0x23, 0x7f, 0xbc, 0x37, 0x8d,
	0xfe, 0x9d, 0xde, 0xb4, 0xd2, 0x9e, 0xea, 0x0e, 0x8a, 0x5f, 0xc0, 0xe1, 0x3b, 0x6e, 0xdf, 0xe4,
	0x79, 0x7d, 0xa0, 0x39, 0x63, 0x96, 0x35, 0xe8, 0x47, 0x10, 0xce, 0xb5, 0x55, 0x89, 0x15, 0xb7,
	0x15, 0xb6, 0x4f, 0x83, 0x32, 0xf1, 0x41, 0xdc, 0xf2, 0xf8, 0x27, 0x81, 0xe1, 0xaa, 0xd6, 0x9a,
	0xec, 0x14, 0x82, 0xda, 0x70, 0xc3, 0xb4, 0xd6, 0x71, 0x5b, 0x88, 0xaf, 0xe1, 0xbe, 0x54, 0xd2,
	0xe4, 0x2c, 0x69, 0x7b, 0xbd, 0xbb, 0x7b, 0xfb, 0x55, 0x7d, 0x83, 0x10, 0xff, 0x22, 0xd0, 0xfb,
	0xcb, 0x30, 0xf6, 0xc1, 0x13, 0x99, 0xa3, 0x0f, 0xa9, 0x27, 0x32, 0x44, 0xd8, 0x2e, 0xaf, 0x20,
	0xf2, 0x46, 0x64, 0x1c, 0x50, 0x17, 0xe3, 0x43, 0x00, 0x63, 0x59, 0x61, 0x2b, 0xa7, 0xbe, 0x73,
	0x1a, 0xba, 0x4c, 0x69, 0x15, 0x0f, 0x21, 0xe0, 0x32, 0xab, 0xc4, 0x6d, 0x27, 0xee, 0x72, 0x99,
	0x39, 0x69, 0x52, 0xda, 0x5c, 0xf0, 0x42, 0xd8, 0x1f, 0xd1, 0xbd, 0x11, 0x19, 0xf7, 0xa7, 0x07,
	0x1d, 0xd4, 0x59, 0x2d, 0xd1, 0xb6, 0x28, 0xce, 0x61, 0xbf, 0x6b, 0xa0, 0xc4, 0x91, 0xac, 0xbe,
	0xde, 0x90, 0xba, 0x18, 0x9f, 0x41, 0xb8, 0x7c, 0x50, 0x6f, 0xc3, 0x83, 0x2e, 0x4b, 0x71, 0x00,
	0xbe, 0xc9, 0x99, 0xe3, 0x0f, 0x69, 0x19, 0x3e, 0x7d, 0x04, 0x41, 0xc3, 0x80, 0xbb, 0xe0, 0xd3,
	0xf3, 0xb3, 0xc1, 0x16, 0x02, 0xec, 0x7c, 0x3e, 0xbf, 0xb8, 0xb8, 0xfc, 0x34, 0x20, 0xd3, 0xdf,
	0x04, 0xb0, 0xcb, 0x33, 0xb3, 0xcc, 0xce, 0x0d, 0x5e, 0xc3, 0xc1, 0x8a, 0xb5, 0xc3, 0xe3, 0x0e,
	0xc5, 0xfa, 0x95, 0x1f, 0x3e, 0xd9, 0x54, 0x56, 0xed, 0x48, 0xbc, 0x85, 0x29, 0xe0, 0xff, 0x3b,
	0x84, 0x8f, 0x3b, 0xfd, 0x6b, 0xb7, 0x73, 0x78, 0xbc, 0xa1, 0xaa, 0x39, 0xe4, 0x6a, 0xc7, 0xfd,
	0xb1, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xe1, 0x83, 0xcc, 0xec, 0x03, 0x00, 0x00,
}
