// Code generated by MockGen. DO NOT EDIT.
// Source: go.chromium.org/luci/milo/api/proto (interfaces: BuildbotClient,BuildInfoClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "go.chromium.org/luci/milo/api/proto"
	grpc "google.golang.org/grpc"
)

// MockBuildbotClient is a mock of BuildbotClient interface
type MockBuildbotClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuildbotClientMockRecorder
}

// MockBuildbotClientMockRecorder is the mock recorder for MockBuildbotClient
type MockBuildbotClientMockRecorder struct {
	mock *MockBuildbotClient
}

// NewMockBuildbotClient creates a new mock instance
func NewMockBuildbotClient(ctrl *gomock.Controller) *MockBuildbotClient {
	mock := &MockBuildbotClient{ctrl: ctrl}
	mock.recorder = &MockBuildbotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildbotClient) EXPECT() *MockBuildbotClientMockRecorder {
	return m.recorder
}

// GetBuildbotBuildJSON mocks base method
func (m *MockBuildbotClient) GetBuildbotBuildJSON(arg0 context.Context, arg1 *proto.BuildbotBuildRequest, arg2 ...grpc.CallOption) (*proto.BuildbotBuildJSON, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuildbotBuildJSON", varargs...)
	ret0, _ := ret[0].(*proto.BuildbotBuildJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildbotBuildJSON indicates an expected call of GetBuildbotBuildJSON
func (mr *MockBuildbotClientMockRecorder) GetBuildbotBuildJSON(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildbotBuildJSON", reflect.TypeOf((*MockBuildbotClient)(nil).GetBuildbotBuildJSON), varargs...)
}

// GetBuildbotBuildsJSON mocks base method
func (m *MockBuildbotClient) GetBuildbotBuildsJSON(arg0 context.Context, arg1 *proto.BuildbotBuildsRequest, arg2 ...grpc.CallOption) (*proto.BuildbotBuildsJSON, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuildbotBuildsJSON", varargs...)
	ret0, _ := ret[0].(*proto.BuildbotBuildsJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildbotBuildsJSON indicates an expected call of GetBuildbotBuildsJSON
func (mr *MockBuildbotClientMockRecorder) GetBuildbotBuildsJSON(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildbotBuildsJSON", reflect.TypeOf((*MockBuildbotClient)(nil).GetBuildbotBuildsJSON), varargs...)
}

// GetCompressedMasterJSON mocks base method
func (m *MockBuildbotClient) GetCompressedMasterJSON(arg0 context.Context, arg1 *proto.MasterRequest, arg2 ...grpc.CallOption) (*proto.CompressedMasterJSON, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompressedMasterJSON", varargs...)
	ret0, _ := ret[0].(*proto.CompressedMasterJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompressedMasterJSON indicates an expected call of GetCompressedMasterJSON
func (mr *MockBuildbotClientMockRecorder) GetCompressedMasterJSON(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompressedMasterJSON", reflect.TypeOf((*MockBuildbotClient)(nil).GetCompressedMasterJSON), varargs...)
}

// MockBuildInfoClient is a mock of BuildInfoClient interface
type MockBuildInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuildInfoClientMockRecorder
}

// MockBuildInfoClientMockRecorder is the mock recorder for MockBuildInfoClient
type MockBuildInfoClientMockRecorder struct {
	mock *MockBuildInfoClient
}

// NewMockBuildInfoClient creates a new mock instance
func NewMockBuildInfoClient(ctrl *gomock.Controller) *MockBuildInfoClient {
	mock := &MockBuildInfoClient{ctrl: ctrl}
	mock.recorder = &MockBuildInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildInfoClient) EXPECT() *MockBuildInfoClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBuildInfoClient) Get(arg0 context.Context, arg1 *proto.BuildInfoRequest, arg2 ...grpc.CallOption) (*proto.BuildInfoResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.BuildInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBuildInfoClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBuildInfoClient)(nil).Get), varargs...)
}
