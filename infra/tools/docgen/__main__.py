#!/usr/bin/env python
# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Convenience script to generate documentation with Sphinx."""

import argparse
import glob
import logging
import os
import shutil
import subprocess
import sys

import infra.path_hacks as path_hacks


class Generator(object):

  def __init__(self, repository, base):
    self._root = os.path.abspath(repository)
    if not base.endswith('/'):
      base += '/'
    self._base = base

  def _run_generate_hooks(self):
    """Run all Python scripts in doc/hooks/generate."""
    hooks_dir = os.path.join(self._root, 'doc', 'hooks', 'generate')
    filenames = glob.glob(os.path.join(hooks_dir, '*.py'))
    for filename in filenames:
      print 'Running hook %s' % filename
      subprocess.check_call([sys.executable, filename])

  def cmd_run(self):
    """Generate html files from rst files.
    """

    # Clean
    cmd = os.path.join('bootstrap', 'remove_orphaned_pycs.py')
    subprocess.check_call([sys.executable, cmd, self._root],
                          cwd=path_hacks.full_infra_path)

    # Add missing rst files
    self._run_generate_hooks()

    cmd = os.path.join(path_hacks.full_infra_path, 'ENV', 'bin',
                        'sphinx-apidoc')
    subprocess.check_call([cmd,
                           '-o', os.path.join('doc', 'source', 'reference'),
                           self._base], cwd=self._root)

    # Build html documentation for rst files
    cmd = os.path.join(path_hacks.full_infra_path, 'ENV', 'bin',
                       'sphinx-build')
    subprocess.check_call([cmd, '-b', 'html',
                           os.path.join('doc', 'source'),
                           os.path.join('doc', 'html')],
                          cwd=self._root)


  def cmd_clean(self):
    """Remove all files generated by the 'generate' command."""
    paths = (os.path.join(self._root, 'doc', 'source', 'reference'),
             os.path.join(self._root, 'doc', 'html'))
    for path in paths:
      try:
        shutil.rmtree(path)
      except OSError:  # pragma: no cover
        pass
      else:
        logging.info('Removing %s ...' % path)


def main(argv):
  default_root = path_hacks.full_infra_path
  default_base = "infra/"
  if len(argv) == 0:
    argv = ['run']

  parser = argparse.ArgumentParser()
  parser.add_argument('--root',
      default=default_root,
      help='The root directory to place files in. Default is: %(default)s.')
  parser.add_argument('--base',
      default=default_base,
      help='The base directory under root to begin indexing documentation. '
           'Default is: %(default)s.')
  subparsers = parser.add_subparsers(title='commands')
  subparsers.add_parser('run').set_defaults(func=lambda gen: gen.cmd_run())
  subparsers.add_parser('clean').set_defaults(func=lambda gen: gen.cmd_clean())

  args = parser.parse_args(argv)
  gen = Generator(args.root, args.base)
  return args.func(gen)


if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
