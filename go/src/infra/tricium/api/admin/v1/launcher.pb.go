// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/tricium/api/admin/v1/launcher.proto

package admin

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LaunchRequest contains the details needed to launch a workflow for an analysis request.
type LaunchRequest struct {
	// The run ID created by a Tricium.Analyze call.
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// The name of the project in luci-config.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// The full URL of the git repo used for this run.
	GitUrl string `protobuf:"bytes,3,opt,name=git_url,json=gitUrl" json:"git_url,omitempty"`
	// A git commit-ish, such as a Gerrit revision ref name like
	// "refs/changes/34/1234/1", or any other ref name or commit hash.
	GitRef string `protobuf:"bytes,4,opt,name=git_ref,json=gitRef" json:"git_ref,omitempty"`
	// File paths from the root of the Git repository.
	// TODO(qyearsley): Replace this with a list of file metadata messages.
	Paths []string `protobuf:"bytes,5,rep,name=paths" json:"paths,omitempty"`
}

func (m *LaunchRequest) Reset()                    { *m = LaunchRequest{} }
func (m *LaunchRequest) String() string            { return proto.CompactTextString(m) }
func (*LaunchRequest) ProtoMessage()               {}
func (*LaunchRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LaunchRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *LaunchRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LaunchRequest) GetGitUrl() string {
	if m != nil {
		return m.GitUrl
	}
	return ""
}

func (m *LaunchRequest) GetGitRef() string {
	if m != nil {
		return m.GitRef
	}
	return ""
}

func (m *LaunchRequest) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type LaunchResponse struct {
}

func (m *LaunchResponse) Reset()                    { *m = LaunchResponse{} }
func (m *LaunchResponse) String() string            { return proto.CompactTextString(m) }
func (*LaunchResponse) ProtoMessage()               {}
func (*LaunchResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func init() {
	proto.RegisterType((*LaunchRequest)(nil), "admin.LaunchRequest")
	proto.RegisterType((*LaunchResponse)(nil), "admin.LaunchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Launcher service

type LauncherClient interface {
	// Launch launches a workflow for provided request details.
	Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
}
type launcherPRPCClient struct {
	client *prpc.Client
}

func NewLauncherPRPCClient(client *prpc.Client) LauncherClient {
	return &launcherPRPCClient{client}
}

func (c *launcherPRPCClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.client.Call(ctx, "admin.Launcher", "Launch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type launcherClient struct {
	cc *grpc.ClientConn
}

func NewLauncherClient(cc *grpc.ClientConn) LauncherClient {
	return &launcherClient{cc}
}

func (c *launcherClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := grpc.Invoke(ctx, "/admin.Launcher/Launch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Launcher service

type LauncherServer interface {
	// Launch launches a workflow for provided request details.
	Launch(context.Context, *LaunchRequest) (*LaunchResponse, error)
}

func RegisterLauncherServer(s prpc.Registrar, srv LauncherServer) {
	s.RegisterService(&_Launcher_serviceDesc, srv)
}

func _Launcher_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Launcher/Launch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).Launch(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Launcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Launcher",
	HandlerType: (*LauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Launch",
			Handler:    _Launcher_Launch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/launcher.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/launcher.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x40, 0xa9, 0xb5, 0x59, 0x77, 0x40, 0x91, 0xb0, 0x8b, 0xc1, 0x53, 0xd9, 0x53, 0xbd, 0x34,
	0xa8, 0xf8, 0x01, 0x1e, 0x85, 0x3d, 0x05, 0x3c, 0x2f, 0xb1, 0x4d, 0x77, 0x47, 0xda, 0x24, 0x4e,
	0x12, 0xbf, 0xc1, 0xcf, 0x16, 0x52, 0x2b, 0xe8, 0x6d, 0xde, 0x3c, 0x18, 0xde, 0xc0, 0x1d, 0xda,
	0x81, 0xb4, 0x8c, 0x84, 0x1d, 0xa6, 0x49, 0x6a, 0x8f, 0x52, 0xf7, 0x13, 0x5a, 0xf9, 0x79, 0x2f,
	0x47, 0x9d, 0x6c, 0x77, 0x32, 0xd4, 0x7a, 0x72, 0xd1, 0xf1, 0x2a, 0x8b, 0xdd, 0x57, 0x01, 0x97,
	0xfb, 0x6c, 0x94, 0xf9, 0x48, 0x26, 0x44, 0xbe, 0x05, 0x46, 0xc9, 0x1e, 0xb0, 0x17, 0x45, 0x5d,
	0x34, 0xa5, 0xaa, 0x28, 0xd9, 0x97, 0x9e, 0x0b, 0x58, 0x79, 0x72, 0xef, 0xa6, 0x8b, 0xe2, 0xac,
	0x2e, 0x9a, 0xb5, 0x5a, 0x90, 0xdf, 0xc0, 0xea, 0x88, 0xf1, 0x90, 0x68, 0x14, 0x65, 0x36, 0xec,
	0x88, 0xf1, 0x95, 0xc6, 0x45, 0x90, 0x19, 0xc4, 0xf9, 0xaf, 0x50, 0x66, 0xe0, 0x1b, 0xa8, 0xbc,
	0x8e, 0xa7, 0x20, 0xaa, 0xba, 0x6c, 0xd6, 0x6a, 0x86, 0xdd, 0x35, 0x5c, 0x2d, 0x25, 0xc1, 0x3b,
	0x1b, 0xcc, 0xc3, 0x33, 0x5c, 0xec, 0x7f, 0xaa, 0xf9, 0x13, 0xb0, 0x79, 0xe6, 0x9b, 0x36, 0xa7,
	0xb7, 0x7f, 0xb2, 0x6f, 0xb7, 0xff, 0xb6, 0xf3, 0x89, 0x37, 0x96, 0xbf, 0x7d, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xde, 0x93, 0xba, 0x65, 0x1a, 0x01, 0x00, 0x00,
}
