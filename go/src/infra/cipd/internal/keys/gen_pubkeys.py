#!/usr/bin/env python
# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Regenerates *_gen.go files based on the contents of <dir>/*.pub."""

import hashlib
import os
import sys

# Directory with this file.
BASE_DIR = os.path.dirname(os.path.abspath(__file__))


HEADER = r"""
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is generated by gen_pubkeys.py, do not modify.

// +build %(tags)s

package keys

// Used by KeysetName().
var keysetName = "%(category)s"

// To make a new private-public key pair:
// > openssl genrsa -out private.pem 4096
// > openssl rsa -in private.pem -pubout -out public.pub

var publicKeys = []PublicKey{""".lstrip('\n')

ENTRY = r"""
	PublicKey{
		Valid:       true,
		Name:        "%(name)s",
		Fingerprint: "%(fingerprint)s",
		PEM: `%(pem)s`,
	},""".lstrip('\n')

FOOTER = '}\n'


def get_fingerprint(pem):
  """Generates public key fingerprint.

  See also keys.go.
  """
  return hashlib.sha1(pem).hexdigest()


def gen(category, tags):
  keys_dir = os.path.join(BASE_DIR, category)
  keys = sorted(k for k in os.listdir(keys_dir) if k.endswith('.pub'))

  output = [HEADER % {'category': category, 'tags': tags}]
  if keys:
    output.append('\n')
  for k in keys:
    with open(os.path.join(keys_dir, k), 'r') as f:
      body = f.read()
    output.append(ENTRY % {
      'name': '%s/%s' % (category, k),
      'fingerprint': get_fingerprint(body),
      'pem': body,
    })
  if keys:
    output.append('\n')
  output.append(FOOTER)
  body = ''.join(output)

  filename = 'pubkeys_%s_gen.go' % category
  keys_go = os.path.join(BASE_DIR, filename)

  # Skip if already up-to-date.
  if os.path.exists(keys_go):
    with open(keys_go, 'r') as f:
      if f.read() == body:
        print '%s: Up to date.' % filename
        return

  with open(keys_go, 'w') as f:
    f.write(body)
    print '%s: Updated.' % filename


def main():
  gen('release', tags='release')
  gen('testing', tags='!release')
  return 0


if __name__ == '__main__':
  sys.exit(main())
