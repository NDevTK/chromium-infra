{"cq_dry_run":false,"all_required_reviewers_approved":true,"description":"first commit: rietfeld code review parser, searches for legit lgtm and tbr\n\nBUG=499022\n\nCommitted: https://chromium.googlesource.com/infra/infra/+/357981da4130c7668994112d65583ed512215de0","created":"2015-06-10 22:00:02.237840","cc":["chromium-reviews@chromium.org"],"reviewers":["hinoka@chromium.org","pgervais@chromium.org"],"messages":[{"patchset":1,"sender":"ksho@google.com","recipients":["ksho@google.com","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-10 22:07:52.763610","text":"ksho@google.com changed reviewers:\n+ hinoka@chromium.org, pgervais@chromium.org","issue_was_closed":false,"auto_generated":true,"disapproval":false},{"patchset":1,"sender":"ksho@google.com","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-10 22:08:16.011620","text":"","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":1,"sender":"pgervais@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":true,"date":"2015-06-10 22:41:29.496470","text":"Looks good, with a ton of comments on style, as expected :-)\n\nSeveral general comments:\n- file name should be lowercase, underscore-separated:\ncode_review_parse.py. We have to support mac and windows and their filesystems are case-insensitive. Requiring all-lowercase file names helps us stay away from problems like 'myModule.py' and 'MyModule.py' being present in the same directory (only possible on linux)\n\n- a similar comment applies to names in code: we use underscore-separated words for functions, attributes and methods. Full CamelCase is for class names. See also pep8: https://www.python.org/dev/peps/pep-0008/\n\n- you may want to move the test files inside test/data/, just to clarify the directory structure. It'll also be more consistent with the rest of the codebase.\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py\nFile infra/tools/antibody/codeReviewParse.py (right):\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode1\ninfra/tools/antibody/codeReviewParse.py:1: import json\nAdd the chromium copyright header (look into infra_libs/logs.py e.g., the comment on the first 3 lines).\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode6\ninfra/tools/antibody/codeReviewParse.py:6: def extractJsonData(issueNum):\nWe require two blank lines between top-level definitions:\n\nimport urllib\n\n \ndef extractJsonData(issueNum):\n\n(and same thing between functions)\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode8\ninfra/tools/antibody/codeReviewParse.py:8: \"?messages=true\"\nUse a format statement instead, it's clearer: \nJSONdataURL = \"https://codereview.chromium.org/api/%s?messages=true\" % str(issueNum)\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode9\ninfra/tools/antibody/codeReviewParse.py:9: rawData = urllib.urlopen(JSONdataURL)\nUse the request library instead. It handles https better (validating certificates and such):\n\nimport requests\nrequests.get(url)\n\nExample usage in infra/libs/buildbot/master.py (see also the official documentation http://docs.python-requests.org/en/latest/\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode23\ninfra/tools/antibody/codeReviewParse.py:23: if not line.strip().startswith('>') and re.search(r'^TBR=.*', line))\nYou can simplify a bit:\n\nany(not line.strip().startswith('>') and re.search(r'^TBR=.*', line)\n    for line in description.splitlines())\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode25\ninfra/tools/antibody/codeReviewParse.py:25: def main(argv, out = sys.stdout):\nI guess this file is intended to provide functions to extract TBR/lgtm information. Having a main is redundant with the presence of tests. So just drop it :-)\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py\nFile infra/tools/antibody/test/codeReviewParse_test.py (right):\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py#newcode11\ninfra/tools/antibody/test/codeReviewParse_test.py:11: setattr(codeReviewParse, \"extractJsonData\", fakeExtractJsonData)\nYou actually don't have to modify codeReviewParse.extractJsonData: you can use fakeExtractJsonData directly line22-27.\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py#newcode30\ninfra/tools/antibody/test/codeReviewParse_test.py:30: self.assertTrue(codeReviewParse.containsLGTM(self.lgtmNoTBRJson))\nI would condense that into a loop. Something like:\n\nissues_with_lgtm = (1158153006, 1146053009, 1175623002)\nfor issue in issues_with_lgtm:\n   self.assertTrue(codeReviewParse.containsLGTM(fakeExtractJsonData(issue))\n\nissues_without_lgtm = (1175993003, 1004453003, 1171763002)for issue in issues_with_lgtm:\n   self.assertFalse(codeReviewParse.containsLGTM(fakeExtractJsonData(issue))\n\nAnd similar for TBR/no TBR\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py#newcode52\ninfra/tools/antibody/test/codeReviewParse_test.py:52: unittest.main()\nThis is not required when using test.py, and as you've seen even broken. Just remove it.","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":1,"sender":"pgervais@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-10 22:43:06.858290","text":"On 2015/06/10 22:41:29, pgervais wrote:\n> Looks good, with a ton of comments on style, as expected :-)\n> \n> Several general comments:\n> - file name should be lowercase, underscore-separated:\n> code_review_parse.py. We have to support mac and windows and their filesystems\n> are case-insensitive. Requiring all-lowercase file names helps us stay away from\n> problems like 'myModule.py' and 'MyModule.py' being present in the same\n> directory (only possible on linux)\n> \n> - a similar comment applies to names in code: we use underscore-separated words\n> for functions, attributes and methods. Full CamelCase is for class names. See\n> also pep8: https://www.python.org/dev/peps/pep-0008/\n> \n> - you may want to move the test files inside test/data/, just to clarify the\n> directory structure. It'll also be more consistent with the rest of the\n> codebase.\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py\n> File infra/tools/antibody/codeReviewParse.py (right):\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode1\n> infra/tools/antibody/codeReviewParse.py:1: import json\n> Add the chromium copyright header (look into infra_libs/logs.py e.g., the\n> comment on the first 3 lines).\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode6\n> infra/tools/antibody/codeReviewParse.py:6: def extractJsonData(issueNum):\n> We require two blank lines between top-level definitions:\n> \n> import urllib\n> \n>  \n> def extractJsonData(issueNum):\n> \n> (and same thing between functions)\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode8\n> infra/tools/antibody/codeReviewParse.py:8: \"?messages=true\"\n> Use a format statement instead, it's clearer: \n> JSONdataURL = \"https://codereview.chromium.org/api/%s?messages=true\" %\n> str(issueNum)\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode9\n> infra/tools/antibody/codeReviewParse.py:9: rawData = urllib.urlopen(JSONdataURL)\n> Use the request library instead. It handles https better (validating\n> certificates and such):\n> \n> import requests\n> requests.get(url)\n> \n> Example usage in infra/libs/buildbot/master.py (see also the official\n> documentation http://docs.python-requests.org/en/latest/\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode23\n> infra/tools/antibody/codeReviewParse.py:23: if not line.strip().startswith('>')\n> and re.search(r'^TBR=.*', line))\n> You can simplify a bit:\n> \n> any(not line.strip().startswith('>') and re.search(r'^TBR=.*', line)\n>     for line in description.splitlines())\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/codeReviewParse.py#newcode25\n> infra/tools/antibody/codeReviewParse.py:25: def main(argv, out = sys.stdout):\n> I guess this file is intended to provide functions to extract TBR/lgtm\n> information. Having a main is redundant with the presence of tests. So just drop\n> it :-)\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py\n> File infra/tools/antibody/test/codeReviewParse_test.py (right):\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py#newcode11\n> infra/tools/antibody/test/codeReviewParse_test.py:11: setattr(codeReviewParse,\n> \"extractJsonData\", fakeExtractJsonData)\n> You actually don't have to modify codeReviewParse.extractJsonData: you can use\n> fakeExtractJsonData directly line22-27.\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py#newcode30\n> infra/tools/antibody/test/codeReviewParse_test.py:30:\n> self.assertTrue(codeReviewParse.containsLGTM(self.lgtmNoTBRJson))\n> I would condense that into a loop. Something like:\n> \n> issues_with_lgtm = (1158153006, 1146053009, 1175623002)\n> for issue in issues_with_lgtm:\n>    self.assertTrue(codeReviewParse.containsLGTM(fakeExtractJsonData(issue))\n> \n> issues_without_lgtm = (1175993003, 1004453003, 1171763002)for issue in\n> issues_with_lgtm:\n>    self.assertFalse(codeReviewParse.containsLGTM(fakeExtractJsonData(issue))\n> \n> And similar for TBR/no TBR\n> \n> https://chromiumcodereview.appspot.com/1177013002/diff/1/infra/tools/antibody/test/codeReviewParse_test.py#newcode52\n> infra/tools/antibody/test/codeReviewParse_test.py:52: unittest.main()\n> This is not required when using test.py, and as you've seen even broken. Just\n> remove it.\n\nInteresting case: I didn't know l-g-t-m written in an inline comment counted. Sending 'not lgtm' then to cancel that.","issue_was_closed":false,"auto_generated":false,"disapproval":true},{"patchset":20001,"sender":"ksho@google.com","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 17:52:21.388660","text":"fixed stylistic errors","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":20001,"sender":"pgervais@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 18:01:57.929280","text":"Looks much better! One more comment.\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/20001/infra/tools/antibody/test/code_review_parse_test.py\nFile infra/tools/antibody/test/code_review_parse_test.py (right):\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/20001/infra/tools/antibody/test/code_review_parse_test.py#newcode24\ninfra/tools/antibody/test/code_review_parse_test.py:24: self.lgtm_tbr = 1175623002\nThese are static values, so they'd probably be better as class attributes.\n\nhttps://chromiumcodereview.appspot.com/1177013002/diff/20001/infra/tools/antibody/test/code_review_parse_test.py#newcode31\ninfra/tools/antibody/test/code_review_parse_test.py:31: self.lgtm_tbr = fake_extract_json_data(self.lgtm_tbr)\nAll these are also static in the present case, and they add a level of indirection that is not so useful. Could you drop those lines and move the calls to fake_extract_json_data to the test methods instead? That would remove the need for the setUp method. Here's what I'm thinking of: \n\nclass TestCodeReviewParse(unittest.TestCase):\n  lgtm_no_tbr = 1158153006\n  ...\n\n  def testContainsLGTM(self):\n    issues__with_lgtm = (self.lgtm_no_tbr, self.mult_lgtm_no_tbr, self.lgtm_tbr)\n    for issue in issues_with_lgtm:\n      self.assertTrue(code_review_parse.contains_lgtm(fake_extract_json_data(issue)))","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":40001,"sender":"ksho@google.com","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 18:37:10.290910","text":"changed issues to class attributes, got rid of setup!","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":40001,"sender":"pgervais@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":true,"date":"2015-06-11 18:39:50.387130","text":"On 2015/06/11 18:37:10, ksho wrote:\n> changed issues to class attributes, got rid of setup!\n\nlgtm! go commit!","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":40001,"sender":"ksho@google.com","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 18:40:19.120150","text":"On 2015/06/11 18:39:50, pgervais wrote:\n> On 2015/06/11 18:37:10, ksho wrote:\n> > changed issues to class attributes, got rid of setup!\n> \n> lgtm! go commit!\n\nThanks!!! :)","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":40001,"sender":"ksho@google.com","recipients":["ksho@google.com"],"approval":false,"date":"2015-06-11 18:40:25.749150","text":"The CQ bit was checked by ksho@google.com","issue_was_closed":false,"auto_generated":true,"disapproval":false},{"patchset":40001,"sender":"commit-bot@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 18:40:47.510730","text":"CQ is trying da patch. Follow status at\n https://chromium-cq-status.appspot.com/patch-status/1177013002/40001","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":40001,"sender":"commit-bot@chromium.org","recipients":["ksho@google.com"],"approval":false,"date":"2015-06-11 18:51:27.965070","text":"The CQ bit was unchecked by commit-bot@chromium.org","issue_was_closed":false,"auto_generated":true,"disapproval":false},{"patchset":40001,"sender":"commit-bot@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 18:51:29.224160","text":"Try jobs failed on following builders:\n  infra_tester on tryserver.chromium.linux (JOB_FAILED, http://build.chromium.org/p/tryserver.chromium.linux/builders/infra_tester/builds/1995)","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":60001,"sender":"ksho@google.com","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 19:50:50.396490","text":"","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":60001,"sender":"ksho@google.com","recipients":["ksho@google.com"],"approval":false,"date":"2015-06-11 21:07:44.189560","text":"The CQ bit was checked by ksho@google.com","issue_was_closed":false,"auto_generated":true,"disapproval":false},{"patchset":60001,"sender":"ksho@google.com","recipients":["pgervais@chromium.org"],"approval":false,"date":"2015-06-11 21:07:44.694610","text":"The patchset sent to the CQ was uploaded after l-g-t-m from pgervais@chromium.org\nLink to the patchset: https://codereview.chromium.org/1177013002/#ps60001 (title: \"pragma no cover for extract json data from rietveld\")","issue_was_closed":false,"auto_generated":true,"disapproval":false},{"patchset":60001,"sender":"commit-bot@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 21:08:01.523620","text":"CQ is trying da patch. Follow status at\n https://chromium-cq-status.appspot.com/patch-status/1177013002/60001","issue_was_closed":false,"auto_generated":false,"disapproval":false},{"patchset":60001,"sender":"commit-bot@chromium.org","recipients":["ksho@google.com","hinoka@chromium.org","pgervais@chromium.org","chromium-reviews@chromium.org"],"approval":false,"date":"2015-06-11 21:23:09.940200","text":"Committed patchset #4 (id:60001) as https://chromium.googlesource.com/infra/infra/+/357981da4130c7668994112d65583ed512215de0","issue_was_closed":true,"auto_generated":false,"disapproval":false}],"owner_email":"ksho@google.com","patchsets":[1,20001,40001,60001],"modified":"2015-06-11 21:23:09.687820","private":false,"base_url":"https://chromium.googlesource.com/infra/infra.git@master","project":"infra","target_ref":"refs/heads/master","closed":true,"issue":1177013002,"owner":"ksho","commit":false,"cq_dry_run_last_triggered_by":"","required_reviewers":[],"subject":"first commit: rietfeld code review parser, searches for legit lgtm and tbr"}