// Code generated by protoc-gen-go.
// source: infra/tricium/api/admin/v1/driver.proto
// DO NOT EDIT!

package admin

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TriggerRequest contains the details needed to launch a swarming task for a
// Tricium worker.
type TriggerRequest struct {
	RunId             int64  `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	IsolateServerUrl  string `protobuf:"bytes,2,opt,name=isolate_server_url,json=isolateServerUrl" json:"isolate_server_url,omitempty"`
	IsolatedInputHash string `protobuf:"bytes,3,opt,name=isolated_input_hash,json=isolatedInputHash" json:"isolated_input_hash,omitempty"`
	Worker            string `protobuf:"bytes,4,opt,name=worker" json:"worker,omitempty"`
	SwarmingServerUrl string `protobuf:"bytes,5,opt,name=swarming_server_url,json=swarmingServerUrl" json:"swarming_server_url,omitempty"`
}

func (m *TriggerRequest) Reset()                    { *m = TriggerRequest{} }
func (m *TriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*TriggerRequest) ProtoMessage()               {}
func (*TriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TriggerRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *TriggerRequest) GetIsolateServerUrl() string {
	if m != nil {
		return m.IsolateServerUrl
	}
	return ""
}

func (m *TriggerRequest) GetIsolatedInputHash() string {
	if m != nil {
		return m.IsolatedInputHash
	}
	return ""
}

func (m *TriggerRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *TriggerRequest) GetSwarmingServerUrl() string {
	if m != nil {
		return m.SwarmingServerUrl
	}
	return ""
}

type TriggerResponse struct {
}

func (m *TriggerResponse) Reset()                    { *m = TriggerResponse{} }
func (m *TriggerResponse) String() string            { return proto.CompactTextString(m) }
func (*TriggerResponse) ProtoMessage()               {}
func (*TriggerResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// CollectRequest contains the details needed to collect results from a swarming task
// running a Tricium worker and to launch succeeding Tricium workers.
type CollectRequest struct {
	RunId            int64  `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	IsolateServerUrl string `protobuf:"bytes,2,opt,name=isolate_server_url,json=isolateServerUrl" json:"isolate_server_url,omitempty"`
	// The isolated input of this worker is imported in the input hash of any successor
	// workers of this worker. Passing it along here to make sure it is available.
	IsolatedInputHash string `protobuf:"bytes,3,opt,name=isolated_input_hash,json=isolatedInputHash" json:"isolated_input_hash,omitempty"`
	// Points out which worker to collect results for. This worker name is used to
	// mangle the ID of the swarming task running the worker.
	Worker            string `protobuf:"bytes,4,opt,name=worker" json:"worker,omitempty"`
	SwarmingServerUrl string `protobuf:"bytes,5,opt,name=swarming_server_url,json=swarmingServerUrl" json:"swarming_server_url,omitempty"`
	// The Swarming task ID.
	//
	// Used to collect results from the completed swarming worker task.
	TaskId string `protobuf:"bytes,6,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *CollectRequest) Reset()                    { *m = CollectRequest{} }
func (m *CollectRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectRequest) ProtoMessage()               {}
func (*CollectRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CollectRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *CollectRequest) GetIsolateServerUrl() string {
	if m != nil {
		return m.IsolateServerUrl
	}
	return ""
}

func (m *CollectRequest) GetIsolatedInputHash() string {
	if m != nil {
		return m.IsolatedInputHash
	}
	return ""
}

func (m *CollectRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *CollectRequest) GetSwarmingServerUrl() string {
	if m != nil {
		return m.SwarmingServerUrl
	}
	return ""
}

func (m *CollectRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type CollectResponse struct {
}

func (m *CollectResponse) Reset()                    { *m = CollectResponse{} }
func (m *CollectResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectResponse) ProtoMessage()               {}
func (*CollectResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*TriggerRequest)(nil), "admin.TriggerRequest")
	proto.RegisterType((*TriggerResponse)(nil), "admin.TriggerResponse")
	proto.RegisterType((*CollectRequest)(nil), "admin.CollectRequest")
	proto.RegisterType((*CollectResponse)(nil), "admin.CollectResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Driver service

type DriverClient interface {
	// Trigger triggers a swarming task for a Tricium worker.
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	// Collect collects results from a swarming task running a Tricium worker.
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
}
type driverPRPCClient struct {
	client *prpc.Client
}

func NewDriverPRPCClient(client *prpc.Client) DriverClient {
	return &driverPRPCClient{client}
}

func (c *driverPRPCClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.client.Call(ctx, "admin.Driver", "Trigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPRPCClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.client.Call(ctx, "admin.Driver", "Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := grpc.Invoke(ctx, "/admin.Driver/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := grpc.Invoke(ctx, "/admin.Driver/Collect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverServer interface {
	// Trigger triggers a swarming task for a Tricium worker.
	Trigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
	// Collect collects results from a swarming task running a Tricium worker.
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
}

func RegisterDriverServer(s prpc.Registrar, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Driver/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Driver/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _Driver_Trigger_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _Driver_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/driver.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/admin/v1/driver.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x52, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x55, 0xbe, 0x7e, 0x4d, 0x85, 0x87, 0x42, 0x8d, 0x5a, 0x22, 0xa6, 0xaa, 0x0b, 0x1d, 0x50,
	0x22, 0x60, 0x61, 0x87, 0x81, 0xac, 0x01, 0xe6, 0xc8, 0xd4, 0x26, 0x39, 0x35, 0xb1, 0xc3, 0xd9,
	0x4e, 0x17, 0xfe, 0x22, 0x7f, 0x83, 0xdf, 0x81, 0xec, 0xa4, 0x11, 0xed, 0x4f, 0x60, 0xbc, 0x7b,
	0x77, 0xef, 0xf9, 0xdd, 0x33, 0xb9, 0x02, 0xf9, 0x8e, 0x2c, 0x31, 0x08, 0x1b, 0xb0, 0x75, 0xc2,
	0x1a, 0x48, 0x18, 0xaf, 0x41, 0x26, 0xed, 0x4d, 0xc2, 0x11, 0x5a, 0x81, 0x71, 0x83, 0xca, 0x28,
	0x3a, 0xf6, 0xed, 0xd5, 0x57, 0x40, 0xa6, 0x2f, 0x08, 0x45, 0x21, 0x30, 0x13, 0x1f, 0x56, 0x68,
	0x43, 0xe7, 0x24, 0x44, 0x2b, 0x73, 0xe0, 0x51, 0xb0, 0x0c, 0xd6, 0xa3, 0x6c, 0x8c, 0x56, 0xa6,
	0x9c, 0x5e, 0x13, 0x0a, 0x5a, 0x55, 0xcc, 0x88, 0x5c, 0x0b, 0x6c, 0x05, 0xe6, 0x16, 0xab, 0xe8,
	0xdf, 0x32, 0x58, 0x9f, 0x64, 0x67, 0x3d, 0xf2, 0xec, 0x81, 0x57, 0xac, 0x68, 0x4c, 0xce, 0xfb,
	0x1e, 0xcf, 0x41, 0x36, 0xd6, 0xe4, 0x25, 0xd3, 0x65, 0x34, 0xf2, 0xe3, 0xb3, 0x3d, 0x94, 0x3a,
	0xe4, 0x89, 0xe9, 0x92, 0x2e, 0x48, 0xb8, 0x53, 0xb8, 0x15, 0x18, 0xfd, 0xf7, 0x23, 0x7d, 0xe5,
	0x78, 0xf4, 0x8e, 0x61, 0x0d, 0xb2, 0xf8, 0x2d, 0x3b, 0xee, 0x78, 0xf6, 0xd0, 0xa0, 0xbb, 0x9a,
	0x91, 0xd3, 0xc1, 0x8e, 0x6e, 0x94, 0xd4, 0x62, 0xf5, 0x1d, 0x90, 0xe9, 0x83, 0xaa, 0x2a, 0xb1,
	0x31, 0x7f, 0xc1, 0x22, 0xbd, 0x20, 0x13, 0xc3, 0xf4, 0xd6, 0xbd, 0x3e, 0xec, 0x88, 0x5c, 0x99,
	0x72, 0xe7, 0x7d, 0xf0, 0xd9, 0x79, 0xbf, 0xfd, 0x24, 0xe1, 0xa3, 0x4f, 0x9d, 0xde, 0x93, 0x49,
	0x7f, 0x18, 0x3a, 0x8f, 0x7d, 0xf6, 0xf1, 0x61, 0xee, 0x97, 0x8b, 0xe3, 0x76, 0xc7, 0xe1, 0x36,
	0x7b, 0xda, 0x61, 0xf3, 0xf0, 0x9c, 0xc3, 0xe6, 0x91, 0xfa, 0x5b, 0xe8, 0xbf, 0xda, 0xdd, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x07, 0x5e, 0x8f, 0x95, 0x02, 0x00, 0x00,
}
