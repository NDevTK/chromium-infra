syntax = "proto3";

package kitchen;

import "infra/tools/kitchen/third_party/recipe_engine/result.proto";
import "github.com/luci/luci-go/common/proto/milo/annotations.proto";

// Result of kitchen cook execution.
message CookResult {
  // An error returned by kitchen.
  // A build has infra-failed if and only if there was a kitchen error.
  // If a recipe fails with a failure type different from step failure,
  // it becomes a kitchen error.
  KitchenError kitchen_error = 1;
  // recipes.py's exit code.
  OptionalInt32 recipe_exit_code = 2;
  // Results returned by recipe engine.
  recipe_engine.Result recipe_result = 3;
  // Final state of the build.
  milo.Step build = 5;
}

// An int32 that can be distinguished from absence of the value.
message OptionalInt32 {
  int32 value = 1;
}

message KitchenError {
  enum Type {
    // An unexpected internal error happened inside kitchen.
    INTERNAL_ERROR = 0;
    // Kitchen input was invalid, for example flags.
    INVALID_INPUT = 1;
    // Kitchen execution was cancelled.
    CANCELED = 2;
    // Recipe has infra failed.
    RECIPE_INFRA_FAILURE = 3;
  }

  Type type = 1;
  string text = 2;
  // Kitchen call stack is populated in internal errors.
  repeated string call_stack = 3;
}
